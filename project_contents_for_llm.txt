--- File: requirements.txt ---
# onto_rag/requirements.txt

# Core Ontology Processing
rdflib>=6.0.0

# Lexical Indexing
whoosh>=2.7.0

# Embeddings & Semantic Search
sentence-transformers>=2.2.0
faiss-cpu>=1.7.0   # Or faiss-gpu if you have a CUDA-enabled GPU and want to use it

# Utilities
numpy>=1.21.0     # Often a dependency, good to specify
pandas>=1.3.0     # Dependency for libraries like 'datasets' used by sentence-transformers
python-dotenv>=0.19.0 # For loading .env files
tqdm>=4.60.0      # For progress bars in long operations

# Testing (optional, but good for development)
pytest>=6.2.0
--- END File: requirements.txt ---

--- File: results.txt ---
llama:
2025-06-11 16:06:24,274 - INFO - --- Evaluation Complete ---
2025-06-11 16:06:24,274 - INFO - Total entities evaluated: 948
2025-06-11 16:06:24,274 - INFO - Retrieval Failures (no candidates): 0
2025-06-11 16:06:24,274 - INFO - Selection Failures (LLM error): 0
2025-06-11 16:06:24,274 - INFO - ---------------------------
2025-06-11 16:06:24,274 - INFO - Valid attempts for selector: 948
2025-06-11 16:06:24,274 - INFO - Correct selections (Hits): 386
2025-06-11 16:06:24,275 - INFO - Accuracy: 0.4072 (386/948)
2025-06-11 16:06:24,275 - INFO - Saving 562 incorrect selections to /Users/jandrole/projects/onto_rag/evaluation_results.json
2025-06-11 16:06:24,301 - INFO - Evaluation finished.

gemini:
2025-06-16 10:43:04,962 - INFO - --- Evaluation Complete ---
2025-06-16 10:43:04,962 - INFO - Total entities evaluated: 948
2025-06-16 10:43:04,962 - INFO - Retrieval Failures (no candidates): 0
2025-06-16 10:43:04,962 - INFO - Selection Failures (LLM error): 0
2025-06-16 10:43:04,962 - INFO - ---------------------------
2025-06-16 10:43:04,962 - INFO - Valid attempts for selector: 948
2025-06-16 10:43:04,962 - INFO - Correct selections (Hits): 600
2025-06-16 10:43:04,962 - INFO - Accuracy: 0.6329 (600/948)
2025-06-16 10:43:04,962 - INFO - Saving 348 incorrect selections to /Users/jandrole/projects/onto_rag/evaluation_results.json
2025-06-16 10:43:04,975 - INFO - Evaluation finished.
--- END File: results.txt ---

--- File: README.md ---
# onto_rag
A Retrieval Augmented Generation system for matching extracted entities to ontologies

--- END File: README.md ---

--- File: .gitignore ---
# Byte-compiled / cache
__pycache__/
*.py[cod]
.pytest_cache/

# Environment & secrets
.env
api_key.json

# VSCode, macOS
.vscode/
.DS_Store

# Large generated data and ontology files
/data/
/ontologies/
/models/
--- END File: .gitignore ---

--- File: export_files_contents.py ---
import os
import argparse

# --- Configuration ---
# Files or directories to explicitly skip by their exact name or path (relative to root_dir)
EXCLUDE_ITEMS_EXACT = {
    ".git",
    "__pycache__",
    "data",               # <<< Exclude the entire data directory
    "docs",               # <<< Exclude the entire docs directory
    "ontologies",         # <<< Exclude the entire ontologies directory
    "api_key.json",       # Sensitive file
    ".env",               # Sensitive file (though .env.example is fine)
    "models",
    ".DS_Store",
    "evaluation_results_llama.json",
    "evaluation_results_gemini.json",
    # Add other specific files or directories if needed
    # e.g. "some_large_binary_asset.dat"
}

# File extensions to skip (typically binary or non-text files)
EXCLUDE_EXTENSIONS = {
    ".pyc",
    ".pyo",
    ".bin",
    ".exe",
    ".dll",
    ".so",
    ".o",
    ".a",
    ".lib",
    ".jar",
    ".war",
    ".ear",
    ".class",
    ".swo",
    ".swp",
    # Image/Media files
    ".jpg", ".jpeg", ".png", ".gif", ".bmp", ".tiff", ".webp",
    ".mp3", ".wav", ".ogg", ".mp4", ".avi", ".mkv", ".mov",
    # Archives
    ".zip", ".tar", ".gz", ".bz2", ".rar", ".7z",
    # Other common binary formats
    ".pdf", ".doc", ".docx", ".xls", ".xlsx", ".ppt", ".pptx",
    ".odt", ".ods", ".odp",
    ".sqlite", ".db",
    ".pkl", ".joblib", # Python pickled objects
    ".pt", ".pth", ".pb", ".onnx", # Model files
    ".DS_Store" # macOS specific
}

# --- End Configuration ---

def should_skip(item_path, root_dir, output_filename):
    """
    Determines if a file or directory should be skipped.
    item_path: absolute path to the item.
    root_dir: absolute path to the project's root directory.
    output_filename: name of the script's output file.
    """
    relative_item_path = os.path.relpath(item_path, root_dir)

    # Skip the output file itself
    if os.path.basename(item_path) == output_filename:
        return True

    # Check against exact items to exclude (can be dir names or file names or relative paths)
    # Normalize paths for comparison
    normalized_relative_item_path = relative_item_path.replace(os.sep, "/")
    for excluded in EXCLUDE_ITEMS_EXACT:
        normalized_excluded = excluded.replace(os.sep, "/")
        if normalized_relative_item_path == normalized_excluded or \
           normalized_relative_item_path.startswith(normalized_excluded + "/"):
            # print(f"Skipping '{relative_item_path}' due to exact match/prefix with '{excluded}'")
            return True
        # Also check just the basename for simple directory/file names at the root level
        # if os.path.dirname(relative_item_path) == "" and os.path.basename(item_path) == excluded:
        # The above check for basename is now effectively covered by the first part of the condition
        # if normalized_relative_item_path (e.g., "data") == normalized_excluded (e.g., "data")


    # If it's a file, check its extension
    if os.path.isfile(item_path):
        _, ext = os.path.splitext(item_path)
        if ext.lower() in EXCLUDE_EXTENSIONS:
            # print(f"Skipping '{relative_item_path}' due to extension '{ext}'")
            return True

    return False

def generate_project_context(root_dir, output_filename="project_contents_for_llm.txt"):
    """
    Generates a text file containing the names and contents of project files.
    """
    root_dir_abs = os.path.abspath(root_dir)
    output_file_abs_path = os.path.join(root_dir_abs, output_filename)


    print(f"Starting project context generation for: {root_dir_abs}")
    print(f"Output will be saved to: {output_file_abs_path}")
    print(f"Excluded items (exact name/path relative to root): {EXCLUDE_ITEMS_EXACT}")
    print(f"Excluded extensions: {EXCLUDE_EXTENSIONS}")
    print("-" * 30)

    collected_files_count = 0
    skipped_files_count = 0
    skipped_dirs_count = 0

    with open(output_file_abs_path, "w", encoding="utf-8", errors="replace") as outfile:
        for dirpath, dirnames, filenames in os.walk(root_dir_abs, topdown=True):
            # Modify dirnames in-place to skip directories
            # This is important for os.walk(topdown=True)
            original_dirnames_count = len(dirnames)
            current_dir_relative_to_root = os.path.relpath(dirpath, root_dir_abs)

            # Filter out directories to be skipped
            dirs_to_keep = []
            for d in dirnames:
                dir_full_path = os.path.join(dirpath, d)
                if not should_skip(dir_full_path, root_dir_abs, output_filename):
                    dirs_to_keep.append(d)
                else:
                    # Print skipped directory relative to root for clarity
                    skipped_dir_relative_path = os.path.relpath(dir_full_path, root_dir_abs).replace(os.sep, "/")
                    print(f"Skipping directory (and its contents): {skipped_dir_relative_path}")
                    skipped_dirs_count += 1
            dirnames[:] = dirs_to_keep


            for filename in filenames:
                file_abs_path = os.path.join(dirpath, filename)
                relative_file_path = os.path.relpath(file_abs_path, root_dir_abs)
                # Normalize for display
                display_path = relative_file_path.replace(os.sep, "/")


                if should_skip(file_abs_path, root_dir_abs, output_filename):
                    # This check might be redundant for files if their parent dir was already skipped,
                    # but good for files directly in an otherwise included dir that match other skip criteria.
                    if not any(display_path.startswith(excluded_dir + "/") for excluded_dir in EXCLUDE_ITEMS_EXACT if os.path.isdir(os.path.join(root_dir_abs, excluded_dir))):
                         print(f"Skipping file: {display_path}") # Only print if not part of an already reported skipped dir
                    skipped_files_count += 1
                    continue

                print(f"Processing file: {display_path}")
                outfile.write(f"--- File: {display_path} ---\n")
                try:
                    with open(file_abs_path, "r", encoding="utf-8", errors="ignore") as infile:
                        content = infile.read()
                        outfile.write(content)
                except Exception as e:
                    outfile.write(f"[Error reading file: {e}]\n")
                outfile.write(f"\n--- END File: {display_path} ---\n\n")
                collected_files_count += 1

    print("-" * 30)
    print(f"Project context generation complete.")
    print(f"Collected content from {collected_files_count} files.")
    print(f"Skipped {skipped_files_count} files (may include files within explicitly skipped dirs).")
    print(f"Skipped {skipped_dirs_count} directories (and their contents).")
    print(f"Output saved to: {output_file_abs_path}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Scans a project directory and saves file names and contents to a text file for LLM context."
    )
    parser.add_argument(
        "root_dir",
        nargs="?",
        default=".",
        help="The root directory of the project to scan (default: current directory).",
    )
    parser.add_argument(
        "--output",
        default="project_contents_for_llm.txt",
        help="The name of the output file (default: project_contents_for_llm.txt).",
    )
    args = parser.parse_args()

    generate_project_context(args.root_dir, args.output)
--- END File: export_files_contents.py ---

--- File: .env.example ---
# OpenAI & vector DB credentials
OPENAI_API_KEY=your_openai_api_key_here
PINECONE_API_KEY=your_pinecone_api_key_here
PINECONE_ENV=your_pinecone_env

--- END File: .env.example ---

--- File: evaluation_results_gemini_1.5-flash.json ---
[
    {
        "query": "ONION",
        "chosen_curie": "FOODON:03316347",
        "true_curies": [
            "NCBITaxon:4679",
            "FOODON:03301704"
        ],
        "explanation": "This term is the most general and accurate representation of an onion.  While other options describe specific types or preparations of onions, FOODON:03316347 encompasses the broadest definition of a common onion bulb.",
        "candidates_provided": [
            "FOODON:03316347",
            "FOODON:00003172",
            "FOODON:03413721",
            "FOODON:00003350",
            "FOODON:03415024",
            "FOODON:03311276",
            "FOODON:00004826",
            "FOODON:03304029",
            "FOODON:03414323",
            "FOODON:00004823",
            "FOODON:00005335",
            "FOODON:00004824",
            "FOODON:00004827",
            "FOODON:03411300",
            "FOODON:03301704",
            "FOODON:00003516",
            "FOODON:00003517",
            "FOODON:00003714",
            "FOODON:00003518",
            "FOODON:00004828",
            "FOODON:00002069",
            "FOODON:03306528",
            "FOODON:03316397",
            "FOODON:03306350",
            "FOODON:03316446",
            "FOODON:03306563",
            "FOODON:03310327",
            "FOODON:03315770",
            "FOODON:03306529",
            "FOODON:03316398",
            "FOODON:03304118",
            "FOODON:03309591",
            "FOODON:03316173",
            "FOODON:03316176",
            "FOODON:00002067",
            "FOODON:03311124",
            "FOODON:03304740"
        ]
    },
    {
        "query": "WALNUTS",
        "chosen_curie": "FOODON:03301364",
        "true_curies": [
            "NCBITaxon:16718"
        ],
        "explanation": "While several FOODON IDs refer to walnuts in various forms (e.g.,  FOODON:03316466, FOODON:03310998, FOODON:03315233), FOODON:03301364 is the most concise and general term for a walnut, simply defining it as 'A drupe fruit from a walnut tree (Juglans)', encompassing various walnut types. Other options are either too specific (e.g., referring to specific walnut types or preparations) or too general (e.g., referring to the plant genus or group of walnuts with similar pesticide regulations).",
        "candidates_provided": [
            "NCBITaxon:16718",
            "FOODON:03541165",
            "FOODON:03541166",
            "FOODON:03541167",
            "FOODON:00003218",
            "FOODON:03310173",
            "NCBITaxon:13402",
            "FOODON:00002338",
            "FOODON:03315233",
            "FOODON:03303110",
            "FOODON:03307229",
            "FOODON:03301364",
            "FOODON:03316466",
            "FOODON:03306520",
            "FOODON:00001833",
            "FOODON:03310998",
            "FOODON:03311689",
            "FOODON:00005348",
            "FOODON:00001722",
            "FOODON:00003564",
            "FOODON:00001652",
            "FOODON:03310721",
            "FOODON:03311323",
            "FOODON:03316049",
            "FOODON:03310876",
            "FOODON:03411290",
            "FOODON:03307235"
        ]
    },
    {
        "query": "ARTICHOKE",
        "chosen_curie": "FOODON:00003573",
        "true_curies": [
            "NCBITaxon:59895"
        ],
        "explanation": "While several terms mention 'artichoke', FOODON:00003573, 'artichoke head', provides the most general and encompassing definition, referring to the inflorescence of the plant.  Other options specify preparations (raw, heart, etc.), or refer to other plants (Jerusalem artichoke).  This term best represents the user's broad entity 'ARTICHOKE'.",
        "candidates_provided": [
            "FOODON:03301369",
            "FOODON:00003573",
            "FOODON:03301188",
            "FOODON:00003706",
            "FOODON:00001979",
            "FOODON:03301370",
            "FOODON:03544191",
            "NCBITaxon:59895",
            "FOODON:03304771",
            "FOODON:03304593",
            "FOODON:03411466",
            "FOODON:03412965",
            "FOODON:03310965",
            "FOODON:03306733",
            "FOODON:03301191",
            "FOODON:03301208",
            "FOODON:03411038",
            "FOODON:03301773",
            "FOODON:00001617",
            "FOODON:03000049",
            "FOODON:03306086",
            "FOODON:00001167",
            "NCBITaxon:4219"
        ]
    },
    {
        "query": "MOZZARELLA CHEESE",
        "chosen_curie": "FOODON:03303579",
        "true_curies": [
            "FOODON:03303578",
            "FOODON:00001013"
        ],
        "explanation": "While several options mention mozzarella cheese, FOODON:03303579, 'mozzarella cheese (low-moisture, part-skim)', offers the most specific description.  Many mozzarella types exist; specifying low-moisture and part-skim narrows the scope significantly, aligning better with the generality of the user's input 'MOZZARELLA CHEESE' without making assumptions about the specific type of mozzarella.",
        "candidates_provided": [
            "FOODON:03542735",
            "FOODON:03542866",
            "FOODON:00002543",
            "FOODON:00003868",
            "FOODON:00003865",
            "FOODON:00003867",
            "FOODON:00001013",
            "FOODON:03306275",
            "FOODON:00001033",
            "FOODON:00002960",
            "FOODON:03303675",
            "FOODON:00002421",
            "FOODON:00002425",
            "FOODON:03400185",
            "FOODON:03400786",
            "FOODON:03303578",
            "FOODON:00003933",
            "FOODON:00003863",
            "FOODON:03000478",
            "FOODON:03400115",
            "FOODON:03309493",
            "FOODON:03303877",
            "FOODON:03310353",
            "FOODON:03301788",
            "FOODON:03303579",
            "FOODON:03316584",
            "FOODON:03316862",
            "FOODON:03303682",
            "FOODON:00001945",
            "FOODON:00001048",
            "FOODON:03309371",
            "FOODON:03303502",
            "FOODON:03303548",
            "FOODON:03305272",
            "FOODON:03315679",
            "FOODON:03303869",
            "FOODON:03304807",
            "FOODON:03306974"
        ]
    },
    {
        "query": "SALT",
        "chosen_curie": "FOODON:03400134",
        "true_curies": [
            "CHEBI:24866",
            "CHEBI:26710"
        ],
        "explanation": "While CHEBI:24866 offers a general chemical definition of salt, FOODON:03400134 is more specific to the culinary context implied by the user's input 'SALT'.  It explicitly includes table salt and substitutes, aligning better with everyday usage.",
        "candidates_provided": [
            "FOODON:03400134",
            "CHEBI:24866",
            "obo:CDNO_0200175",
            "CHEBI:50744",
            "CHEBI:50562",
            "CHEBI:190413",
            "CHEBI:190425",
            "CHEBI:190417",
            "CHEBI:190415",
            "CHEBI:190431",
            "CHEBI:190302",
            "CHEBI:190419",
            "CHEBI:190423",
            "CHEBI:190421",
            "CHEBI:190429",
            "CHEBI:190299",
            "CHEBI:24997",
            "CHEBI:190300",
            "CHEBI:190297",
            "CHEBI:190422",
            "FOODON:03309467",
            "FOODON:03309536",
            "FOODON:03306222",
            "FOODON:00002221",
            "CHEBI:24868",
            "FOODON:03305008",
            "FOODON:03309954",
            "FOODON:03315110",
            "FOODON:03460367",
            "FOODON:03303092",
            "FOODON:03315559",
            "CHEBI:51082",
            "CHEBI:24839",
            "FOODON:03414423",
            "FOODON:03414425",
            "FOODON:03413262",
            "CHEBI:35175",
            "FOODON:00002250",
            "CHEBI:33958"
        ]
    },
    {
        "query": "HONEY",
        "chosen_curie": "FOODON:03543011",
        "true_curies": [
            "UBERON:0036016"
        ],
        "explanation": "While UBERON:0036016 has the label 'honey', FOODON:03543011 provides a more comprehensive and contextually relevant definition of honey within the food science domain, aligning with EFSA Foodex2 standards and including different honey types and preparation methods.",
        "candidates_provided": [
            "FOODON:00004920",
            "FOODON:00004919",
            "FOODON:00002504",
            "UBERON:0036016",
            "FOODON:00004918",
            "FOODON:03401114",
            "FOODON:03543013",
            "FOODON:03543014",
            "FOODON:03543015",
            "FOODON:03543017",
            "FOODON:03543012",
            "FOODON:03401880",
            "FOODON:03401496",
            "FOODON:03543011",
            "FOODON:03543016",
            "FOODON:03540809",
            "FOODON:03544289",
            "FOODON:03400836",
            "FOODON:03544290",
            "FOODON:03302701",
            "FOODON:03301024",
            "FOODON:03305255",
            "FOODON:03301019",
            "FOODON:03301030",
            "FOODON:03301026",
            "FOODON:03301022",
            "FOODON:03304387",
            "FOODON:03305529",
            "FOODON:00001178",
            "FOODON:03305528",
            "FOODON:03305626",
            "FOODON:03301062",
            "FOODON:03460149",
            "FOODON:03301031",
            "FOODON:03301023",
            "FOODON:03301027",
            "FOODON:03305534",
            "FOODON:03305635",
            "FOODON:03301028"
        ]
    },
    {
        "query": "ROSEMARY",
        "chosen_curie": "FOODON:03540863",
        "true_curies": [
            "NCBITaxon:39367",
            "FOODON:00002212"
        ],
        "explanation": "While several terms mention rosemary, FOODON:03540863 is the most comprehensive and neutral.  It explicitly refers to the aromatic herb Rosmarinus officinalis, acknowledging that the specific part used (leaf, stem etc.) might vary and needs to be specified as a facet when needed. Other terms are too specific (e.g., dried rosemary, rosemary leaf) or too general (e.g., rosemary food product).  The terms using 'efsa foodex2' suggest a standardized terminology for food analysis which can be useful in a food ontology.",
        "candidates_provided": [
            "FOODON:00003809",
            "FOODON:03401598",
            "FOODON:03540862",
            "FOODON:03540863",
            "FOODON:03541273",
            "FOODON:03544365",
            "NCBITaxon:39367",
            "FOODON:03305866",
            "FOODON:03414392",
            "FOODON:03411495",
            "FOODON:03301209",
            "FOODON:00002212",
            "FOODON:03311170",
            "FOODON:03414915",
            "FOODON:03414342",
            "CHEBI:65585",
            "NCBITaxon:49170",
            "FOODON:03411691",
            "FOODON:03414961",
            "FOODON:03414521",
            "NCBITaxon:3764",
            "NCBITaxon:3744",
            "FOODON:03414520",
            "NCBITaxon:171638",
            "NCBITaxon:3745",
            "FOODON:03414974",
            "NCBITaxon:71275",
            "FOODON:03415132",
            "FOODON:00002211",
            "PATO:0001425",
            "NCBITaxon:1176516",
            "FOODON:03305862",
            "FOODON:03414962"
        ]
    },
    {
        "query": "CHICKEN",
        "chosen_curie": "FOODON:02020206",
        "true_curies": [
            "FOODON:03411457",
            "NCBITaxon:9031"
        ],
        "explanation": "While FOODON:03411457 ('chicken') is a direct match for the label, it is too general. FOODON:02020206 ('piece of chicken meat (raw)') provides more specificity, while still being appropriate for the entity 'CHICKEN'.  Many contexts will implicitly assume that 'chicken' refers to meat, thus this is a better fit.",
        "candidates_provided": [
            "FOODON:03310576",
            "FOODON:03601018",
            "FOODON:02020190",
            "FOODON:02020155",
            "FOODON:00003344",
            "FOODON:00003360",
            "FOODON:03303012",
            "FOODON:02020205",
            "FOODON:00003849",
            "FOODON:02020305",
            "FOODON:00002703",
            "FOODON:02020164",
            "FOODON:03303027",
            "FOODON:00002702",
            "FOODON:00003937",
            "FOODON:02020211",
            "FOODON:02020198",
            "FOODON:02020206",
            "FOODON:03316061",
            "FOODON:03411457",
            "FOODON:03311101",
            "FOODON:00004237",
            "FOODON:03304224",
            "FOODON:03307827",
            "FOODON:00001040",
            "FOODON:03310628",
            "FOODON:03311876",
            "FOODON:03303031",
            "FOODON:03311864",
            "FOODON:03311526",
            "FOODON:03305363",
            "FOODON:03304544",
            "FOODON:03310822",
            "FOODON:03311611",
            "FOODON:00002704",
            "FOODON:03301121",
            "FOODON:03315174",
            "FOODON:03317629",
            "FOODON:03304108",
            "FOODON:03303017"
        ]
    },
    {
        "query": "CORN",
        "chosen_curie": "FOODON:00001845",
        "true_curies": [
            "FOODON:03307668",
            "NCBITaxon:381124"
        ],
        "explanation": "While several terms refer to corn, FOODON:00001845, 'field corn food product', encompasses the broadest range of corn products and uses, aligning best with the general term 'CORN'. More specific terms like sweet corn or specific cultivars are too narrow.",
        "candidates_provided": [
            "FOODON:00003782",
            "FOODON:00003783",
            "FOODON:00003562",
            "FOODON:00001845",
            "FOODON:00003785",
            "FOODON:00003781",
            "FOODON:00002845",
            "FOODON:03301422",
            "FOODON:00001572",
            "FOODON:00005021",
            "FOODON:00005024",
            "FOODON:00005030",
            "FOODON:00005027",
            "FOODON:00005447",
            "FOODON:03302904",
            "FOODON:03411379",
            "FOODON:00005498",
            "FOODON:00002722",
            "FOODON:00001849",
            "FOODON:00002514",
            "FOODON:03317387",
            "FOODON:03311001",
            "FOODON:03302733",
            "FOODON:03310986",
            "FOODON:03311288",
            "FOODON:03301604",
            "FOODON:03311721",
            "FOODON:03315799",
            "FOODON:03310640",
            "FOODON:03302731",
            "FOODON:00002330",
            "FOODON:03309833",
            "FOODON:03301388",
            "FOODON:03316588",
            "FOODON:03310807",
            "FOODON:03311145",
            "FOODON:03414942",
            "FOODON:03302665",
            "FOODON:03310559",
            "FOODON:03310945"
        ]
    },
    {
        "query": "RICE",
        "chosen_curie": "FOODON:00004320",
        "true_curies": [
            "FOODON:03301641",
            "NCBITaxon:4530"
        ],
        "explanation": "While FOODON:00004327 ('rice') is a general term and a close match, FOODON:00004320 ('rice (cooked)') is preferred because it more precisely reflects the potential states of 'RICE' as a common food item.  Many instances of 'RICE' would involve it being cooked, whereas 'RICE' as a plant or raw ingredient is less common in colloquial usage.",
        "candidates_provided": [
            "FOODON:03301641",
            "FOODON:03311875",
            "FOODON:00002881",
            "FOODON:03411322",
            "FOODON:00002849",
            "FOODON:00004676",
            "FOODON:00003438",
            "FOODON:00002867",
            "FOODON:00004720",
            "FOODON:00004327",
            "FOODON:03600010",
            "FOODON:00003786",
            "FOODON:00001332",
            "FOODON:00004330",
            "FOODON:00002207",
            "FOODON:00005555",
            "FOODON:03601051",
            "FOODON:03309871",
            "FOODON:00002575",
            "FOODON:00003056",
            "FOODON:00004320",
            "FOODON:03306909",
            "FOODON:03302745",
            "FOODON:03310371",
            "FOODON:03307152",
            "FOODON:03311295",
            "FOODON:03305184",
            "FOODON:03310654",
            "FOODON:03304556",
            "FOODON:03312030",
            "FOODON:00004326",
            "FOODON:03304555",
            "FOODON:03307146",
            "FOODON:00001185",
            "FOODON:03307150",
            "FOODON:03304585",
            "FOODON:03304549",
            "FOODON:03310254",
            "FOODON:03311392",
            "FOODON:03304560"
        ]
    },
    {
        "query": "PEPPER",
        "chosen_curie": "FOODON:00003546",
        "true_curies": [
            "FOODON:00003013",
            "FOODON:03309928",
            "FOODON:00003520",
            "FOODON:00001649"
        ],
        "explanation": "While several terms mention \"pepper\", FOODON:00003546, 'bell pepper', is the most specific and accurate.  It directly addresses the user's input without specifying a color or preparation method, making it the best overall match.",
        "candidates_provided": [
            "FOODON:00003013",
            "FOODON:03000242",
            "FOODON:00003546",
            "FOODON:00003798",
            "FOODON:00003744",
            "FOODON:03000126",
            "FOODON:03412632",
            "FOODON:00003547",
            "FOODON:00003548",
            "FOODON:00003550",
            "FOODON:00003485",
            "FOODON:00003520",
            "FOODON:03412628",
            "FOODON:03000249",
            "FOODON:00005363",
            "FOODON:00004856",
            "FOODON:03000128",
            "FOODON:00003545",
            "FOODON:03309928",
            "FOODON:00004853",
            "FOODON:03301526",
            "FOODON:00002109",
            "FOODON:03301105",
            "FOODON:03315873",
            "FOODON:00002117",
            "FOODON:03413458",
            "FOODON:03310070",
            "FOODON:00001935",
            "FOODON:03306722",
            "FOODON:03306728",
            "FOODON:00002191",
            "FOODON:00001649",
            "FOODON:03302033",
            "FOODON:03304289",
            "FOODON:00001955",
            "FOODON:03315875",
            "FOODON:03306738",
            "FOODON:03302554",
            "FOODON:03306727"
        ]
    },
    {
        "query": "MIXTURE",
        "chosen_curie": "FOODON:00004130",
        "true_curies": [
            "NCIT:C45305",
            "CHEBI:60004"
        ],
        "explanation": "While CHEBI:60004 offers a general definition of a mixture, FOODON:00004130 specifically addresses 'food mixture,' directly aligning with the user's entity.  Other FOODON IDs are too specific (e.g., spice mixtures, grain mixtures) or lack definitions. Therefore, FOODON:00004130 provides the best balance of specificity and relevance.",
        "candidates_provided": [
            "CHEBI:60004",
            "FOODON:00004130",
            "FOODON:03304292",
            "FOODON:03543078",
            "FOODON:03540004",
            "NCIT:C45305",
            "FOODON:00004091",
            "FOODON:03317674",
            "FOODON:00003849",
            "FOODON:03305543",
            "FOODON:03540223",
            "FOODON:03311370",
            "FOODON:03480032",
            "FOODON:03530053",
            "FOODON:03304469",
            "FOODON:03540208",
            "CHEBI:83162",
            "FOODON:03316701",
            "FOODON:03530062",
            "FOODON:03305616",
            "FOODON:03304867",
            "obo:chebi#is_conjugate_base_of",
            "FOODON:03315682",
            "FOODON:03530090",
            "FOODON:03308801",
            "RO:0002588",
            "FOODON:03311110",
            "FOODON:03304652",
            "FOODON:03311841",
            "FOODON:03315705",
            "FOODON:03303618",
            "FOODON:03303629",
            "FOODON:03307567",
            "FOODON:03315742",
            "FOODON:03302060",
            "FOODON:03305785"
        ]
    },
    {
        "query": "BROWN SUGAR",
        "chosen_curie": "FOODON:03542988",
        "true_curies": [
            "PATO:0000952",
            "FOODON:03420108",
            "FOODON:03420156"
        ],
        "explanation": "While FOODON:03542988, FOODON:03542990, FOODON:03542989, FOODON:03542991 all refer to types of brown sugar, FOODON:03542988 ('brown sugar (efsa foodex2)') is the most general and encompasses all the others.  It directly addresses the user's input \"BROWN SUGAR\" without specifying a source (cane, beet, palm).  Other options like FOODON:03304723 ('brown sugar syrup') are more specific and therefore less suitable as a general term. FOODON:03420156 provides a good definition but lacks the broad scope of FOODON:03542988",
        "candidates_provided": [
            "FOODON:00002749",
            "FOODON:03542988",
            "FOODON:03542990",
            "FOODON:03542989",
            "FOODON:03542991",
            "FOODON:03420156",
            "FOODON:00003444",
            "FOODON:00003463",
            "FOODON:03311801",
            "FOODON:00004633",
            "PATO:0001942",
            "PATO:0002411",
            "PATO:0001287",
            "FOODON:03544214",
            "PATO:0001245",
            "PATO:0001267",
            "PATO:0001246",
            "PATO:0001268",
            "FOODON:03316757",
            "FOODON:00004634",
            "FOODON:03304723",
            "FOODON:03305010",
            "FOODON:03304366",
            "FOODON:03304299",
            "FOODON:00001084",
            "FOODON:03302833",
            "FOODON:03316271",
            "FOODON:03304561",
            "FOODON:03307571",
            "FOODON:03307558",
            "FOODON:03317200",
            "FOODON:03310913",
            "FOODON:03307345",
            "FOODON:03301065",
            "FOODON:00005514",
            "FOODON:03307056",
            "FOODON:03301073",
            "FOODON:03304302",
            "FOODON:03303225",
            "FOODON:03304365"
        ]
    },
    {
        "query": "CLOVES",
        "chosen_curie": "FOODON:03301176",
        "true_curies": [
            "FOODON:00001745"
        ],
        "explanation": "While FOODON:03541323 is more specific about the botanical origin, FOODON:03301176, 'clove (dried)', is a more direct and common term for the spice cloves, aligning best with how a user would typically refer to cloves.",
        "candidates_provided": [
            "FOODON:03541322",
            "FOODON:03541323",
            "FOODON:00001745",
            "FOODON:00002876",
            "NCBITaxon:53873",
            "FOODON:03411538",
            "FOODON:03541830",
            "FOODON:03301176",
            "FOODON:03530129",
            "FOODON:03420276",
            "FOODON:03311168",
            "FOODON:03412647",
            "FOODON:03412334",
            "FOODON:03530138",
            "FOODON:03413652",
            "FOODON:03413705",
            "FOODON:03413884",
            "rdfs:label",
            "FOODON:03413647",
            "FOODON:03412319",
            "FOODON:03413908",
            "FOODON:03414602",
            "FOODON:03301349",
            "FOODON:03413636",
            "FOODON:03411321",
            "FOODON:03301404"
        ]
    },
    {
        "query": "LIQUID",
        "chosen_curie": "NCIT:C45298",
        "true_curies": [
            "FOODON:03412974",
            "NCIT:C45305",
            "CHEBI:60004"
        ],
        "explanation": "NCIT:C45298, 'Liquid', is the most appropriate term because it provides a general, scientifically accurate definition of a liquid as a state of matter.  Other options are too specific (e.g., types of liquids, liquids in specific contexts), while this term accurately reflects the user's broad entity description.",
        "candidates_provided": [
            "FOODON:00002745",
            "FOODON:03412974",
            "obo:ONS_1000033",
            "FOODON:00003202",
            "FOODON:00003280",
            "ENVO:01001476",
            "FOODON:00004314",
            "FOODON:00004315",
            "ENVO:01000815",
            "ENVO:00002006",
            "FOODON:00004313",
            "FOODON:03430102",
            "FOODON:03480023",
            "FOODON:00003943",
            "FOODON:03430109",
            "FOODON:00004089",
            "FOODON:03420300",
            "ENVO:01001477",
            "FOODON:03450016",
            "FOODON:03543029",
            "NCIT:C45298",
            "obo:UO_1010026",
            "FOODON:03317365",
            "FOODON:03530091",
            "FOODON:03306258",
            "obo:UO_0010026",
            "FOODON:03315789",
            "FOODON:03310661",
            "FOODON:03305644",
            "obo:UO_1000099",
            "FOODON:03315165",
            "FOODON:00004079",
            "obo:UO_1010030",
            "FOODON:03301258",
            "FOODON:00002339",
            "FOODON:03530089",
            "PATO:0001735",
            "FOODON:03315289",
            "FOODON:03310770"
        ]
    },
    {
        "query": "LIQUID",
        "chosen_curie": "NCIT:C45298",
        "true_curies": [
            "FOODON:03412974"
        ],
        "explanation": "NCIT:C45298, with the label \"Liquid\" and definition \"A substance in the fluid state of matter having no fixed shape but a fixed volume,\" is the most appropriate term.  It directly addresses the user's entity without specifying any particular type of liquid or context, unlike the other options, which all refer to specific liquid substances or processes involving liquids.",
        "candidates_provided": [
            "FOODON:00002745",
            "FOODON:03412974",
            "obo:ONS_1000033",
            "FOODON:00003202",
            "FOODON:00003280",
            "ENVO:01001476",
            "FOODON:00004314",
            "FOODON:00004315",
            "ENVO:01000815",
            "ENVO:00002006",
            "FOODON:00004313",
            "FOODON:03430102",
            "FOODON:03480023",
            "FOODON:00003943",
            "FOODON:03430109",
            "FOODON:00004089",
            "FOODON:03420300",
            "ENVO:01001477",
            "FOODON:03450016",
            "FOODON:03543029",
            "NCIT:C45298",
            "obo:UO_1010026",
            "FOODON:03317365",
            "FOODON:03530091",
            "FOODON:03306258",
            "obo:UO_0010026",
            "FOODON:03315789",
            "FOODON:03310661",
            "FOODON:03305644",
            "obo:UO_1000099",
            "FOODON:03315165",
            "FOODON:00004079",
            "obo:UO_1010030",
            "FOODON:03301258",
            "FOODON:00002339",
            "FOODON:03530089",
            "PATO:0001735",
            "FOODON:03315289",
            "FOODON:03310770"
        ]
    },
    {
        "query": "VANILLA",
        "chosen_curie": "FOODON:03541398",
        "true_curies": [
            "NCBITaxon:51238",
            "FOODON:03411355",
            "FOODON:00002328",
            "FOODON:03316764"
        ],
        "explanation": "While several terms mention \"vanilla\", FOODON:03541398 is the most encompassing and accurate.  It specifically refers to spices from vanilla plants, covering various species and parts used, aligning with the broad interpretation of \"VANILLA\" as a spice and flavoring. Other options specify processed forms (extract, powder), plant parts (bean, pod), or specific species, which are too narrow in scope.",
        "candidates_provided": [
            "FOODON:00002328",
            "NCBITaxon:51239",
            "FOODON:03316764",
            "FOODON:03302056",
            "FOODON:03411355",
            "NCBITaxon:117957",
            "FOODON:00002396",
            "FOODON:00003738",
            "FOODON:03316763",
            "FOODON:03415042",
            "FOODON:03316761",
            "FOODON:03305153",
            "FOODON:03541398",
            "FOODON:03541399",
            "FOODON:03541397",
            "FOODON:03544416",
            "FOODON:03541401",
            "FOODON:03544417",
            "FOODON:03544401",
            "NCBITaxon:51238",
            "FOODON:03307348",
            "FOODON:03305800",
            "FOODON:03304426",
            "FOODON:03305844",
            "FOODON:03301629",
            "FOODON:03303151",
            "FOODON:03307273",
            "NCBITaxon:669897",
            "FOODON:03309572",
            "FOODON:03302772",
            "FOODON:03305790",
            "FOODON:03310567",
            "FOODON:03305649",
            "FOODON:03310665",
            "FOODON:03305409",
            "FOODON:03316923",
            "FOODON:03310983",
            "FOODON:03302576",
            "FOODON:03304422",
            "FOODON:03311395"
        ]
    },
    {
        "query": "CORN",
        "chosen_curie": "FOODON:00001845",
        "true_curies": [
            "NCBITaxon:381124"
        ],
        "explanation": "While several terms refer to corn, FOODON:00001845, 'field corn food product', encompasses the broadest range of corn products and uses, aligning best with the general term 'CORN' provided by the user. More specific terms like sweet corn or specific cultivars would be inappropriate for a general query about 'corn'.",
        "candidates_provided": [
            "FOODON:00003782",
            "FOODON:00003783",
            "FOODON:00003562",
            "FOODON:00001845",
            "FOODON:00003785",
            "FOODON:00003781",
            "FOODON:00002845",
            "FOODON:03301422",
            "FOODON:00001572",
            "FOODON:00005021",
            "FOODON:00005024",
            "FOODON:00005030",
            "FOODON:00005027",
            "FOODON:00005447",
            "FOODON:03302904",
            "FOODON:03411379",
            "FOODON:00005498",
            "FOODON:00002722",
            "FOODON:00001849",
            "FOODON:00002514",
            "FOODON:03317387",
            "FOODON:03311001",
            "FOODON:03302733",
            "FOODON:03310986",
            "FOODON:03311288",
            "FOODON:03301604",
            "FOODON:03311721",
            "FOODON:03315799",
            "FOODON:03310640",
            "FOODON:03302731",
            "FOODON:00002330",
            "FOODON:03309833",
            "FOODON:03301388",
            "FOODON:03316588",
            "FOODON:03310807",
            "FOODON:03311145",
            "FOODON:03414942",
            "FOODON:03302665",
            "FOODON:03310559",
            "FOODON:03310945"
        ]
    },
    {
        "query": "ORANGE BELL PEPPER",
        "chosen_curie": "FOODON:00003550",
        "true_curies": [
            "FOODON:00003016",
            "PATO:0000953",
            "FOODON:03315106",
            "FOODON:00003013",
            "FOODON:03309928",
            "FOODON:00003520",
            "FOODON:00001649"
        ],
        "explanation": "FOODON:00003550 ('sweet orange bell pepper') is the best match because its label exactly matches the user's entity, 'ORANGE BELL PEPPER', and its definition explicitly describes an orange bell pepper. While other options mention bell peppers, none are as precise in specifying the color.",
        "candidates_provided": [
            "FOODON:00003550",
            "FOODON:00003546",
            "FOODON:00003013",
            "FOODON:00004850",
            "FOODON:00004847",
            "FOODON:00003016",
            "FOODON:00003547",
            "FOODON:00003548",
            "FOODON:00003485",
            "FOODON:00004852",
            "FOODON:00004849",
            "FOODON:00004851",
            "FOODON:00004848",
            "FOODON:03412628",
            "FOODON:03412631",
            "FOODON:03412630",
            "FOODON:00004846",
            "FOODON:03412629",
            "FOODON:03315874",
            "FOODON:00003012",
            "FOODON:00003549",
            "FOODON:00002071",
            "FOODON:03306028",
            "FOODON:00002117",
            "FOODON:00001935",
            "FOODON:00002191",
            "FOODON:03315873",
            "FOODON:03301526",
            "FOODON:03530289",
            "FOODON:03302385",
            "NCBITaxon:13217",
            "FOODON:03315130",
            "FOODON:03304574",
            "FOODON:00002109",
            "FOODON:03316385",
            "FOODON:03305760",
            "FOODON:03305883"
        ]
    },
    {
        "query": "RED PEPPER",
        "chosen_curie": "FOODON:00003546",
        "true_curies": [
            "NCBITaxon:8023",
            "PATO:0000322",
            "FOODON:00001956",
            "FOODON:00003013",
            "FOODON:03309928",
            "FOODON:00003520",
            "FOODON:00001649"
        ],
        "explanation": "While several terms refer to red bell peppers, FOODON:00003546 ('bell pepper') is the most appropriate because it's a general term encompassing various bell pepper colors, including red.  More specific terms like 'sweet red bell pepper' are too narrow, and terms referring to specific cultivars or preparations are less suitable for a general entity like 'RED PEPPER'.",
        "candidates_provided": [
            "FOODON:00003485",
            "FOODON:00004843",
            "FOODON:03412630",
            "FOODON:00004845",
            "FOODON:00003013",
            "FOODON:00004844",
            "FOODON:03000242",
            "FOODON:00003546",
            "FOODON:03412632",
            "FOODON:00003744",
            "FOODON:00003798",
            "FOODON:03412629",
            "FOODON:03315874",
            "FOODON:03000126",
            "FOODON:00004840",
            "FOODON:00004232",
            "FOODON:00003729",
            "FOODON:00003766",
            "FOODON:00004602",
            "FOODON:00003547",
            "FOODON:00002191",
            "FOODON:03304285",
            "FOODON:03315297",
            "FOODON:03311265",
            "FOODON:03306732",
            "FOODON:00001956",
            "FOODON:03306737",
            "FOODON:03310797",
            "FOODON:03306723",
            "FOODON:03308489",
            "FOODON:03301382",
            "FOODON:03301526",
            "FOODON:03315296",
            "FOODON:03302033",
            "FOODON:03411531",
            "FOODON:00001935",
            "FOODON:03412558",
            "FOODON:03315873"
        ]
    },
    {
        "query": "CABBAGE",
        "chosen_curie": "FOODON:00001677",
        "true_curies": [
            "FOODON:03301326",
            "NCBITaxon:3716",
            "FOODON:00003406"
        ],
        "explanation": "While several terms refer to cabbage, FOODON:00001677, 'cabbage head food product', is the most encompassing and suitable.  It explicitly covers both the head and leaf portions, accommodating various cabbage types and preparations.  Other options are too specific (e.g., limiting to raw or a particular cultivar) or refer to the plant rather than the food product itself.",
        "candidates_provided": [
            "FOODON:00003406",
            "FOODON:00003031",
            "FOODON:03000059",
            "FOODON:00003662",
            "FOODON:00005337",
            "FOODON:03412071",
            "FOODON:00002921",
            "FOODON:00005339",
            "FOODON:00003664",
            "FOODON:00003514",
            "FOODON:00005338",
            "FOODON:03000060",
            "FOODON:03301326",
            "FOODON:00001677",
            "FOODON:00002922",
            "FOODON:03411406",
            "FOODON:00001016",
            "FOODON:00003684",
            "FOODON:03310228",
            "FOODON:03304685",
            "FOODON:03311052",
            "FOODON:03309557",
            "FOODON:03317662",
            "FOODON:03302943",
            "FOODON:03304707",
            "FOODON:03411579",
            "FOODON:03311543",
            "FOODON:03412397",
            "FOODON:03412415",
            "FOODON:00003527",
            "FOODON:03317425",
            "FOODON:03315425",
            "FOODON:03309605",
            "FOODON:00001024"
        ]
    },
    {
        "query": "CARROTS",
        "chosen_curie": "FOODON:03540712",
        "true_curies": [
            "NCBITaxon:4039"
        ],
        "explanation": "FOODON:03540712 ('carrots (efsa foodex2)') provides the most comprehensive and accurate representation of the user entity 'CARROTS'. While other options mention carrots (e.g., FOODON:03401791, FOODON:03540711, and FOODON:03540713), this term explicitly identifies the species (*Daucus carota L. subsp. sativus*) and addresses the potential ambiguity regarding the part consumed, making it superior to broader or more specific options.",
        "candidates_provided": [
            "FOODON:03540711",
            "FOODON:03540712",
            "FOODON:03401791",
            "FOODON:03540713",
            "FOODON:03540714",
            "FOODON:00005490",
            "FOODON:00002515",
            "FOODON:03301378",
            "FOODON:00003233",
            "NCBITaxon:4039",
            "FOODON:03411227",
            "FOODON:00001687",
            "FOODON:00001639",
            "FOODON:03302216",
            "FOODON:03305519",
            "FOODON:03310846",
            "FOODON:03311100",
            "FOODON:03304759",
            "FOODON:03302214",
            "FOODON:00002490",
            "FOODON:03316751",
            "FOODON:03302212",
            "FOODON:03310944",
            "FOODON:03311353",
            "FOODON:03302213",
            "FOODON:03411613",
            "FOODON:03302215",
            "FOODON:03302217",
            "FOODON:03310189"
        ]
    },
    {
        "query": "FLOUR",
        "chosen_curie": "FOODON:00004512",
        "true_curies": [
            "FOODON:03301116"
        ],
        "explanation": "While FOODON:00004510 'flour' is a more general term, FOODON:00004512 '00 white wheat flour' is more specific and likely what a user would mean by simply stating 'FLOUR'.  The other specific flour types are all derived from non-wheat sources.",
        "candidates_provided": [
            "FOODON:03302142",
            "FOODON:03304488",
            "FOODON:03601071",
            "FOODON:00004512",
            "FOODON:00002553",
            "FOODON:03311459",
            "FOODON:00002207",
            "FOODON:00004506",
            "FOODON:00003355",
            "FOODON:00004721",
            "FOODON:00004104",
            "FOODON:00004510",
            "FOODON:00003605",
            "FOODON:00004507",
            "FOODON:00004511",
            "FOODON:03304487",
            "FOODON:00005500",
            "FOODON:00001056",
            "FOODON:00003353",
            "FOODON:00003317",
            "FOODON:00003342",
            "FOODON:03530140",
            "FOODON:03315176",
            "FOODON:03530143",
            "FOODON:00002140",
            "FOODON:03530138",
            "FOODON:03301120",
            "FOODON:03309292",
            "FOODON:03304022",
            "FOODON:03305224",
            "FOODON:03411634",
            "FOODON:03412030",
            "FOODON:03412421",
            "FOODON:03530142",
            "FOODON:03317665",
            "FOODON:03412043",
            "FOODON:03315289",
            "FOODON:03303387",
            "FOODON:03414361",
            "FOODON:03411446"
        ]
    },
    {
        "query": "SOY SAUCE",
        "chosen_curie": "FOODON:00001235",
        "true_curies": [
            "FOODON:03311146",
            "FOODON:03301115"
        ],
        "explanation": "While several terms mention soy sauce, FOODON:00001235 ('soy sauce food product') provides a precise definition of the product, including its production method. Other options are either too general (e.g., 'condiment sauce', 'savory sauce') or refer to related but distinct products (e.g., soy yogurt, soy margarine).",
        "candidates_provided": [
            "FOODON:03544111",
            "FOODON:03400263",
            "FOODON:00003193",
            "FOODON:00003259",
            "FOODON:03304206",
            "FOODON:03000281",
            "FOODON:03306786",
            "FOODON:00002526",
            "FOODON:03301115",
            "FOODON:00003232",
            "FOODON:03400863",
            "FOODON:00005513",
            "FOODON:03400862",
            "FOODON:03315495",
            "FOODON:00003912",
            "FOODON:03400858",
            "FOODON:03304888",
            "FOODON:03480034",
            "FOODON:00003236",
            "FOODON:03543827",
            "FOODON:03311463",
            "FOODON:03304988",
            "FOODON:03310255",
            "FOODON:03316286",
            "FOODON:03311704",
            "FOODON:03304111",
            "FOODON:00002262",
            "FOODON:03311464",
            "FOODON:00001235",
            "FOODON:03312058",
            "FOODON:03310470",
            "FOODON:03316041",
            "FOODON:03316040",
            "FOODON:03315016",
            "FOODON:03315781",
            "FOODON:03316513",
            "FOODON:03302791",
            "FOODON:03309559"
        ]
    },
    {
        "query": "SAUSAGE",
        "chosen_curie": "FOODON:00001222",
        "true_curies": [
            "FOODON:03315904"
        ],
        "explanation": "While several terms relate to sausage, FOODON:00001222 ('sausage (raw)') provides the broadest coverage without specifying a particular meat type or preparation method.  Terms like 'pork sausage' or 'beef sausage' are too specific, while others add unnecessary details like smoking or cooking methods.  FOODON:00001222 accurately reflects the general concept of 'sausage' as requested by the user.",
        "candidates_provided": [
            "FOODON:00002729",
            "FOODON:00002958",
            "FOODON:03315904",
            "FOODON:00003297",
            "FOODON:00005533",
            "FOODON:00001221",
            "FOODON:00001222",
            "FOODON:00001220",
            "FOODON:00002947",
            "FOODON:00001223",
            "FOODON:00001219",
            "FOODON:00001605",
            "FOODON:00001224",
            "FOODON:00001007",
            "FOODON:00002728",
            "FOODON:03543950",
            "FOODON:00005560",
            "FOODON:00005561",
            "FOODON:03542148",
            "FOODON:03303119",
            "FOODON:03304022",
            "FOODON:03316286",
            "FOODON:03312058",
            "FOODON:03315708",
            "FOODON:03315016",
            "FOODON:00001761",
            "FOODON:03301113",
            "FOODON:03316040",
            "FOODON:03301189",
            "FOODON:03316041",
            "FOODON:03306594",
            "FOODON:03309292",
            "FOODON:03315781",
            "FOODON:03530140",
            "FOODON:03304006",
            "FOODON:03302062",
            "FOODON:03309619",
            "FOODON:00001931",
            "FOODON:03309559",
            "FOODON:03317091"
        ]
    },
    {
        "query": "SAUSAGE",
        "chosen_curie": "FOODON:00001222",
        "true_curies": [
            "NCIT:C45305",
            "FOODON:03315904",
            "CHEBI:60004"
        ],
        "explanation": "While several terms mention 'sausage', FOODON:00001222 ('sausage (raw)') is the most appropriate general term.  Other options specify a meat type (pork, beef, turkey) or a preparation method (smoked, cooked), which are not specified in the user's entity.  FOODON:00001222 covers the broadest range of sausages without making unnecessary assumptions.",
        "candidates_provided": [
            "FOODON:00002729",
            "FOODON:00002958",
            "FOODON:03315904",
            "FOODON:00003297",
            "FOODON:00005533",
            "FOODON:00001221",
            "FOODON:00001222",
            "FOODON:00001220",
            "FOODON:00002947",
            "FOODON:00001223",
            "FOODON:00001219",
            "FOODON:00001605",
            "FOODON:00001224",
            "FOODON:00001007",
            "FOODON:00002728",
            "FOODON:03543950",
            "FOODON:00005560",
            "FOODON:00005561",
            "FOODON:03542148",
            "FOODON:03303119",
            "FOODON:03304022",
            "FOODON:03316286",
            "FOODON:03312058",
            "FOODON:03315708",
            "FOODON:03315016",
            "FOODON:00001761",
            "FOODON:03301113",
            "FOODON:03316040",
            "FOODON:03301189",
            "FOODON:03316041",
            "FOODON:03306594",
            "FOODON:03309292",
            "FOODON:03315781",
            "FOODON:03530140",
            "FOODON:03304006",
            "FOODON:03302062",
            "FOODON:03309619",
            "FOODON:00001931",
            "FOODON:03309559",
            "FOODON:03317091"
        ]
    },
    {
        "query": "SAUERKRAUT",
        "chosen_curie": "FOODON:03540942",
        "true_curies": [
            "FOODON:03301397"
        ],
        "explanation": "FOODON:03540942 is the best match because its label is 'sauerkraut (efsa foodex2)', which is an exact match for the user's entity.  It also provides a definition that encompasses various types of sauerkraut, making it more comprehensive than the other simpler 'sauerkraut' entries.  Other options refer to specific preparations (e.g., canned, in wine) or are obsolete or unrelated.",
        "candidates_provided": [
            "FOODON:03540942",
            "FOODON:03301397",
            "FOODON:03311252",
            "FOODON:03304683",
            "FOODON:03302832",
            "FOODON:03304661",
            "FOODON:03400827",
            "FOODON:03304681",
            "FOODON:03317415",
            "FOODON:03317457",
            "FOODON:03413506",
            "FOODON:03411165",
            "FOODON:03412768",
            "FOODON:03412484",
            "FOODON:03310261",
            "FOODON:03414979",
            "HANCESTRO:0364",
            "HANCESTRO:0563",
            "FOODON:03420310",
            "FOODON:03412387",
            "FOODON:03307706"
        ]
    },
    {
        "query": "PARSLEY",
        "chosen_curie": "FOODON:03000230",
        "true_curies": [
            "FOODON:00002942",
            "NCBITaxon:4043"
        ],
        "explanation": "While several terms relate to parsley, FOODON:03000230 is the most general and inclusive term, encompassing both whole and processed parsley.  Other options specify leaf type, processing method (dried, freeze-dried), or specific parts (roots, bunches), which are more restrictive than the user's input, 'PARSLEY'.",
        "candidates_provided": [
            "FOODON:03000230",
            "FOODON:03000231",
            "FOODON:00003644",
            "FOODON:00002942",
            "FOODON:03000024",
            "FOODON:03000041",
            "FOODON:03540852",
            "FOODON:03540853",
            "FOODON:03540726",
            "FOODON:03540727",
            "FOODON:03540854",
            "FOODON:03401579",
            "FOODON:03544339",
            "FOODON:03401582",
            "FOODON:03401804",
            "NCBITaxon:4043",
            "FOODON:03309943",
            "FOODON:03543685",
            "FOODON:03305730",
            "FOODON:00002084",
            "FOODON:03411550",
            "FOODON:03301205",
            "FOODON:03412734",
            "FOODON:00002085",
            "FOODON:03413707",
            "FOODON:03413706",
            "NCBITaxon:732957",
            "NCBITaxon:120289",
            "FOODON:03411447",
            "NCBITaxon:3883"
        ]
    },
    {
        "query": "SAUERKRAUT",
        "chosen_curie": "FOODON:03540942",
        "true_curies": [
            "NCIT:C45305",
            "CHEBI:60004",
            "FOODON:03301397"
        ],
        "explanation": "FOODON:03540942 is the best match because its label is 'sauerkraut (efsa foodex2)' which is a direct match to the user's input.  It also has a definition which clarifies that it includes all types of sauerkraut, making it more comprehensive than other more specific options like 'sauerkraut (canned)'.",
        "candidates_provided": [
            "FOODON:03540942",
            "FOODON:03301397",
            "FOODON:03311252",
            "FOODON:03304683",
            "FOODON:03302832",
            "FOODON:03304661",
            "FOODON:03400827",
            "FOODON:03304681",
            "FOODON:03317415",
            "FOODON:03317457",
            "FOODON:03413506",
            "FOODON:03411165",
            "FOODON:03412768",
            "FOODON:03412484",
            "FOODON:03310261",
            "FOODON:03414979",
            "HANCESTRO:0364",
            "HANCESTRO:0563",
            "FOODON:03420310",
            "FOODON:03412387",
            "FOODON:03307706"
        ]
    },
    {
        "query": "BANANA",
        "chosen_curie": "FOODON:00004184",
        "true_curies": [
            "FOODON:03311513",
            "FOODON:03316257",
            "NCBITaxon:4071",
            "NCBITaxon:4641"
        ],
        "explanation": "While FOODON:00004184 ('banana (raw)') and FOODON:00004183 ('banana') are both strong candidates due to their labels and definitions matching the user entity, FOODON:00004184 is preferred because it is more specific.  The user entity 'BANANA' doesn't specify ripeness, but FOODON:00004184 provides more precise information in case the user implicitly intended raw bananas.",
        "candidates_provided": [
            "FOODON:03316257",
            "FOODON:03000126",
            "FOODON:00003771",
            "FOODON:00004183",
            "FOODON:00004184",
            "FOODON:03303705",
            "FOODON:00003608",
            "FOODON:00005197",
            "FOODON:00004796",
            "FOODON:00004798",
            "FOODON:03000127",
            "FOODON:00004797",
            "FOODON:00004801",
            "FOODON:00004799",
            "FOODON:03311513",
            "FOODON:00004180",
            "FOODON:00001628",
            "FOODON:03413722",
            "FOODON:00002793",
            "FOODON:03411568",
            "FOODON:00001629",
            "FOODON:00002159",
            "FOODON:00002794",
            "FOODON:03305869",
            "FOODON:03301964",
            "FOODON:03414270",
            "obo:FLOPO_0016496",
            "FOODON:03304221",
            "FOODON:03315615",
            "FOODON:03303591",
            "FOODON:03315614",
            "FOODON:00001640",
            "FOODON:03307587",
            "FOODON:00002481",
            "FOODON:03316531",
            "FOODON:03317424",
            "FOODON:03420138"
        ]
    },
    {
        "query": "DRESSING",
        "chosen_curie": "FOODON:03400276",
        "true_curies": [
            "FOODON:03315498"
        ],
        "explanation": "While several terms mention 'dressing,' FOODON:03400276, 'dressing for food (us cfr)', provides the most comprehensive definition encompassing both standardized and non-standardized varieties, reflecting the broad usage of the term 'dressing.'  Other options are too specific (e.g., types of salad dressing) or lack definitions, making them unsuitable as a general 'dressing' term.",
        "candidates_provided": [
            "FOODON:03400292",
            "FOODON:03400136",
            "FOODON:00002036",
            "FOODON:00001601",
            "FOODON:00001802",
            "FOODON:00001790",
            "FOODON:00001780",
            "FOODON:00001231",
            "FOODON:03544145",
            "FOODON:00001232",
            "FOODON:03301903",
            "FOODON:03544146",
            "FOODON:00003876",
            "FOODON:03315498",
            "FOODON:03307700",
            "FOODON:03304714",
            "FOODON:03304634",
            "FOODON:03305209",
            "FOODON:03315694",
            "FOODON:03304712",
            "FOODON:03306670",
            "FOODON:03310485",
            "FOODON:03490113",
            "FOODON:03307701",
            "FOODON:03490157",
            "FOODON:00002144",
            "FOODON:03411745",
            "FOODON:03530138",
            "FOODON:00002146",
            "obo:COB_0000502",
            "FOODON:03400276",
            "FOODON:03316246",
            "FOODON:00001603"
        ]
    },
    {
        "query": "DILL",
        "chosen_curie": "FOODON:00004307",
        "true_curies": [
            "NCBITaxon:40922",
            "FOODON:00001811"
        ],
        "explanation": "While several terms relate to dill, FOODON:00004307 ('dill spice') best encompasses the general use of dill as a culinary ingredient, encompassing both leaves and seeds.  Other options are too specific (e.g., only seeds, only leaves, or a specific product) or obsolete.",
        "candidates_provided": [
            "FOODON:00003794",
            "FOODON:00004307",
            "FOODON:00001811",
            "FOODON:03401580",
            "FOODON:03310090",
            "FOODON:03304832",
            "FOODON:03541305",
            "FOODON:03541306",
            "FOODON:03540839",
            "FOODON:03306757",
            "FOODON:00002516",
            "FOODON:03411277",
            "FOODON:03306941",
            "FOODON:00004076",
            "FOODON:03306751",
            "FOODON:03309051",
            "FOODON:03601029",
            "NCBITaxon:40922",
            "FOODON:03400860",
            "FOODON:03412411",
            "FOODON:03414009",
            "FOODON:03301404",
            "FOODON:03414615",
            "FOODON:03413821",
            "FOODON:03411511",
            "FOODON:03412292",
            "FOODON:03411860",
            "FOODON:03411440",
            "FOODON:03414851",
            "FOODON:03413908",
            "FOODON:03413993"
        ]
    },
    {
        "query": "SPAGHETTI",
        "chosen_curie": "FOODON:03304237",
        "true_curies": [
            "FOODON:03301005"
        ],
        "explanation": "While several options mention \"spaghetti\",  FOODON:03304237 (\"spaghetti and meatballs\") is the most specific and accurate representation of the dish named \"spaghetti\" in culinary context. Other options are either too generic (like plain \"pasta\" or \"spaghetti\") or refer to variants or related dishes.  The user's entity 'SPAGHETTI' is inherently ambiguous without further context; however, \"spaghetti and meatballs\" represents a common and likely intended interpretation.",
        "candidates_provided": [
            "FOODON:03301005",
            "FOODON:03000078",
            "FOODON:03000077",
            "FOODON:03412508",
            "FOODON:03540771",
            "FOODON:03316808",
            "FOODON:03304192",
            "FOODON:03316826",
            "FOODON:03305711",
            "FOODON:03304237",
            "FOODON:03303886",
            "FOODON:03305712",
            "FOODON:03316817",
            "FOODON:03317305",
            "FOODON:03316823",
            "FOODON:03309560",
            "FOODON:03316833",
            "FOODON:03316811",
            "FOODON:03304262",
            "FOODON:03304014",
            "FOODON:03317419",
            "FOODON:03306347",
            "FOODON:03306288",
            "FOODON:03303438",
            "FOODON:03306311",
            "FOODON:03306338",
            "FOODON:03304267",
            "FOODON:03306339",
            "FOODON:03310772",
            "FOODON:03306312",
            "FOODON:03303883"
        ]
    },
    {
        "query": "NUTS",
        "chosen_curie": "FOODON:03303171",
        "true_curies": [
            "FOODON:03306632"
        ],
        "explanation": "While several options mention nuts, FOODON:03303171, 'nut', is the most general and broadly applicable term encompassing all types of nuts.  Other options specify processing methods (roasted, salted, etc.) or specific nut types, making them less suitable as a general representation of the entity 'NUTS'.",
        "candidates_provided": [
            "FOODON:03400652",
            "FOODON:03541130",
            "FOODON:03541128",
            "FOODON:03541124",
            "FOODON:03541140",
            "FOODON:03541118",
            "FOODON:03541125",
            "FOODON:03541131",
            "FOODON:03541170",
            "FOODON:03541127",
            "FOODON:03541126",
            "FOODON:03541151",
            "FOODON:03541129",
            "FOODON:03541020",
            "FOODON:03541246",
            "FOODON:03541248",
            "FOODON:03541410",
            "FOODON:03541117",
            "FOODON:03541176",
            "FOODON:03541249",
            "FOODON:03306520",
            "FOODON:00003564",
            "FOODON:03301367",
            "FOODON:03316049",
            "FOODON:03305829",
            "FOODON:03310810",
            "FOODON:03310671",
            "FOODON:03307106",
            "FOODON:00003175",
            "FOODON:03306632",
            "FOODON:03303171",
            "FOODON:03316972",
            "FOODON:03306519",
            "FOODON:00001722",
            "FOODON:00003862",
            "FOODON:03317548",
            "FOODON:03315966",
            "FOODON:00001663",
            "FOODON:00001587",
            "FOODON:00001688"
        ]
    },
    {
        "query": "CHOPPED",
        "chosen_curie": "FOODON:00002777",
        "true_curies": [
            "FOODON:03430125",
            "NCBITaxon:4679",
            "FOODON:03301704"
        ],
        "explanation": "FOODON:00002777 ('food (chopped)') is the most appropriate term because it is the most general and encompasses all the other more specific examples.  While terms like 'meat (chopped)' or 'garlic (chopped)' are correct for specific instances of chopped food, 'food (chopped)' accurately reflects the broad, generic nature of the user's entity, 'CHOPPED'.",
        "candidates_provided": [
            "FOODON:00004279",
            "FOODON:00002777",
            "FOODON:00004119",
            "FOODON:03301881",
            "FOODON:03430125",
            "FOODON:03317335",
            "FOODON:03316399",
            "FOODON:03301880",
            "FOODON:03316397",
            "FOODON:03306437",
            "FOODON:03307082",
            "FOODON:03311056",
            "FOODON:00005592",
            "FOODON:00004696",
            "FOODON:03307353",
            "FOODON:03311272",
            "FOODON:03306490",
            "FOODON:03305812",
            "FOODON:03311688",
            "FOODON:03311083",
            "FOODON:03430145",
            "FOODON:03430137",
            "FOODON:03430115",
            "FOODON:03430124",
            "FOODON:03430111",
            "FOODON:03430141",
            "FOODON:03430107",
            "FOODON:03530106",
            "FOODON:03530040",
            "FOODON:03530104",
            "FOODON:03530105",
            "FOODON:03530252",
            "FOODON:03530047",
            "FOODON:03530048",
            "FOODON:03430122",
            "FOODON:03304169",
            "FOODON:03430136",
            "FOODON:03530139",
            "FOODON:03413958"
        ]
    },
    {
        "query": "NUTMEG",
        "chosen_curie": "FOODON:03301367",
        "true_curies": [
            "FOODON:03301528",
            "NCBITaxon:51089"
        ],
        "explanation": "While several options refer to nutmeg, FOODON:03301367, 'nutmeg seed', is the most precise and direct representation of the user's entity.  Other options are either more general (e.g., nutmeg food product) or refer to derivatives or related concepts (e.g., nutmeg butter, nutmeg plant).",
        "candidates_provided": [
            "FOODON:00002061",
            "FOODON:00003223",
            "FOODON:03414694",
            "FOODON:03301528",
            "FOODON:03541313",
            "FOODON:03541314",
            "FOODON:03544331",
            "NCBITaxon:51089",
            "FOODON:03316426",
            "FOODON:03301187",
            "FOODON:03411214",
            "FOODON:00002014",
            "NCBITaxon:22274",
            "FOODON:03541337",
            "FOODON:00002876",
            "FOODON:03542189",
            "FOODON:03541295",
            "FOODON:03542185",
            "NCBITaxon:3658",
            "FOODON:03414562",
            "FOODON:03306520",
            "FOODON:03316049",
            "FOODON:03412094",
            "FOODON:03306519",
            "FOODON:03412710",
            "FOODON:00003175",
            "FOODON:03310810",
            "FOODON:00003564",
            "FOODON:03413165",
            "FOODON:03301367",
            "FOODON:03303171",
            "FOODON:03412276",
            "FOODON:03315966",
            "FOODON:03310671"
        ]
    },
    {
        "query": "WHITE PEPPER",
        "chosen_curie": "FOODON:03412255",
        "true_curies": [
            "FOODON:03304045",
            "HANCESTRO:0005",
            "PATO:0000323",
            "FOODON:00003013",
            "FOODON:03309928",
            "FOODON:00003520",
            "FOODON:00001649"
        ],
        "explanation": "While several terms mention \"white pepper\", FOODON:03412255, \"black or white pepper plant\", provides the most accurate and comprehensive definition encompassing both black and white pepper, distinguishing them based on their processing (unripe vs. ripe fruit). Other options are too specific (e.g., ground white pepper) or too general (e.g., pepper).",
        "candidates_provided": [
            "FOODON:00003762",
            "FOODON:00003013",
            "FOODON:03412255",
            "FOODON:03304045",
            "FOODON:03000242",
            "FOODON:00003546",
            "FOODON:00003798",
            "FOODON:00003744",
            "FOODON:03000126",
            "FOODON:00001649",
            "FOODON:03541388",
            "FOODON:00003873",
            "FOODON:03412632",
            "FOODON:00003783",
            "FOODON:00003547",
            "FOODON:00003548",
            "FOODON:00003550",
            "FOODON:00003485",
            "FOODON:00003520",
            "FOODON:03412628",
            "FOODON:03411141",
            "FOODON:00002361",
            "FOODON:03301526",
            "FOODON:03310070",
            "FOODON:03306734",
            "FOODON:00001935",
            "FOODON:03302033",
            "FOODON:03413458",
            "FOODON:03302554",
            "FOODON:00002109",
            "FOODON:03309928",
            "FOODON:03306732",
            "FOODON:03315873",
            "FOODON:00002191",
            "FOODON:03411643",
            "FOODON:00002117",
            "FOODON:03304289"
        ]
    },
    {
        "query": "BAKED",
        "chosen_curie": "FOODON:03311631",
        "true_curies": [
            "FOODON:00002456",
            "FOODON:03411457",
            "NCBITaxon:9031"
        ],
        "explanation": "While several options mention 'baked',  FOODON:03311631, 'baked good', is the most general and encompassing term.  Other options specify particular baked items (e.g., baked potato, apple pie), while 'baked good' covers a broader range of baked food products, making it the best fit for the simple input 'BAKED'.",
        "candidates_provided": [
            "FOODON:00002456",
            "FOODON:03302196",
            "FOODON:03301946",
            "FOODON:00002411",
            "FOODON:03310635",
            "FOODON:03304432",
            "FOODON:03540960",
            "FOODON:03542946",
            "FOODON:03301924",
            "FOODON:03311631",
            "FOODON:03312030",
            "FOODON:03301359",
            "FOODON:03311876",
            "FOODON:03309854",
            "FOODON:03317288",
            "FOODON:03311588",
            "FOODON:03311559",
            "FOODON:03400210",
            "FOODON:03317521",
            "FOODON:00003269",
            "FOODON:03315932",
            "FOODON:03460391",
            "FOODON:00001213",
            "FOODON:03450005",
            "FOODON:03440014",
            "FOODON:03460188",
            "FOODON:00004464",
            "FOODON:03440022",
            "FOODON:03303672",
            "FOODON:03450046",
            "FOODON:03302359",
            "FOODON:03440018",
            "FOODON:03450010",
            "FOODON:03302358",
            "FOODON:03316032",
            "FOODON:00002384",
            "FOODON:03316518"
        ]
    },
    {
        "query": "CRAB",
        "chosen_curie": "FOODON:02021446",
        "true_curies": [
            "FOODON:03411335"
        ],
        "explanation": "While several options refer to parts of a crab or crab meat, FOODON:02021446, 'crab', is the most encompassing and directly matches the user's entity.  It represents a whole crab, unlike terms specifying pieces of meat or carcasses.",
        "candidates_provided": [
            "FOODON:02021450",
            "FOODON:02021447",
            "FOODON:02021785",
            "FOODON:02021448",
            "FOODON:02021446",
            "FOODON:02021451",
            "FOODON:00002677",
            "FOODON:02021449",
            "FOODON:02021865",
            "FOODON:02021863",
            "FOODON:02021445",
            "FOODON:02021862",
            "FOODON:03301081",
            "FOODON:02021866",
            "FOODON:02021861",
            "FOODON:03412228",
            "FOODON:02021444",
            "FOODON:03412220",
            "FOODON:02021864",
            "FOODON:00002885",
            "FOODON:03411335",
            "FOODON:03412217",
            "FOODON:03413615",
            "FOODON:03411961",
            "FOODON:03317237",
            "FOODON:03412128",
            "FOODON:03413555",
            "FOODON:03411180",
            "FOODON:03311030",
            "FOODON:03412350",
            "FOODON:03412216",
            "FOODON:03413474",
            "FOODON:00002247",
            "FOODON:03308599",
            "FOODON:03303182",
            "FOODON:03413561",
            "FOODON:00001789",
            "FOODON:00001785",
            "FOODON:03311028"
        ]
    },
    {
        "query": "RICE",
        "chosen_curie": "FOODON:00004327",
        "true_curies": [
            "FOODON:03301641",
            "FOODON:03301705",
            "NCBITaxon:4530"
        ],
        "explanation": "While several terms relate to rice, FOODON:00004327 ('rice') is the most general and appropriate term for the user entity 'RICE'.  More specific terms (e.g., short grain rice, cooked rice) are subsets of this broader category.  The term 'rice' accurately reflects the user's input without unnecessary detail.",
        "candidates_provided": [
            "FOODON:03301641",
            "FOODON:03311875",
            "FOODON:00002881",
            "FOODON:03411322",
            "FOODON:00002849",
            "FOODON:00004676",
            "FOODON:00003438",
            "FOODON:00002867",
            "FOODON:00004720",
            "FOODON:00004327",
            "FOODON:03600010",
            "FOODON:00003786",
            "FOODON:00001332",
            "FOODON:00004330",
            "FOODON:00002207",
            "FOODON:00005555",
            "FOODON:03601051",
            "FOODON:03309871",
            "FOODON:00002575",
            "FOODON:00003056",
            "FOODON:00004320",
            "FOODON:03306909",
            "FOODON:03302745",
            "FOODON:03310371",
            "FOODON:03307152",
            "FOODON:03311295",
            "FOODON:03305184",
            "FOODON:03310654",
            "FOODON:03304556",
            "FOODON:03312030",
            "FOODON:00004326",
            "FOODON:03304555",
            "FOODON:03307146",
            "FOODON:00001185",
            "FOODON:03307150",
            "FOODON:03304585",
            "FOODON:03304549",
            "FOODON:03310254",
            "FOODON:03311392",
            "FOODON:03304560"
        ]
    },
    {
        "query": "CAULIFLOWER",
        "chosen_curie": "FOODON:00001703",
        "true_curies": [
            "NCBITaxon:3715",
            "FOODON:03302732",
            "FOODON:00003410"
        ],
        "explanation": "While several options mention 'cauliflower', FOODON:00001703, 'cauliflower food product', is the most encompassing and appropriate term.  It covers all forms of cauliflower used as food, unlike the more specific terms that focus on florets, leaves, or specific preparations.  The other 'cauliflower' terms are more specific instances of cauliflower food products. Therefore, this is the superior choice for a general term 'cauliflower'.",
        "candidates_provided": [
            "FOODON:00003410",
            "FOODON:03000057",
            "FOODON:00001703",
            "FOODON:00003767",
            "FOODON:00003634",
            "FOODON:03000058",
            "FOODON:03310181",
            "FOODON:03302732",
            "FOODON:03414184",
            "FOODON:03316393",
            "FOODON:03411094",
            "FOODON:03311755",
            "FOODON:03305392",
            "FOODON:03412600",
            "FOODON:03303377",
            "FOODON:03303344",
            "FOODON:03414554",
            "FOODON:03301394",
            "FOODON:03316744",
            "FOODON:03310105",
            "FOODON:03411579",
            "FOODON:00001702",
            "FOODON:03311166",
            "NCBITaxon:3822",
            "FOODON:03412011"
        ]
    },
    {
        "query": "SALMON",
        "chosen_curie": "FOODON:02022071",
        "true_curies": [
            "FOODON:00003473"
        ],
        "explanation": "While several terms refer to salmon,  FOODON:02022071, 'atlantic salmon carcass (raw)', provides the most specific information.  'Salmon' is too general, and although terms such as 'atlantic salmon fillet' are more specific regarding the cut, the user input lacks this detail.  Considering raw or prepared state can be important in food science, this term is superior when considering the lack of such specifications by the user.",
        "candidates_provided": [
            "FOODON:02021854",
            "FOODON:02022075",
            "FOODON:02021852",
            "FOODON:02022073",
            "FOODON:02022070",
            "FOODON:02021849",
            "FOODON:02022071",
            "FOODON:02021850",
            "FOODON:00002883",
            "FOODON:02022067",
            "FOODON:02021848",
            "FOODON:02022069",
            "FOODON:02022072",
            "FOODON:02021851",
            "FOODON:02021847",
            "FOODON:02022068",
            "FOODON:03307996",
            "FOODON:02021856",
            "FOODON:02022077",
            "FOODON:02021855",
            "FOODON:00003473",
            "NCBITaxon:8028",
            "FOODON:00002220",
            "FOODON:03411258",
            "FOODON:00004178",
            "FOODON:03411126",
            "FOODON:03411592",
            "FOODON:03309273",
            "FOODON:00001249",
            "FOODON:03309296",
            "FOODON:03315936",
            "FOODON:03411128",
            "FOODON:03309109",
            "FOODON:03308212",
            "FOODON:03411115",
            "FOODON:03411117",
            "FOODON:03411132",
            "FOODON:03308559",
            "FOODON:00002075",
            "FOODON:03309631"
        ]
    },
    {
        "query": "HORSERADISH",
        "chosen_curie": "FOODON:00003698",
        "true_curies": [
            "FOODON:03305494",
            "NCBITaxon:3704",
            "FOODON:03316284"
        ],
        "explanation": "While several terms refer to horseradish, FOODON:00003698, 'horseradish root', is the most precise and fundamental term.  It directly refers to the plant part, unlike terms describing prepared forms or other derivatives. Other options are more specific to processed forms of horseradish or even other related concepts (e.g., plant, sauce), making 'horseradish root' the most appropriate general term for the entity 'HORSERADISH'.",
        "candidates_provided": [
            "FOODON:03305494",
            "FOODON:00003698",
            "FOODON:03544124",
            "FOODON:03541364",
            "FOODON:03401797",
            "FOODON:03540718",
            "FOODON:03544291",
            "FOODON:03316284",
            "FOODON:03541365",
            "NCBITaxon:3704",
            "FOODON:03411748",
            "FOODON:03315591",
            "FOODON:03411146",
            "FOODON:03304600",
            "FOODON:03316172",
            "FOODON:03301199",
            "FOODON:03305493",
            "FOODON:03304601",
            "FOODON:03317247",
            "FOODON:03317248",
            "FOODON:00001117",
            "FOODON:00001953",
            "FOODON:03309934",
            "FOODON:02021548",
            "NCBITaxon:9789",
            "FOODON:03411229",
            "ENVO:00003859",
            "FOODON:03317249",
            "FOODON:00001954",
            "FOODON:02021552",
            "FOODON:03510025",
            "FOODON:02021554",
            "FOODON:02021550",
            "FOODON:00001111"
        ]
    },
    {
        "query": "PEPPERS",
        "chosen_curie": "FOODON:03540649",
        "true_curies": [
            "NCBITaxon:4071"
        ],
        "explanation": "While several options mention peppers, FOODON:03540649 encompasses both sweet and chili peppers, making it the most inclusive and thus the best fit for the broad term 'PEPPERS'.  Other options are too specific (e.g., only sweet peppers or only chili peppers), or refer to processed forms of peppers.",
        "candidates_provided": [
            "FOODON:03540649",
            "FOODON:03401754",
            "FOODON:03540650",
            "FOODON:03401752",
            "FOODON:03541405",
            "FOODON:03540651",
            "NCBITaxon:4071",
            "FOODON:03401753",
            "FOODON:03401757",
            "FOODON:00002111",
            "FOODON:03401382",
            "FOODON:00003013",
            "FOODON:00002484",
            "FOODON:00002995",
            "FOODON:03302078",
            "FOODON:00003931",
            "FOODON:00003883",
            "FOODON:03412628",
            "FOODON:03401756",
            "FOODON:03304355",
            "FOODON:03301526",
            "FOODON:00002109",
            "FOODON:03301105",
            "FOODON:00002117",
            "FOODON:03315873",
            "FOODON:03310070",
            "FOODON:00001935",
            "FOODON:03306728",
            "FOODON:00002191",
            "FOODON:03413458",
            "FOODON:00001649",
            "FOODON:03304289",
            "FOODON:00001955",
            "FOODON:03301768",
            "FOODON:03306738",
            "FOODON:03309928",
            "FOODON:03306722",
            "FOODON:03306739",
            "FOODON:00002361",
            "FOODON:00001650"
        ]
    },
    {
        "query": "SOY SAUCE",
        "chosen_curie": "FOODON:00001235",
        "true_curies": [
            "FOODON:03311146",
            "NCIT:C45305",
            "CHEBI:60004",
            "FOODON:03301115"
        ],
        "explanation": "While several terms mention soy sauce, FOODON:00001235 ('soy sauce food product') provides the most precise definition, specifying the production method involving fermentation of soybeans with Aspergillus molds and other ingredients.  Other options are too broad (e.g., condiment) or refer to soy-containing products that are not soy sauce itself (e.g., soy yogurt, soy margarine).",
        "candidates_provided": [
            "FOODON:03544111",
            "FOODON:03400263",
            "FOODON:00003193",
            "FOODON:00003259",
            "FOODON:03304206",
            "FOODON:03000281",
            "FOODON:03306786",
            "FOODON:00002526",
            "FOODON:03301115",
            "FOODON:00003232",
            "FOODON:03400863",
            "FOODON:00005513",
            "FOODON:03400862",
            "FOODON:03315495",
            "FOODON:00003912",
            "FOODON:03400858",
            "FOODON:03304888",
            "FOODON:03480034",
            "FOODON:00003236",
            "FOODON:03543827",
            "FOODON:03311463",
            "FOODON:03304988",
            "FOODON:03310255",
            "FOODON:03316286",
            "FOODON:03311704",
            "FOODON:03304111",
            "FOODON:00002262",
            "FOODON:03311464",
            "FOODON:00001235",
            "FOODON:03312058",
            "FOODON:03310470",
            "FOODON:03316041",
            "FOODON:03316040",
            "FOODON:03315016",
            "FOODON:03315781",
            "FOODON:03316513",
            "FOODON:03302791",
            "FOODON:03309559"
        ]
    },
    {
        "query": "RED BELL PEPPER",
        "chosen_curie": "FOODON:00003485",
        "true_curies": [
            "NCBITaxon:8023",
            "PATO:0000322",
            "FOODON:03315874",
            "FOODON:00003013",
            "FOODON:03309928",
            "FOODON:00003520",
            "FOODON:00001649"
        ],
        "explanation": "FOODON:00003485 ('sweet red bell pepper') is the best match because it precisely describes the user's entity, 'RED BELL PEPPER', specifying both the color and the sweetness, which is characteristic of bell peppers.  While other options mention 'red bell pepper', this one is the most specific and accurate.",
        "candidates_provided": [
            "FOODON:00003485",
            "FOODON:03412630",
            "FOODON:00003546",
            "FOODON:00003013",
            "FOODON:03412629",
            "FOODON:00004843",
            "FOODON:00004850",
            "FOODON:00004847",
            "FOODON:00003547",
            "FOODON:00003548",
            "FOODON:00003550",
            "FOODON:03315874",
            "FOODON:00004852",
            "FOODON:00004849",
            "FOODON:00004851",
            "FOODON:00004848",
            "FOODON:03412628",
            "FOODON:03412631",
            "FOODON:00004846",
            "FOODON:00004840",
            "FOODON:00002191",
            "FOODON:03306732",
            "FOODON:03315297",
            "FOODON:03311265",
            "FOODON:03304285",
            "FOODON:03306723",
            "FOODON:03301382",
            "FOODON:03308489",
            "FOODON:03310797",
            "FOODON:00001956",
            "FOODON:03306737",
            "FOODON:03411531",
            "FOODON:03301526",
            "FOODON:00001935",
            "FOODON:03315873",
            "FOODON:03315296",
            "FOODON:03302033"
        ]
    },
    {
        "query": "SALSA",
        "chosen_curie": "FOODON:03544127",
        "true_curies": [
            "FOODON:03310086"
        ],
        "explanation": "While several terms relate to sauces, FOODON:03544127 ('salsa (efsa foodex2)') offers the most comprehensive definition encompassing various types of salsa, aligning best with the broad scope of the user's input 'SALSA'.  Other terms like 'pico de gallo' are subtypes of salsa, making 'salsa (efsa foodex2)' the more appropriate general term.",
        "candidates_provided": [
            "FOODON:03544127",
            "FOODON:00003883",
            "FOODON:03310086",
            "FOODON:03303914",
            "FOODON:03544126",
            "FOODON:03304007",
            "FOODON:03303894",
            "FOODON:03302032",
            "FOODON:03316286",
            "FOODON:03307333",
            "FOODON:03310211",
            "FOODON:03304580",
            "FOODON:03304024",
            "FOODON:03304054",
            "FOODON:03304583",
            "FOODON:03312058",
            "FOODON:03413839",
            "FOODON:03315781",
            "FOODON:00001796",
            "FOODON:03304022",
            "FOODON:03307213"
        ]
    },
    {
        "query": "MUSHROOM",
        "chosen_curie": "FOODON:00005332",
        "true_curies": [
            "FOODON:03301303",
            "obo:FAO_0000012",
            "FOODON:00003528"
        ],
        "explanation": "While 'mushroom' (FOODON:00005332) is a general term, many of the other options are specific types of mushrooms.  The user provided the entity \"MUSHROOM\" without specifying a variety. Given this lack of specification, a generic term encompassing all kinds of mushrooms is the most appropriate. Other terms include preparations or specific types, making FOODON:00005332 the best fit.",
        "candidates_provided": [
            "FOODON:00003462",
            "FOODON:00003464",
            "FOODON:00003463",
            "FOODON:03413452",
            "FOODON:00004258",
            "FOODON:00004254",
            "FOODON:00004255",
            "FOODON:00004257",
            "FOODON:00005332",
            "FOODON:00003465",
            "FOODON:03306536",
            "FOODON:00004929",
            "FOODON:00005329",
            "FOODON:00005334",
            "FOODON:00004709",
            "FOODON:00004930",
            "FOODON:03301303",
            "FOODON:03543957",
            "FOODON:00003528",
            "FOODON:03310082",
            "FOODON:00001287",
            "FOODON:03412937",
            "FOODON:03310677",
            "FOODON:00002050",
            "FOODON:03316179",
            "FOODON:03309555",
            "FOODON:03316904",
            "FOODON:03309654",
            "FOODON:03308510",
            "FOODON:00004253",
            "FOODON:03414174",
            "FOODON:03306535",
            "FOODON:03306490",
            "FOODON:03412521",
            "FOODON:03304727",
            "FOODON:03315123",
            "FOODON:03306538",
            "FOODON:03311148",
            "FOODON:03304472"
        ]
    },
    {
        "query": "GOAT",
        "chosen_curie": "FOODON:02021058",
        "true_curies": [
            "NCBITaxon:9925",
            "FOODON:03411328",
            "FOODON:00001013"
        ],
        "explanation": "While several terms relate to goat parts or products, FOODON:02021058, 'live goat', is the most appropriate choice for the user entity 'GOAT' if no further specifications were given.  It covers the animal as a whole in its living state. Other options are more specific to aspects of the goat such as meat, milk or carcass.",
        "candidates_provided": [
            "FOODON:03412611",
            "FOODON:02021059",
            "FOODON:02021079",
            "FOODON:02021088",
            "FOODON:02021060",
            "FOODON:00004422",
            "FOODON:02021080",
            "FOODON:03411328",
            "FOODON:02021058",
            "FOODON:03412702",
            "FOODON:02021066",
            "FOODON:02021073",
            "FOODON:02021056",
            "FOODON:02021055",
            "FOODON:02021057",
            "FOODON:02021074",
            "FOODON:02021067",
            "FOODON:02021076",
            "FOODON:02021077",
            "FOODON:03305803",
            "FOODON:03411838",
            "FOODON:03510259",
            "FOODON:03530132",
            "obo:chebi#is_tautomer_of",
            "FOODON:03530133",
            "HANCESTRO:0308",
            "FOODON:02021087",
            "FOODON:03411858",
            "FOODON:03414851",
            "FOODON:02021068",
            "FOODON:03316967",
            "FOODON:02021069",
            "FOODON:03315656",
            "FOODON:02021070",
            "FOODON:03412593",
            "FOODON:03412715"
        ]
    },
    {
        "query": "MUSHROOM",
        "chosen_curie": "FOODON:00003465",
        "true_curies": [
            "obo:FAO_0000009",
            "obo:FAO_0000012",
            "FOODON:00003528",
            "FOODON:03301303"
        ],
        "explanation": "While many terms mention 'mushroom', FOODON:00003465, 'cultivated mushroom', is the most general and encompassing term that fits the user's entity without specifying a particular type or preparation method.  Other terms are too specific (e.g., portobello, shiitake), or obsolete.",
        "candidates_provided": [
            "FOODON:00003462",
            "FOODON:00003464",
            "FOODON:00003463",
            "FOODON:03413452",
            "FOODON:00004258",
            "FOODON:00004254",
            "FOODON:00004255",
            "FOODON:00004257",
            "FOODON:00005332",
            "FOODON:00003465",
            "FOODON:03306536",
            "FOODON:00004929",
            "FOODON:00005329",
            "FOODON:00005334",
            "FOODON:00004709",
            "FOODON:00004930",
            "FOODON:03301303",
            "FOODON:03543957",
            "FOODON:00003528",
            "FOODON:03310082",
            "FOODON:00001287",
            "FOODON:03412937",
            "FOODON:03310677",
            "FOODON:00002050",
            "FOODON:03316179",
            "FOODON:03309555",
            "FOODON:03316904",
            "FOODON:03309654",
            "FOODON:03308510",
            "FOODON:00004253",
            "FOODON:03414174",
            "FOODON:03306535",
            "FOODON:03306490",
            "FOODON:03412521",
            "FOODON:03304727",
            "FOODON:03315123",
            "FOODON:03306538",
            "FOODON:03311148",
            "FOODON:03304472"
        ]
    },
    {
        "query": "SEASONING",
        "chosen_curie": "FOODON:03315708",
        "true_curies": [
            "FOODON:00002732",
            "FOODON:03301189"
        ],
        "explanation": "While several terms include 'seasoning' in their label, FOODON:03315708 (condiment) is the most appropriate as it encompasses the broadest range of seasoning types and is a commonly understood culinary term. Other options are too specific (e.g., hamburger seasoning) or refer to processes (e.g., food seasoning process) rather than the entity itself.",
        "candidates_provided": [
            "FOODON:00002732",
            "FOODON:00002148",
            "FOODON:03544060",
            "FOODON:03301189",
            "FOODON:00004287",
            "FOODON:00002733",
            "FOODON:03544050",
            "FOODON:03306501",
            "FOODON:03307026",
            "FOODON:03316453",
            "FOODON:03315326",
            "FOODON:03302090",
            "FOODON:03306594",
            "FOODON:03306222",
            "FOODON:03302060",
            "FOODON:03316490",
            "FOODON:03303355",
            "FOODON:00002563",
            "FOODON:00001133",
            "FOODON:03400113",
            "FOODON:03460150",
            "FOODON:03460225",
            "FOODON:03460103",
            "FOODON:03460141",
            "FOODON:03460200",
            "FOODON:03460751",
            "FOODON:03460207",
            "FOODON:03460169",
            "FOODON:03460227",
            "FOODON:03315708",
            "FOODON:03460151",
            "FOODON:00004078",
            "FOODON:00004466",
            "FOODON:03460117",
            "FOODON:00004464",
            "FOODON:03315498",
            "FOODON:03304158",
            "FOODON:03460391"
        ]
    },
    {
        "query": "TURKEY",
        "chosen_curie": "FOODON:02020418",
        "true_curies": [
            "NCBITaxon:9103",
            "FOODON:03414166",
            "FOODON:00002805",
            "FOODON:03411236",
            "GAZ:00000558"
        ],
        "explanation": "While several terms refer to parts of a turkey or turkey-based products, FOODON:02020418 has the label 'turkey' which is an exact match for the user's input and definition 'A whole turkey' making it the most appropriate choice. Other options are more specific types or parts of a turkey.",
        "candidates_provided": [
            "FOODON:03310934",
            "FOODON:02020416",
            "FOODON:02020450",
            "FOODON:02020409",
            "FOODON:00002805",
            "FOODON:03411236",
            "FOODON:00004551",
            "FOODON:02020463",
            "FOODON:02020570",
            "FOODON:00002690",
            "FOODON:02020420",
            "FOODON:00002802",
            "FOODON:02020443",
            "FOODON:00002714",
            "FOODON:02020464",
            "FOODON:02020469",
            "FOODON:02020457",
            "FOODON:02020418",
            "FOODON:03414166",
            "FOODON:02020634",
            "HANCESTRO:0451",
            "GAZ:00000558",
            "FOODON:03310573",
            "FOODON:03304545",
            "FOODON:00002979",
            "FOODON:03307578",
            "FOODON:03311516",
            "FOODON:03309735",
            "FOODON:03414167",
            "FOODON:03307078",
            "FOODON:03311109",
            "FOODON:03307205",
            "FOODON:03413547",
            "FOODON:02020403",
            "FOODON:02020430",
            "FOODON:03307580",
            "FOODON:03311736",
            "FOODON:02020569"
        ]
    },
    {
        "query": "SPINACH",
        "chosen_curie": "FOODON:03000221",
        "true_curies": [
            "FOODON:03301716",
            "NCBITaxon:3562",
            "FOODON:00003496"
        ],
        "explanation": "While several options refer to spinach, FOODON:03000221, 'spinach (whole or pieces)', offers the broadest coverage encompassing various forms of spinach without specifying a particular preparation or growth stage.  Other options, such as 'spinach leaf' or 'baby spinach', are more specific and thus less encompassing than the general term \"spinach\".",
        "candidates_provided": [
            "FOODON:03000221",
            "FOODON:00003496",
            "FOODON:00003497",
            "FOODON:03000153",
            "FOODON:00004356",
            "FOODON:00003908",
            "FOODON:00003495",
            "FOODON:00002269",
            "FOODON:00002977",
            "FOODON:00004197",
            "FOODON:00004196",
            "FOODON:00004195",
            "FOODON:03301716",
            "FOODON:03000084",
            "FOODON:03000154",
            "FOODON:00004357",
            "FOODON:03000085",
            "FOODON:00004355",
            "FOODON:03401851",
            "FOODON:03401850",
            "FOODON:00001273",
            "FOODON:03306297",
            "FOODON:03311372",
            "FOODON:03301376",
            "FOODON:03301375",
            "FOODON:03311147",
            "FOODON:03310186",
            "FOODON:00004194",
            "FOODON:03311895",
            "FOODON:03412852",
            "FOODON:03414815",
            "FOODON:03306295",
            "FOODON:03307535"
        ]
    },
    {
        "query": "EVAPORATED MILK",
        "chosen_curie": "FOODON:03400781",
        "true_curies": [
            "FOODON:03301505",
            "UBERON:0001913"
        ],
        "explanation": "While several options mention 'evaporated milk', FOODON:03400781, 'processed milk (eurofir)', explicitly includes evaporated milk within its definition as an example of processed milk that modifies consistency.  This is a more encompassing and accurate representation of the broad category encompassing evaporated milk than more specific options that might include added vitamins or specific fat content.",
        "candidates_provided": [
            "FOODON:00005485",
            "FOODON:00005482",
            "FOODON:00005483",
            "FOODON:03542721",
            "FOODON:03307455",
            "FOODON:03306510",
            "FOODON:03305408",
            "FOODON:03301484",
            "FOODON:03301503",
            "FOODON:00003879",
            "FOODON:03301505",
            "FOODON:03400781",
            "FOODON:03400779",
            "FOODON:03400148",
            "FOODON:03310940",
            "FOODON:03307486",
            "FOODON:03304508",
            "FOODON:03307491",
            "FOODON:03420113",
            "FOODON:00004495",
            "FOODON:00001085",
            "FOODON:03311024",
            "FOODON:03309540",
            "FOODON:00003006",
            "FOODON:03315758",
            "FOODON:03302672",
            "FOODON:00001257",
            "FOODON:03315633",
            "FOODON:03315273",
            "FOODON:03304378",
            "FOODON:03310639",
            "FOODON:03307459",
            "FOODON:03315488",
            "FOODON:00002032",
            "FOODON:03304703",
            "FOODON:03302040"
        ]
    },
    {
        "query": "PICKLING SPICE",
        "chosen_curie": "FOODON:03544065",
        "true_curies": [
            "FOODON:03460190",
            "FOODON:03303380",
            "FOODON:03304737"
        ],
        "explanation": "While several terms relate to spices, FOODON:03544065 ('40650 - pickling spice (efsa foodex2)') is the most precise match because its label directly corresponds to the user's entity: 'PICKLING SPICE'.  Other options like 'spice mixture' or 'spice' are too general.",
        "candidates_provided": [
            "FOODON:03544065",
            "FOODON:03304292",
            "FOODON:00001242",
            "FOODON:03304737",
            "FOODON:00002876",
            "FOODON:03303380",
            "FOODON:00002500",
            "FOODON:00004307",
            "FOODON:03544448",
            "FOODON:03460190",
            "FOODON:00004176",
            "FOODON:03540304",
            "FOODON:03306052",
            "FOODON:03541365",
            "FOODON:00002014",
            "FOODON:03544378",
            "FOODON:03541364",
            "FOODON:03302699",
            "FOODON:03301177",
            "FOODON:03309941",
            "FOODON:03315129",
            "FOODON:03315168",
            "FOODON:03301184",
            "FOODON:03301548",
            "FOODON:03411179",
            "FOODON:03301686",
            "FOODON:03460227",
            "FOODON:03310148",
            "FOODON:03301147",
            "FOODON:03303617",
            "FOODON:03317238",
            "FOODON:03304288",
            "FOODON:03302033",
            "FOODON:00002268",
            "FOODON:03315873",
            "FOODON:03413458"
        ]
    },
    {
        "query": "FISH SAUCE",
        "chosen_curie": "FOODON:00001263",
        "true_curies": [
            "NCBITaxon:7898",
            "FOODON:03311146",
            "FOODON:03411222",
            "FOODON:03317197",
            "NCBITaxon:7777"
        ],
        "explanation": "While several terms mention 'fish sauce', FOODON:00001263 ('bu-du') explicitly defines itself as a 'fish sauce and fermented seafood product', aligning perfectly with the general understanding of fish sauce.  Other 'fish sauce' terms lack definitions or are too specific (e.g., Philippine fish sauce).  FOODON:00001263 provides the best balance of specificity and general applicability to the user's entity.",
        "candidates_provided": [
            "FOODON:03544114",
            "FOODON:00002986",
            "FOODON:00003259",
            "FOODON:03306786",
            "FOODON:00002526",
            "FOODON:00003232",
            "FOODON:03400863",
            "FOODON:00005513",
            "FOODON:03400862",
            "FOODON:03400263",
            "FOODON:00003594",
            "FOODON:03304206",
            "FOODON:03315446",
            "FOODON:00001263",
            "FOODON:00004502",
            "FOODON:03317197",
            "FOODON:03304888",
            "FOODON:03480034",
            "FOODON:00003236",
            "FOODON:00004283",
            "FOODON:03310036",
            "FOODON:03304051",
            "FOODON:03310717",
            "FOODON:03309693",
            "FOODON:03306331",
            "FOODON:03308407",
            "FOODON:00002226",
            "FOODON:03308043",
            "FOODON:03307673",
            "FOODON:03315476",
            "FOODON:03308357",
            "FOODON:00001249",
            "FOODON:03309677",
            "FOODON:03309033",
            "FOODON:03301077",
            "FOODON:03316277",
            "FOODON:03315990",
            "FOODON:03316278",
            "FOODON:03310979"
        ]
    },
    {
        "query": "RICE",
        "chosen_curie": "FOODON:00004320",
        "true_curies": [
            "FOODON:03301641",
            "NCBITaxon:4530",
            "FOODON:03303926"
        ],
        "explanation": "While FOODON:00004327 is a good option, it is too general.  Many of the other options are more specific types of rice (e.g., short grain, long grain, black rice). FOODON:00004320, 'rice (cooked)', is the most appropriate choice when no further specification is provided.  It's a more generic term that covers a range of possible rice preparations, avoiding unnecessary specificity.",
        "candidates_provided": [
            "FOODON:03301641",
            "FOODON:03311875",
            "FOODON:00002881",
            "FOODON:03411322",
            "FOODON:00002849",
            "FOODON:00004676",
            "FOODON:00003438",
            "FOODON:00002867",
            "FOODON:00004720",
            "FOODON:00004327",
            "FOODON:03600010",
            "FOODON:00003786",
            "FOODON:00001332",
            "FOODON:00004330",
            "FOODON:00002207",
            "FOODON:00005555",
            "FOODON:03601051",
            "FOODON:03309871",
            "FOODON:00002575",
            "FOODON:00003056",
            "FOODON:00004320",
            "FOODON:03306909",
            "FOODON:03302745",
            "FOODON:03310371",
            "FOODON:03307152",
            "FOODON:03311295",
            "FOODON:03305184",
            "FOODON:03310654",
            "FOODON:03304556",
            "FOODON:03312030",
            "FOODON:00004326",
            "FOODON:03304555",
            "FOODON:03307146",
            "FOODON:00001185",
            "FOODON:03307150",
            "FOODON:03304585",
            "FOODON:03304549",
            "FOODON:03310254",
            "FOODON:03311392",
            "FOODON:03304560"
        ]
    },
    {
        "query": "CHOPPED",
        "chosen_curie": "FOODON:00002777",
        "true_curies": [
            "FOODON:00003423",
            "FOODON:03430125",
            "FOODON:00001998",
            "FOODON:00003507"
        ],
        "explanation": "While many terms describe chopped ingredients, FOODON:00002777, 'food (chopped)', is the most general and appropriate term for the user entity 'CHOPPED'.  Other options are too specific (e.g., chopped meat, chopped liver) or describe cutting methods in greater detail than the user input.  'Food (chopped)' encompasses a wide range of food items prepared by chopping and is therefore the best match.",
        "candidates_provided": [
            "FOODON:00004279",
            "FOODON:00002777",
            "FOODON:00004119",
            "FOODON:03301881",
            "FOODON:03430125",
            "FOODON:03317335",
            "FOODON:03316399",
            "FOODON:03301880",
            "FOODON:03316397",
            "FOODON:03306437",
            "FOODON:03307082",
            "FOODON:03311056",
            "FOODON:00005592",
            "FOODON:00004696",
            "FOODON:03307353",
            "FOODON:03311272",
            "FOODON:03306490",
            "FOODON:03305812",
            "FOODON:03311688",
            "FOODON:03311083",
            "FOODON:03430145",
            "FOODON:03430137",
            "FOODON:03430115",
            "FOODON:03430124",
            "FOODON:03430111",
            "FOODON:03430141",
            "FOODON:03430107",
            "FOODON:03530106",
            "FOODON:03530040",
            "FOODON:03530104",
            "FOODON:03530105",
            "FOODON:03530252",
            "FOODON:03530047",
            "FOODON:03530048",
            "FOODON:03430122",
            "FOODON:03304169",
            "FOODON:03430136",
            "FOODON:03530139",
            "FOODON:03413958"
        ]
    },
    {
        "query": "MINT",
        "chosen_curie": "FOODON:03000237",
        "true_curies": [
            "FOODON:00002432"
        ],
        "explanation": "While several options relate to mint, FOODON:03000237 ('mint (whole or pieces)') offers the broadest coverage encompassing whole mint and processed forms, aligning best with the ambiguous nature of the user's input 'MINT'.",
        "candidates_provided": [
            "FOODON:03000237",
            "FOODON:00002432",
            "FOODON:03000121",
            "FOODON:03000175",
            "FOODON:03000238",
            "FOODON:00003160",
            "FOODON:00003161",
            "FOODON:03303919",
            "FOODON:03305875",
            "FOODON:03306233",
            "FOODON:00004312",
            "FOODON:03544125",
            "FOODON:03401567",
            "FOODON:03540899",
            "FOODON:03540881",
            "NCBITaxon:38860",
            "FOODON:03544322",
            "FOODON:03411267",
            "FOODON:03544181",
            "NCBITaxon:190902",
            "BFO:0000024",
            "FOODON:03413821",
            "CHEBI:33973",
            "CHEBI:30475",
            "CHEBI:33352",
            "CHEBI:35115",
            "CHEBI:35155",
            "FOODON:03303760",
            "BFO:0000141",
            "obo:UO_0000031",
            "FOODON:03412713",
            "CHEBI:49867",
            "FOODON:03414562",
            "ENVO:01001069",
            "CHEBI:16793",
            "FOODON:03412513",
            "CHEBI:82663",
            "FOODON:03430117",
            "CHEBI:18291"
        ]
    },
    {
        "query": "THAI",
        "chosen_curie": "FOODON:03401192",
        "true_curies": [
            "NCBITaxon:39350",
            "FOODON:00003044",
            "HANCESTRO:0500"
        ],
        "explanation": "While several terms relate to Thai food or people, FOODON:03401192 ('sauces - cooking (perishable) (gs1 gpc)') is the most appropriate because it directly incorporates \"Thai Curry\" as an example within its definition.  Other options refer to specific Thai ingredients or populations, while this term refers to a culinary category that includes Thai cuisine.",
        "candidates_provided": [
            "HANCESTRO:0746",
            "FOODON:03412564",
            "HANCESTRO:0500",
            "FOODON:03540898",
            "FOODON:00001306",
            "FOODON:00001315",
            "FOODON:03412601",
            "FOODON:00001331",
            "FOODON:00001310",
            "FOODON:03401192",
            "FOODON:03401193",
            "FOODON:03401191",
            "NCBITaxon:8187",
            "FOODON:03412455",
            "FOODON:00002736",
            "NCBITaxon:170989",
            "FOODON:03412056",
            "HANCESTRO:0577",
            "HANCESTRO:0020",
            "HANCESTRO:0578",
            "GAZ:00003744",
            "GAZ:00002472",
            "HANCESTRO:0491",
            "FOODON:03413736",
            "HANCESTRO:0502",
            "obo:AfPO_0000334",
            "HANCESTRO:0489",
            "GAZ:00002846",
            "HANCESTRO:0582",
            "HANCESTRO:0024",
            "FOODON:03317543",
            "GAZ:00002464",
            "FOODON:00001309",
            "FOODON:03520350",
            "HANCESTRO:0584"
        ]
    },
    {
        "query": "SPRING",
        "chosen_curie": "NCIT:C94731",
        "true_curies": [
            "ENVO:00000027"
        ],
        "explanation": "While many terms relate to plants harvested in spring, the user's input \"SPRING\" most directly refers to the season.  NCIT:C94731 explicitly defines 'Spring' as the season between the vernal equinox and the summer solstice, making it the most accurate and unambiguous choice.",
        "candidates_provided": [
            "FOODON:00004529",
            "FOODON:00005049",
            "FOODON:00005047",
            "FOODON:00005101",
            "FOODON:00005103",
            "FOODON:00004916",
            "FOODON:00005102",
            "FOODON:03309946",
            "FOODON:00005050",
            "FOODON:00005104",
            "FOODON:00004917",
            "FOODON:00004915",
            "FOODON:00005054",
            "FOODON:00005057",
            "FOODON:00005056",
            "FOODON:00005053",
            "FOODON:00005061",
            "FOODON:00005060",
            "FOODON:00005062",
            "FOODON:00005059",
            "NCIT:C94731",
            "ENVO:00000027",
            "NCIT:C94729",
            "NCIT:C94732",
            "FOODON:03307813",
            "NCIT:C94730",
            "NCIT:C94733",
            "FOODON:03414345",
            "FOODON:03304255",
            "FOODON:03413420",
            "FOODON:03414509",
            "FOODON:03420279",
            "FOODON:03520500",
            "FOODON:00003708",
            "FOODON:03520501",
            "FOODON:00004729",
            "FOODON:03411114",
            "FOODON:03307409",
            "FOODON:00004334",
            "FOODON:03411386"
        ]
    },
    {
        "query": "FLOUR",
        "chosen_curie": "FOODON:00004512",
        "true_curies": [
            "NCIT:C45305",
            "CHEBI:60004",
            "FOODON:03310351",
            "FOODON:03301116"
        ],
        "explanation": "While FOODON:00004510 is a more general term for 'flour', FOODON:00004512 ('00 white wheat flour') provides a more specific type of flour.  The user entity 'FLOUR' is ambiguous without more context, and a specific type of flour is a better choice than the generic 'flour' option.",
        "candidates_provided": [
            "FOODON:03302142",
            "FOODON:03304488",
            "FOODON:03601071",
            "FOODON:00004512",
            "FOODON:00002553",
            "FOODON:03311459",
            "FOODON:00002207",
            "FOODON:00004506",
            "FOODON:00003355",
            "FOODON:00004721",
            "FOODON:00004104",
            "FOODON:00004510",
            "FOODON:00003605",
            "FOODON:00004507",
            "FOODON:00004511",
            "FOODON:03304487",
            "FOODON:00005500",
            "FOODON:00001056",
            "FOODON:00003353",
            "FOODON:00003317",
            "FOODON:00003342",
            "FOODON:03530140",
            "FOODON:03315176",
            "FOODON:03530143",
            "FOODON:00002140",
            "FOODON:03530138",
            "FOODON:03301120",
            "FOODON:03309292",
            "FOODON:03304022",
            "FOODON:03305224",
            "FOODON:03411634",
            "FOODON:03412030",
            "FOODON:03412421",
            "FOODON:03530142",
            "FOODON:03317665",
            "FOODON:03412043",
            "FOODON:03315289",
            "FOODON:03303387",
            "FOODON:03414361",
            "FOODON:03411446"
        ]
    },
    {
        "query": "PAPRIKA",
        "chosen_curie": "FOODON:03301223",
        "true_curies": [
            "FOODON:03301105"
        ],
        "explanation": "FOODON:03301223 ('paprika (ground)') provides the most precise match for the user entity 'PAPRIKA'.  While other options mention paprika as an ingredient or describe paprika-containing products, this ID specifically refers to ground paprika, which aligns closely with the common understanding of paprika as a spice.",
        "candidates_provided": [
            "FOODON:03541406",
            "FOODON:03544338",
            "FOODON:03542161",
            "FOODON:03301105",
            "FOODON:03301223",
            "FOODON:03316348",
            "FOODON:00004267",
            "FOODON:03306758",
            "FOODON:03306674",
            "FOODON:03306933",
            "FOODON:03411353",
            "FOODON:00003190",
            "FOODON:03470153",
            "FOODON:03301903",
            "FOODON:03543849",
            "FOODON:03542159",
            "FOODON:03541405",
            "FOODON:03542163",
            "FOODON:03542155",
            "FOODON:03540650",
            "FOODON:03310345",
            "FOODON:03413458",
            "FOODON:00001935",
            "FOODON:03301526",
            "FOODON:00002109",
            "FOODON:03309928",
            "NCBITaxon:260138",
            "FOODON:03301715",
            "FOODON:03311745",
            "FOODON:03304289",
            "FOODON:03310070",
            "FOODON:03306727",
            "FOODON:03302033",
            "FOODON:03411141",
            "FOODON:03301147",
            "FOODON:03315875"
        ]
    },
    {
        "query": "ONION",
        "chosen_curie": "FOODON:03316347",
        "true_curies": [
            "NCIT:C45305",
            "NCBITaxon:4679",
            "CHEBI:60004",
            "FOODON:03301704"
        ],
        "explanation": "FOODON:03316347 ('onion') is the most appropriate term because it's the most general and widely encompassing term for the common onion (Allium cepa), fitting the user's entity perfectly. Other options specify cultivars, preparations, or other Allium species.",
        "candidates_provided": [
            "FOODON:03316347",
            "FOODON:00003172",
            "FOODON:03413721",
            "FOODON:00003350",
            "FOODON:03415024",
            "FOODON:03311276",
            "FOODON:00004826",
            "FOODON:03304029",
            "FOODON:03414323",
            "FOODON:00004823",
            "FOODON:00005335",
            "FOODON:00004824",
            "FOODON:00004827",
            "FOODON:03411300",
            "FOODON:03301704",
            "FOODON:00003516",
            "FOODON:00003517",
            "FOODON:00003714",
            "FOODON:00003518",
            "FOODON:00004828",
            "FOODON:00002069",
            "FOODON:03306528",
            "FOODON:03316397",
            "FOODON:03306350",
            "FOODON:03316446",
            "FOODON:03306563",
            "FOODON:03310327",
            "FOODON:03315770",
            "FOODON:03306529",
            "FOODON:03316398",
            "FOODON:03304118",
            "FOODON:03309591",
            "FOODON:03316173",
            "FOODON:03316176",
            "FOODON:00002067",
            "FOODON:03311124",
            "FOODON:03304740"
        ]
    },
    {
        "query": "CHORIZO",
        "chosen_curie": "FOODON:03542162",
        "true_curies": [
            "FOODON:03316070"
        ],
        "explanation": "FOODON:03542162 is the best match because its label '21620 - chorizo and similar (efsa foodex2)' includes 'chorizo' and its definition explicitly describes chorizo, including its origin and characteristics.  While FOODON:03316070 also has 'chorizo' as its label, it lacks a definition, making FOODON:03542162 the more informative and precise choice.",
        "candidates_provided": [
            "FOODON:03542162",
            "FOODON:03316070",
            "FOODON:03414876",
            "NCBITaxon:186628",
            "FOODON:03411788",
            "FOODON:03414877",
            "FOODON:03412664",
            "CHEBI:38445",
            "FOODON:03411682",
            "FOODON:03412490",
            "FOODON:03412043",
            "FOODON:03413813",
            "FOODON:03412698",
            "FOODON:03414870",
            "FOODON:03413839",
            "FOODON:03312034",
            "FOODON:03414199",
            "FOODON:03414287",
            "FOODON:03414462",
            "FOODON:03317457",
            "FOODON:03301144"
        ]
    },
    {
        "query": "DICED",
        "chosen_curie": "FOODON:03430117",
        "true_curies": [
            "NCBITaxon:4113",
            "FOODON:03430115",
            "FOODON:03315354",
            "FOODON:03301449"
        ],
        "explanation": "While FOODON:00004549 ('food (diced)') is tempting due to its definition, it's too general.  FOODON:03430117 ('medium ground') has 'diced' as a synonym and represents a more precise level of granularity for the cut of food, making it a better fit than the generic 'food (diced)'.",
        "candidates_provided": [
            "FOODON:00004549",
            "FOODON:03303374",
            "FOODON:03310846",
            "FOODON:03304885",
            "FOODON:03307350",
            "FOODON:03315074",
            "FOODON:03430115",
            "FOODON:03308714",
            "FOODON:03317505",
            "FOODON:03401668",
            "FOODON:03401665",
            "FOODON:03401660",
            "FOODON:03401683",
            "FOODON:03401661",
            "FOODON:03401666",
            "FOODON:03401679",
            "FOODON:03401542",
            "FOODON:03401685",
            "FOODON:03401674",
            "FOODON:03401663",
            "FOODON:03413821",
            "FOODON:03317415",
            "FOODON:03430106",
            "FOODON:03430122",
            "FOODON:03430136",
            "FOODON:03440014",
            "FOODON:03310752",
            "FOODON:03301404",
            "FOODON:03460154",
            "FOODON:00003342",
            "FOODON:03413958",
            "FOODON:00005241",
            "FOODON:03411860",
            "FOODON:03301247",
            "FOODON:03460188",
            "FOODON:03310889",
            "FOODON:03412411",
            "FOODON:03414615",
            "FOODON:03430117",
            "FOODON:03315686"
        ]
    },
    {
        "query": "POTATOES",
        "chosen_curie": "FOODON:03401806",
        "true_curies": [
            "NCBITaxon:4113"
        ],
        "explanation": "FOODON:03401806 ('10006104 - potatoes (gs1 gpc)') is the best match because it specifically refers to fresh commercial varieties of potatoes, encompassing the broadest sense of the user's entity 'POTATOES'.  Other options refer to specific potato dishes or preparations, while this option covers the raw, unprocessed potato itself.",
        "candidates_provided": [
            "FOODON:03311532",
            "FOODON:03401806",
            "FOODON:03540957",
            "FOODON:03540975",
            "FOODON:03543867",
            "FOODON:03540958",
            "FOODON:03543894",
            "FOODON:03543885",
            "FOODON:03543884",
            "FOODON:03543887",
            "FOODON:03540962",
            "FOODON:03540976",
            "FOODON:03401810",
            "FOODON:03543886",
            "FOODON:03540961",
            "FOODON:03305133",
            "FOODON:03310868",
            "FOODON:00001148",
            "FOODON:00003240",
            "NCBITaxon:4113",
            "FOODON:03307029",
            "FOODON:03317077",
            "FOODON:00002797",
            "FOODON:03306100",
            "FOODON:03301449",
            "FOODON:03316165",
            "FOODON:00002792",
            "FOODON:03302197",
            "FOODON:03309707",
            "FOODON:03317118",
            "FOODON:03311427",
            "FOODON:03307030",
            "FOODON:03306854",
            "FOODON:03303394",
            "FOODON:03316367",
            "FOODON:03306842",
            "FOODON:03310437",
            "FOODON:03307737",
            "FOODON:00005203"
        ]
    },
    {
        "query": "CHORIZO",
        "chosen_curie": "FOODON:03542162",
        "true_curies": [
            "NCIT:C45305",
            "FOODON:03316070",
            "CHEBI:60004"
        ],
        "explanation": "FOODON:03542162 is the best match because its label explicitly includes 'chorizo' and its definition provides a detailed description consistent with the understanding of chorizo as a Spanish dry pork sausage.  Other 'chorizo' entries lack definitions, and all other options are irrelevant or obsolete.",
        "candidates_provided": [
            "FOODON:03542162",
            "FOODON:03316070",
            "FOODON:03414876",
            "NCBITaxon:186628",
            "FOODON:03411788",
            "FOODON:03414877",
            "FOODON:03412664",
            "CHEBI:38445",
            "FOODON:03411682",
            "FOODON:03412490",
            "FOODON:03412043",
            "FOODON:03413813",
            "FOODON:03412698",
            "FOODON:03414870",
            "FOODON:03413839",
            "FOODON:03312034",
            "FOODON:03414199",
            "FOODON:03414287",
            "FOODON:03414462",
            "FOODON:03317457",
            "FOODON:03301144"
        ]
    },
    {
        "query": "SALMON",
        "chosen_curie": "FOODON:02022069",
        "true_curies": [
            "NCIT:C45305",
            "CHEBI:60004",
            "FOODON:00003473"
        ],
        "explanation": "While several options mention 'salmon', FOODON:02022069 ('atlantic salmon') provides the best balance of specificity and completeness.  It accurately represents a whole salmon, avoiding overly specific cuts or preparations,  and addresses the user's entity directly without unnecessary additional qualifiers.",
        "candidates_provided": [
            "FOODON:02021854",
            "FOODON:02022075",
            "FOODON:02021852",
            "FOODON:02022073",
            "FOODON:02022070",
            "FOODON:02021849",
            "FOODON:02022071",
            "FOODON:02021850",
            "FOODON:00002883",
            "FOODON:02022067",
            "FOODON:02021848",
            "FOODON:02022069",
            "FOODON:02022072",
            "FOODON:02021851",
            "FOODON:02021847",
            "FOODON:02022068",
            "FOODON:03307996",
            "FOODON:02021856",
            "FOODON:02022077",
            "FOODON:02021855",
            "FOODON:00003473",
            "NCBITaxon:8028",
            "FOODON:00002220",
            "FOODON:03411258",
            "FOODON:00004178",
            "FOODON:03411126",
            "FOODON:03411592",
            "FOODON:03309273",
            "FOODON:00001249",
            "FOODON:03309296",
            "FOODON:03315936",
            "FOODON:03411128",
            "FOODON:03309109",
            "FOODON:03308212",
            "FOODON:03411115",
            "FOODON:03411117",
            "FOODON:03411132",
            "FOODON:03308559",
            "FOODON:00002075",
            "FOODON:03309631"
        ]
    },
    {
        "query": "BUTTER",
        "chosen_curie": "FOODON:03543148",
        "true_curies": [
            "NCIT:C45305",
            "CHEBI:60004",
            "FOODON:03310351"
        ],
        "explanation": "While several terms mention \"butter,\" FOODON:03543148, '31480 - butter (efsa foodex2)', provides the most comprehensive definition encompassing various forms of butter derived from dairy cream.  Other options specify types of butter (e.g., salted, clarified), nut butters, or butter-containing products, making them less precise matches for the general term 'BUTTER'.",
        "candidates_provided": [
            "FOODON:03302641",
            "FOODON:00003854",
            "FOODON:03400809",
            "FOODON:03000476",
            "FOODON:00005495",
            "FOODON:00004525",
            "FOODON:00003326",
            "FOODON:00004421",
            "FOODON:03307957",
            "FOODON:03000295",
            "FOODON:00005582",
            "FOODON:00003223",
            "FOODON:03307958",
            "FOODON:03543148",
            "FOODON:03543117",
            "FOODON:03400294",
            "FOODON:03543140",
            "FOODON:03544103",
            "FOODON:03540239",
            "FOODON:03543118",
            "FOODON:03302449",
            "FOODON:03304469",
            "FOODON:03303711",
            "FOODON:03302532",
            "FOODON:03306205",
            "FOODON:03307026",
            "FOODON:03302522",
            "FOODON:03316334",
            "FOODON:03302542",
            "FOODON:00001673",
            "FOODON:03302536",
            "FOODON:03310351",
            "FOODON:03306210",
            "FOODON:03302523",
            "FOODON:03311219",
            "FOODON:03302625",
            "FOODON:03302516",
            "FOODON:03315520",
            "FOODON:03302605",
            "FOODON:03303155"
        ]
    },
    {
        "query": "THYME",
        "chosen_curie": "FOODON:03411199",
        "true_curies": [
            "FOODON:00002312",
            "NCBITaxon:49992"
        ],
        "explanation": "While several terms mention 'thyme', FOODON:03411199 ('thyme plant') provides the most comprehensive definition encompassing the various types and uses of thyme, making it the best overall representation of the user entity.",
        "candidates_provided": [
            "FOODON:03301562",
            "FOODON:03414998",
            "FOODON:03411199",
            "FOODON:00002312",
            "FOODON:03000017",
            "FOODON:00003811",
            "FOODON:03540865",
            "FOODON:03401577",
            "FOODON:03401588",
            "NCBITaxon:49992",
            "FOODON:03541279",
            "FOODON:03544394",
            "FOODON:03540870",
            "FOODON:03540866",
            "FOODON:03540872",
            "FOODON:03540867",
            "FOODON:03301215",
            "FOODON:03301489",
            "FOODON:03412134",
            "FOODON:03414997",
            "obo:chebi#is_tautomer_of",
            "FOODON:03414049",
            "FOODON:03414996",
            "NCBITaxon:49990",
            "FOODON:03412276",
            "FOODON:03411906",
            "FOODON:03316538",
            "obo:COB_0000502",
            "FOODON:03411173",
            "FOODON:02010251",
            "FOODON:03420310",
            "FOODON:02010084",
            "FOODON:03412698"
        ]
    },
    {
        "query": "CHOPPED",
        "chosen_curie": "FOODON:00002777",
        "true_curies": [
            "FOODON:03430125"
        ],
        "explanation": "While many terms describe chopped food items, FOODON:00002777, 'food (chopped)', is the most general and appropriate term for the broad entity 'CHOPPED'.  Other options specify a particular type of food (e.g., meat, liver, garlic), whereas 'food (chopped)' encompasses all chopped foods.",
        "candidates_provided": [
            "FOODON:00004279",
            "FOODON:00002777",
            "FOODON:00004119",
            "FOODON:03301881",
            "FOODON:03430125",
            "FOODON:03317335",
            "FOODON:03316399",
            "FOODON:03301880",
            "FOODON:03316397",
            "FOODON:03306437",
            "FOODON:03307082",
            "FOODON:03311056",
            "FOODON:00005592",
            "FOODON:00004696",
            "FOODON:03307353",
            "FOODON:03311272",
            "FOODON:03306490",
            "FOODON:03305812",
            "FOODON:03311688",
            "FOODON:03311083",
            "FOODON:03430145",
            "FOODON:03430137",
            "FOODON:03430115",
            "FOODON:03430124",
            "FOODON:03430111",
            "FOODON:03430141",
            "FOODON:03430107",
            "FOODON:03530106",
            "FOODON:03530040",
            "FOODON:03530104",
            "FOODON:03530105",
            "FOODON:03530252",
            "FOODON:03530047",
            "FOODON:03530048",
            "FOODON:03430122",
            "FOODON:03304169",
            "FOODON:03430136",
            "FOODON:03530139",
            "FOODON:03413958"
        ]
    },
    {
        "query": "CORN SYRUP",
        "chosen_curie": "FOODON:03543008",
        "true_curies": [
            "FOODON:03301061",
            "NCBITaxon:381124",
            "FOODON:03303225"
        ],
        "explanation": "FOODON:03543008 ('30080 - corn syrup (efsa foodex2)') is the best match because its label and definition directly refer to 'corn syrup', aligning precisely with the user's entity.  Other options describe corn kernels, corn plants, or corn-derived products but not the processed syrup itself.",
        "candidates_provided": [
            "FOODON:03543008",
            "FOODON:00003782",
            "FOODON:00003783",
            "FOODON:00003562",
            "FOODON:00001845",
            "FOODON:00003785",
            "FOODON:00003781",
            "FOODON:00002845",
            "FOODON:03430167",
            "FOODON:00005587",
            "FOODON:03301422",
            "FOODON:00001572",
            "FOODON:00005021",
            "FOODON:00005024",
            "FOODON:00005030",
            "FOODON:00005027",
            "FOODON:00005447",
            "FOODON:03302904",
            "FOODON:03411379",
            "FOODON:00005498",
            "FOODON:03301061",
            "FOODON:03317387",
            "FOODON:03302733",
            "FOODON:03315799",
            "FOODON:03311288",
            "FOODON:03311676",
            "FOODON:03310640",
            "FOODON:03311001",
            "FOODON:03302731",
            "FOODON:03301388",
            "FOODON:03301386",
            "FOODON:03303204",
            "FOODON:03301475",
            "FOODON:03310986",
            "FOODON:03306048",
            "FOODON:03311721",
            "FOODON:00002330",
            "FOODON:03311145",
            "FOODON:03302665",
            "FOODON:03301476"
        ]
    },
    {
        "query": "BROWN SUGAR",
        "chosen_curie": "FOODON:03542988",
        "true_curies": [
            "NCIT:C45305",
            "PATO:0000952",
            "CHEBI:60004",
            "FOODON:03420108",
            "FOODON:03420156"
        ],
        "explanation": "While FOODON:03542988 ('29880 - brown sugar (efsa foodex2)') and FOODON:03420156 ('brown sugar') both refer to brown sugar, FOODON:03542988 is preferred because its definition explicitly encompasses various types of brown sugar (sucrose), making it a more inclusive and general term for 'brown sugar' encompassing both cane and beet types.  The other specific brown sugar options (cane, beet, palm) are subtypes, while this term encapsulates them all.",
        "candidates_provided": [
            "FOODON:00002749",
            "FOODON:03542988",
            "FOODON:03542990",
            "FOODON:03542989",
            "FOODON:03542991",
            "FOODON:03420156",
            "FOODON:00003444",
            "FOODON:00003463",
            "FOODON:03311801",
            "FOODON:00004633",
            "PATO:0001942",
            "PATO:0002411",
            "PATO:0001287",
            "FOODON:03544214",
            "PATO:0001245",
            "PATO:0001267",
            "PATO:0001246",
            "PATO:0001268",
            "FOODON:03316757",
            "FOODON:00004634",
            "FOODON:03304723",
            "FOODON:03305010",
            "FOODON:03304366",
            "FOODON:03304299",
            "FOODON:00001084",
            "FOODON:03302833",
            "FOODON:03316271",
            "FOODON:03304561",
            "FOODON:03307571",
            "FOODON:03307558",
            "FOODON:03317200",
            "FOODON:03310913",
            "FOODON:03307345",
            "FOODON:03301065",
            "FOODON:00005514",
            "FOODON:03307056",
            "FOODON:03301073",
            "FOODON:03304302",
            "FOODON:03303225",
            "FOODON:03304365"
        ]
    },
    {
        "query": "LEBANESE",
        "chosen_curie": "GAZ:00002478",
        "true_curies": [
            "HANCESTRO:0443"
        ],
        "explanation": "While some options relate to Lebanese food or people of Lebanese origin, GAZ:00002478 represents 'Lebanon', the country itself, which is the most direct and appropriate match for the user's entity 'LEBANESE'.",
        "candidates_provided": [
            "HANCESTRO:0443",
            "NCBITaxon:1082757",
            "FOODON:03540141",
            "obo:AfPO_0000360",
            "HANCESTRO:0444",
            "GAZ:00002478",
            "FOODON:00005570",
            "HANCESTRO:0374",
            "NCBITaxon:84644",
            "FOODON:00004408",
            "obo:AfPO_0000359",
            "HANCESTRO:0495",
            "HANCESTRO:0431",
            "obo:AfPO_0000563",
            "HANCESTRO:0517",
            "obo:AfPO_0000180",
            "FOODON:00005404",
            "FOODON:03311856",
            "HANCESTRO:0461",
            "CHEBI:37167",
            "FOODON:02000255",
            "obo:AfPO_0000364"
        ]
    },
    {
        "query": "VERMOUTH",
        "chosen_curie": "FOODON:03543366",
        "true_curies": [
            "FOODON:03307808"
        ],
        "explanation": "FOODON:03543366 is the best match because its label 'vermouth (efsa foodex2)' exactly matches the user's entity and its definition accurately describes vermouth as a fortified wine flavored with herbs and spices.  Other options like FOODON:03307808 ('vermouth') lack a definition, and options like FOODON:03310991 ('vermouth dry') and FOODON:03310990 ('vermouth sweet') are subtypes of vermouth, making FOODON:03543366 the more general and thus better encompassing term.",
        "candidates_provided": [
            "FOODON:03543366",
            "FOODON:03307808",
            "FOODON:03315586",
            "FOODON:03310991",
            "FOODON:03310990",
            "NCBITaxon:669136",
            "FOODON:03400849",
            "GAZ:00004429",
            "FOODON:03412698",
            "FOODON:03413871",
            "FOODON:03412369",
            "FOODON:03413813",
            "FOODON:03414005",
            "FOODON:03414078",
            "FOODON:03301349",
            "FOODON:03413478",
            "FOODON:03414562",
            "PATO:0001302",
            "FOODON:03414361",
            "FOODON:03411763",
            "FOODON:03413490",
            "FOODON:03420310",
            "rdfs:label"
        ]
    },
    {
        "query": "PORK",
        "chosen_curie": "FOODON:02021710",
        "true_curies": [
            "FOODON:00001038"
        ],
        "explanation": "While several terms refer to pork, FOODON:02021710, 'piece of pork meat (raw)', offers the best balance of specificity and generality.  It avoids overly specific cuts (e.g., chop, steak, roast) and processed forms (e.g., sausage, bologna), while being more precise than the very general 'pork' terms.  The inclusion of '(raw)' is not a deciding factor as the user entity does not specify this detail.  This makes it a superior choice over the unspecific 'pork' entries that have no definition.",
        "candidates_provided": [
            "FOODON:00004095",
            "FOODON:02021688",
            "FOODON:02021709",
            "FOODON:02021757",
            "FOODON:02021713",
            "FOODON:02021676",
            "FOODON:02000326",
            "FOODON:02000302",
            "FOODON:02000330",
            "FOODON:00002729",
            "FOODON:00003848",
            "FOODON:02000338",
            "FOODON:00004490",
            "FOODON:02021698",
            "FOODON:02021710",
            "FOODON:02021795",
            "FOODON:00004527",
            "FOODON:00005510",
            "FOODON:02021664",
            "FOODON:00005450",
            "FOODON:03302735",
            "FOODON:03311610",
            "FOODON:03310804",
            "FOODON:03317324",
            "FOODON:03311587",
            "FOODON:03306416",
            "FOODON:03310575",
            "FOODON:03310801",
            "FOODON:03311005",
            "FOODON:03317316",
            "FOODON:03317377",
            "FOODON:03306445",
            "FOODON:03311467",
            "FOODON:03317263",
            "FOODON:03309969",
            "FOODON:03310623",
            "FOODON:00001077",
            "FOODON:02021714",
            "FOODON:02021715"
        ]
    },
    {
        "query": "GREEN ONIONS",
        "chosen_curie": "FOODON:00002695",
        "true_curies": [
            "PATO:0000320",
            "FOODON:00003697"
        ],
        "explanation": "FOODON:00002695 ('scallion food product') is the best match because its definition explicitly lists 'green onions' as a synonym, and it's a more specific term than broader categories like 'onion food product'.",
        "candidates_provided": [
            "FOODON:03540590",
            "FOODON:00002695",
            "FOODON:00004233",
            "FOODON:00004236",
            "FOODON:03000008",
            "FOODON:03411746",
            "FOODON:00003547",
            "FOODON:02021578",
            "FOODON:00003551",
            "FOODON:02021573",
            "FOODON:02021574",
            "PATO:0001941",
            "FOODON:00003765",
            "PATO:0001942",
            "FOODON:03401482",
            "FOODON:03540578",
            "FOODON:02021579",
            "PATO:0001249",
            "PATO:0001271",
            "PATO:0001272",
            "FOODON:00002069",
            "FOODON:03316446",
            "FOODON:03301704",
            "FOODON:03316397",
            "FOODON:03306528",
            "FOODON:03306350",
            "FOODON:03304118",
            "FOODON:03310327",
            "FOODON:03315770",
            "FOODON:03316398",
            "FOODON:00001936",
            "FOODON:00005335",
            "FOODON:03411605",
            "FOODON:03413112",
            "FOODON:03309591",
            "FOODON:03316173",
            "FOODON:03306529",
            "FOODON:03301390",
            "FOODON:03311124",
            "FOODON:03316176"
        ]
    },
    {
        "query": "SHERRY",
        "chosen_curie": "FOODON:03543367",
        "true_curies": [
            "FOODON:03310760"
        ],
        "explanation": "FOODON:03543367 is the best match because its label is 'sherry (efsa foodex2)' and its definition explicitly describes sherry as a fortified wine from Spain, aligning perfectly with the user's entity.  Other options like 'cooking sherry' or 'cream sherry wine' are subtypes of sherry, making FOODON:03543367 the more general and therefore preferable choice for the broad term 'SHERRY'.",
        "candidates_provided": [
            "FOODON:03543367",
            "FOODON:03544370",
            "FOODON:03310760",
            "FOODON:03307295",
            "FOODON:03311061",
            "FOODON:03309465",
            "FOODON:03307359",
            "FOODON:03309014",
            "FOODON:03306470",
            "FOODON:03305083",
            "FOODON:03308509",
            "FOODON:03309466",
            "FOODON:03400849",
            "FOODON:03311457",
            "FOODON:00004218",
            "FOODON:03305658",
            "FOODON:03412484",
            "FOODON:03414297",
            "FOODON:00005230",
            "FOODON:03305150",
            "FOODON:00004637",
            "obo:COB_0000502",
            "FOODON:03302016",
            "FOODON:03301239",
            "FOODON:03308246",
            "FOODON:03412327",
            "FOODON:00003413",
            "FOODON:03302949",
            "FOODON:03301240",
            "PATO:0002127",
            "FOODON:00002478",
            "FOODON:03301242"
        ]
    },
    {
        "query": "PORK",
        "chosen_curie": "FOODON:02021710",
        "true_curies": [
            "NCIT:C45305",
            "FOODON:00001038",
            "CHEBI:60004"
        ],
        "explanation": "While several terms relate to pork, FOODON:02021710, 'piece of pork meat (raw)', offers a good balance of specificity and generality.  It avoids overly specific cuts like 'pork chop' or 'pork steak', and is more precise than the very general 'pork meat'. The inclusion of '(raw)' is a useful detail, though not essential given the user entity's lack of further qualification.",
        "candidates_provided": [
            "FOODON:00004095",
            "FOODON:02021688",
            "FOODON:02021709",
            "FOODON:02021757",
            "FOODON:02021713",
            "FOODON:02021676",
            "FOODON:02000326",
            "FOODON:02000302",
            "FOODON:02000330",
            "FOODON:00002729",
            "FOODON:00003848",
            "FOODON:02000338",
            "FOODON:00004490",
            "FOODON:02021698",
            "FOODON:02021710",
            "FOODON:02021795",
            "FOODON:00004527",
            "FOODON:00005510",
            "FOODON:02021664",
            "FOODON:00005450",
            "FOODON:03302735",
            "FOODON:03311610",
            "FOODON:03310804",
            "FOODON:03317324",
            "FOODON:03311587",
            "FOODON:03306416",
            "FOODON:03310575",
            "FOODON:03310801",
            "FOODON:03311005",
            "FOODON:03317316",
            "FOODON:03317377",
            "FOODON:03306445",
            "FOODON:03311467",
            "FOODON:03317263",
            "FOODON:03309969",
            "FOODON:03310623",
            "FOODON:00001077",
            "FOODON:02021714",
            "FOODON:02021715"
        ]
    },
    {
        "query": "PEANUT BUTTER",
        "chosen_curie": "FOODON:03541415",
        "true_curies": [
            "FOODON:03306867",
            "FOODON:03310351",
            "NCBITaxon:3818",
            "FOODON:00003206"
        ],
        "explanation": "While several terms relate to peanuts or peanut-flavored items, FOODON:03541415 is the most precise match for \"peanut butter.\"  Its label explicitly mentions \"peanut butter\" and its definition encompasses all types of peanut butter, making it the most appropriate choice.",
        "candidates_provided": [
            "FOODON:00003326",
            "FOODON:03311834",
            "FOODON:03541415",
            "FOODON:03544344",
            "FOODON:03302641",
            "FOODON:00003206",
            "FOODON:03301353",
            "FOODON:03311783",
            "FOODON:00003207",
            "FOODON:00003854",
            "FOODON:00003703",
            "FOODON:00003701",
            "FOODON:00003702",
            "FOODON:03400809",
            "FOODON:03309868",
            "FOODON:03306912",
            "FOODON:00003704",
            "FOODON:03311785",
            "FOODON:00003700",
            "FOODON:03000476",
            "FOODON:03306903",
            "FOODON:03306873",
            "FOODON:03315358",
            "FOODON:03306904",
            "FOODON:03306863",
            "FOODON:03306861",
            "FOODON:03306855",
            "FOODON:03302449",
            "FOODON:03306866",
            "FOODON:03304469",
            "FOODON:03306862",
            "FOODON:03302522",
            "FOODON:03306824",
            "FOODON:03303711",
            "FOODON:03302537",
            "FOODON:03310656",
            "FOODON:03302503",
            "FOODON:03306205",
            "FOODON:03302532",
            "FOODON:03307026"
        ]
    },
    {
        "query": "CHOCOLATE",
        "chosen_curie": "FOODON:03543033",
        "true_curies": [
            "FOODON:03307240",
            "NCBITaxon:3641"
        ],
        "explanation": "While several terms relate to chocolate, FOODON:03543033 ('chocolate and chocolate products (efsa foodex2)') offers the broadest and most encompassing definition, aligning with the general user input 'CHOCOLATE' without specifying a particular form or preparation.  Other options are more specific types of chocolate products.",
        "candidates_provided": [
            "FOODON:03400839",
            "FOODON:00002562",
            "FOODON:00003879",
            "FOODON:00003875",
            "FOODON:03400272",
            "FOODON:03400288",
            "FOODON:03400978",
            "FOODON:03400158",
            "FOODON:03000294",
            "FOODON:03460355",
            "FOODON:03000289",
            "FOODON:03000290",
            "FOODON:03543045",
            "FOODON:03543033",
            "FOODON:03543035",
            "FOODON:03000468",
            "FOODON:00003187",
            "FOODON:03544149",
            "FOODON:03543042",
            "FOODON:03543071",
            "FOODON:03307240",
            "FOODON:00001733",
            "FOODON:03303596",
            "FOODON:03460231",
            "FOODON:03301007",
            "FOODON:03315302",
            "FOODON:00001734",
            "FOODON:03303785",
            "FOODON:03316706",
            "FOODON:03303611",
            "FOODON:03310448",
            "FOODON:00001280",
            "FOODON:03316218",
            "FOODON:03305368",
            "FOODON:03302823",
            "FOODON:03316038",
            "FOODON:03316705",
            "FOODON:03306719",
            "FOODON:03311728",
            "FOODON:03303767"
        ]
    },
    {
        "query": "CHEESE SPREAD",
        "chosen_curie": "FOODON:03302988",
        "true_curies": [
            "FOODON:00001873",
            "FOODON:03302019",
            "FOODON:00001013"
        ],
        "explanation": "While several options relate to cheese spreads, FOODON:03302988 ('cold-pack cheese spread') is the most specific and directly addresses the 'CHEESE SPREAD' entity.  Other options are either too general (e.g., 'food spread', 'cheese spread'), or refer to specific types of cheese spreads (e.g., 'pasteurized cheese spread').  FOODON:03302988 is the most precise match available.",
        "candidates_provided": [
            "FOODON:00001873",
            "FOODON:03000485",
            "FOODON:00003868",
            "FOODON:00003865",
            "FOODON:00003867",
            "FOODON:00001013",
            "FOODON:03306275",
            "FOODON:00001033",
            "FOODON:00002960",
            "FOODON:03303675",
            "FOODON:00002421",
            "FOODON:00001754",
            "FOODON:00002425",
            "FOODON:00003933",
            "FOODON:00003863",
            "FOODON:03400115",
            "FOODON:00003860",
            "FOODON:00005585",
            "FOODON:03400266",
            "FOODON:00003841",
            "FOODON:03315643",
            "FOODON:03302019",
            "FOODON:03315608",
            "FOODON:03315063",
            "FOODON:03315644",
            "FOODON:03309371",
            "FOODON:03315638",
            "FOODON:03302988",
            "FOODON:03305272",
            "FOODON:03315192",
            "FOODON:03304807",
            "FOODON:03307846",
            "FOODON:03316027",
            "FOODON:03302885",
            "FOODON:03315639",
            "FOODON:03302567",
            "FOODON:03316584",
            "FOODON:00002090",
            "FOODON:03302985",
            "FOODON:03311122"
        ]
    },
    {
        "query": "CHILI PEPPER",
        "chosen_curie": "FOODON:00003744",
        "true_curies": [
            "FOODON:00003520",
            "FOODON:03301511",
            "FOODON:00003013",
            "FOODON:03309928",
            "FOODON:03317304",
            "FOODON:00001649",
            "FOODON:03315873"
        ],
        "explanation": "FOODON:00003744 ('chili pepper') is the most appropriate term because it is a general term encompassing various chili pepper types.  Other options specify cultivars or preparations (e.g., 'Mosco chili pepper', 'chili pepper (ground)'), while this term accurately reflects the user's broad entity 'CHILI PEPPER'.",
        "candidates_provided": [
            "FOODON:00003744",
            "FOODON:00004856",
            "FOODON:00004858",
            "FOODON:00004857",
            "FOODON:00002736",
            "FOODON:03306680",
            "FOODON:03301511",
            "FOODON:00002747",
            "FOODON:03000126",
            "FOODON:03413722",
            "FOODON:00003013",
            "FOODON:03000242",
            "FOODON:00003546",
            "FOODON:00005303",
            "FOODON:00002994",
            "FOODON:03412564",
            "FOODON:00003798",
            "FOODON:03412563",
            "FOODON:03412561",
            "FOODON:03412551",
            "FOODON:03315873",
            "FOODON:03303355",
            "FOODON:03302033",
            "FOODON:03302554",
            "FOODON:03304583",
            "FOODON:03307447",
            "FOODON:03304000",
            "FOODON:03310079",
            "FOODON:03315435",
            "FOODON:03302030",
            "FOODON:00002117",
            "FOODON:03311265",
            "FOODON:00002109",
            "FOODON:03306738",
            "FOODON:00001955",
            "FOODON:00001935",
            "FOODON:03306728",
            "FOODON:03311515",
            "FOODON:03301526"
        ]
    },
    {
        "query": "DICED",
        "chosen_curie": "FOODON:03430117",
        "true_curies": [
            "NCBITaxon:3435",
            "FOODON:00003600",
            "FOODON:03430115",
            "FOODON:03305236"
        ],
        "explanation": "While FOODON:00004549 ('food (diced)') is a general term, FOODON:03430117 ('medium ground') is more precise and relevant as a technical term in food science indicating a size range, encompassing 'diced'.",
        "candidates_provided": [
            "FOODON:00004549",
            "FOODON:03303374",
            "FOODON:03310846",
            "FOODON:03304885",
            "FOODON:03307350",
            "FOODON:03315074",
            "FOODON:03430115",
            "FOODON:03308714",
            "FOODON:03317505",
            "FOODON:03401668",
            "FOODON:03401665",
            "FOODON:03401660",
            "FOODON:03401683",
            "FOODON:03401661",
            "FOODON:03401666",
            "FOODON:03401679",
            "FOODON:03401542",
            "FOODON:03401685",
            "FOODON:03401674",
            "FOODON:03401663",
            "FOODON:03413821",
            "FOODON:03317415",
            "FOODON:03430106",
            "FOODON:03430122",
            "FOODON:03430136",
            "FOODON:03440014",
            "FOODON:03310752",
            "FOODON:03301404",
            "FOODON:03460154",
            "FOODON:00003342",
            "FOODON:03413958",
            "FOODON:00005241",
            "FOODON:03411860",
            "FOODON:03301247",
            "FOODON:03460188",
            "FOODON:03310889",
            "FOODON:03412411",
            "FOODON:03414615",
            "FOODON:03430117",
            "FOODON:03315686"
        ]
    },
    {
        "query": "CHILLED",
        "chosen_curie": "FOODON:00004725",
        "true_curies": [
            "FOODON:03311552",
            "FOODON:00002642"
        ],
        "explanation": "FOODON:00004725 (chilled) provides the most accurate and general definition of 'chilled' as a temperature characteristic,  unlike other options that specify chilled *food* or chilled subtypes.  While FOODON:00002642 (food (chilled)) is tempting,  FOODON:00004725 is a more fundamental and broadly applicable term, making it the superior choice.",
        "candidates_provided": [
            "FOODON:00002642",
            "FOODON:00004726",
            "FOODON:00004725",
            "FOODON:00004730",
            "FOODON:03317226",
            "FOODON:03305980",
            "FOODON:03317102",
            "FOODON:03317256",
            "FOODON:03317223",
            "FOODON:03317245",
            "FOODON:03315534",
            "FOODON:03311827",
            "FOODON:03305983",
            "FOODON:03311269",
            "PATO:0001985",
            "FOODON:00004727",
            "FOODON:00004729",
            "PATO:0001306",
            "obo:UO_0000005",
            "obo:UO_0000027",
            "FOODON:03470128",
            "FOODON:03470132",
            "obo:UO_1000027",
            "FOODON:00005179",
            "obo:UO_1000195",
            "FOODON:03305490",
            "FOODON:00004728",
            "FOODON:03470131",
            "obo:UO_0000195",
            "FOODON:03470142",
            "FOODON:03460241"
        ]
    },
    {
        "query": "BASIL",
        "chosen_curie": "FOODON:03540878",
        "true_curies": [
            "NCBITaxon:39350",
            "FOODON:00003044"
        ],
        "explanation": "While several terms mention 'basil', FOODON:03540878 is the most appropriate because it specifically refers to the herb Ocimum basilicum without specifying a particular part (leaf, whole plant, etc.), aligning with the user's general input 'BASIL'.  Other options are too specific (e.g., dried basil, basil leaf) or refer to different basil types (e.g., holy basil, Thai basil).",
        "candidates_provided": [
            "FOODON:03000233",
            "FOODON:00003044",
            "FOODON:03301192",
            "FOODON:03000234",
            "FOODON:00003629",
            "FOODON:03000016",
            "FOODON:00004662",
            "FOODON:00004663",
            "NCBITaxon:39350",
            "FOODON:03401570",
            "FOODON:03401585",
            "FOODON:03540878",
            "FOODON:03541263",
            "FOODON:03544198",
            "NCBITaxon:204141",
            "FOODON:03540894",
            "FOODON:03540892",
            "FOODON:03540891",
            "FOODON:03540898",
            "FOODON:03401565",
            "FOODON:03411362",
            "obo:UO_0000045",
            "FOODON:03414877",
            "FOODON:03414850",
            "FOODON:03412490",
            "FOODON:03412035",
            "FOODON:03411910",
            "FOODON:03411764",
            "FOODON:03413884",
            "FOODON:03413993",
            "FOODON:03411682",
            "FOODON:03412181",
            "FOODON:03412421",
            "FOODON:03412043",
            "FOODON:03411788",
            "FOODON:03411627",
            "FOODON:03413894",
            "FOODON:03413687",
            "oboInOwl:hasDbXref",
            "FOODON:03412712"
        ]
    },
    {
        "query": "OYSTERS",
        "chosen_curie": "FOODON:03411224",
        "true_curies": [
            "NCBITaxon:6563"
        ],
        "explanation": "FOODON:03411224 ('oyster') provides a comprehensive definition encompassing various oyster species and differentiating them from related bivalves. While other options mention oysters, this term offers the most precise and informative description of the entity.",
        "candidates_provided": [
            "FOODON:03542529",
            "NCBITaxon:6563",
            "FOODON:03411224",
            "FOODON:03401149",
            "FOODON:03401155",
            "FOODON:03401154",
            "FOODON:03401150",
            "FOODON:03401153",
            "FOODON:03401151",
            "FOODON:03412113",
            "FOODON:03317008",
            "FOODON:03301703",
            "FOODON:00001292",
            "FOODON:03308694",
            "FOODON:03308021",
            "FOODON:03301835",
            "FOODON:03308162",
            "FOODON:03308755",
            "FOODON:03304240",
            "FOODON:03308262",
            "FOODON:03308156",
            "FOODON:03308158",
            "FOODON:03308753",
            "FOODON:03308756",
            "FOODON:03308680",
            "FOODON:03308147",
            "FOODON:03308164",
            "FOODON:03307405",
            "FOODON:02022656"
        ]
    },
    {
        "query": "OYSTER",
        "chosen_curie": "FOODON:03411951",
        "true_curies": [
            "NCBITaxon:94324",
            "NCBITaxon:29159",
            "FOODON:00004003",
            "NCBITaxon:37623",
            "NCBITaxon:6565",
            "NCBITaxon:558553",
            "FOODON:00004004",
            "NCBITaxon:102399",
            "NCBITaxon:74445",
            "NCBITaxon:74433",
            "FOODON:03411224",
            "NCBITaxon:36930",
            "NCBITaxon:627230"
        ],
        "explanation": "While many terms refer to specific types of oysters, FOODON:03411951, 'obsolete: eastern oyster', is the closest match that accounts for the ambiguity of the user input \"OYSTER\".  The term 'oyster' is too general, and many other terms specify preparation methods or species which are not specified by the user. The 'obsolete' status suggests it might be a more general term for oysters that is preferred in some contexts.",
        "candidates_provided": [
            "FOODON:02000379",
            "FOODON:02022511",
            "FOODON:02000380",
            "FOODON:02000386",
            "FOODON:02022512",
            "FOODON:00004929",
            "FOODON:02022510",
            "FOODON:02022513",
            "FOODON:00005379",
            "NCBITaxon:29159",
            "FOODON:00004930",
            "FOODON:00003522",
            "FOODON:03544112",
            "FOODON:02000385",
            "NCBITaxon:558553",
            "FOODON:03411224",
            "FOODON:03542530",
            "FOODON:03542532",
            "FOODON:03542533",
            "FOODON:03542531",
            "FOODON:00001292",
            "FOODON:03317008",
            "FOODON:03301703",
            "FOODON:03308694",
            "FOODON:03308021",
            "FOODON:03301835",
            "FOODON:03308162",
            "FOODON:03308755",
            "FOODON:03304240",
            "FOODON:03308156",
            "FOODON:03308158",
            "FOODON:03308753",
            "FOODON:03308262",
            "FOODON:03308147",
            "FOODON:03307403",
            "FOODON:03308680",
            "FOODON:03308756",
            "FOODON:03411951",
            "FOODON:03308164",
            "FOODON:03316988"
        ]
    },
    {
        "query": "ROCK SALT",
        "chosen_curie": "FOODON:03309954",
        "true_curies": [
            "CHEBI:24866",
            "CHEBI:26710"
        ],
        "explanation": "While CHEBI:24866 (salt) is a general term, FOODON:03309954 (table salt) is more specific and aligns better with the common understanding of \"rock salt\" as a type of table salt.  Other options are either completely unrelated (e.g., rock lobster) or refer to specific types of salts (e.g., iodized salt).  'Table salt' is a commonly used and widely accepted term for the type of salt used in cooking and at tables, encompassing variations like 'rock salt'.",
        "candidates_provided": [
            "FOODON:00002894",
            "FOODON:03400134",
            "CHEBI:24866",
            "obo:CDNO_0200175",
            "CHEBI:50744",
            "CHEBI:50562",
            "CHEBI:190413",
            "CHEBI:190425",
            "CHEBI:190417",
            "CHEBI:190415",
            "CHEBI:190431",
            "CHEBI:190302",
            "CHEBI:190419",
            "CHEBI:190423",
            "CHEBI:190421",
            "CHEBI:190429",
            "CHEBI:190299",
            "CHEBI:24997",
            "CHEBI:190300",
            "CHEBI:190297",
            "CHEBI:24868",
            "FOODON:03309536",
            "FOODON:03309467",
            "CHEBI:46721",
            "CHEBI:24839",
            "FOODON:00002221",
            "FOODON:03306222",
            "FOODON:03305008",
            "CHEBI:35175",
            "FOODON:03315881",
            "CHEBI:36364",
            "CHEBI:35479",
            "FOODON:03309954",
            "CHEBI:51082",
            "FOODON:03303092",
            "CHEBI:33958",
            "FOODON:03315110",
            "CHEBI:51069",
            "FOODON:03315559",
            "FOODON:03309267"
        ]
    },
    {
        "query": "CELERY",
        "chosen_curie": "FOODON:00001704",
        "true_curies": [
            "NCBITaxon:117781",
            "FOODON:03301727"
        ],
        "explanation": "While several terms relate to celery, FOODON:00001704, 'celery food product', is the most encompassing and appropriate.  It covers various forms of celery without specifying a particular part (stalk, leaf, etc.), aligning best with the general user input 'CELERY'.",
        "candidates_provided": [
            "FOODON:00004121",
            "FOODON:00003589",
            "FOODON:00003636",
            "FOODON:03000036",
            "FOODON:00003635",
            "FOODON:00003411",
            "FOODON:03310560",
            "FOODON:00001705",
            "FOODON:00001704",
            "FOODON:03301727",
            "FOODON:03411729",
            "FOODON:03401857",
            "FOODON:03401574",
            "FOODON:03543210",
            "FOODON:03540832",
            "FOODON:03541296",
            "FOODON:03541266",
            "FOODON:03541297",
            "FOODON:00003034",
            "FOODON:03540833",
            "FOODON:00004123",
            "FOODON:03303374",
            "FOODON:03311578",
            "FOODON:03411634",
            "FOODON:03412030",
            "FOODON:03315875",
            "FOODON:03305224",
            "FOODON:03411282",
            "FOODON:03301862",
            "FOODON:03316493",
            "FOODON:03315289",
            "FOODON:00003040",
            "FOODON:03301221",
            "FOODON:03315615",
            "FOODON:03420138",
            "FOODON:03316531",
            "FOODON:03302922",
            "FOODON:03316217",
            "FOODON:03315176"
        ]
    },
    {
        "query": "CUCUMBERS",
        "chosen_curie": "FOODON:00003005",
        "true_curies": [
            "NCBITaxon:3659"
        ],
        "explanation": "While several options refer to cucumbers, FOODON:00003005, \"pickled cucumber\", is the most specific and accurate if considering the broadest possible interpretation of \"cucumbers.\"  Other options specify types of cucumbers (e.g., Armenian cucumbers, gherkins) or preparation methods (e.g., raw, canned), whereas \"pickled cucumber\" encompasses a wide range of cucumber preparations.  The terms 'cucumber' (FOODON:00003415) or 'cucumber (whole or pieces)' (FOODON:03000229) are too general and lack the specificity of the chosen term.  Therefore,  FOODON:00003005 offers a good balance between specificity and coverage, representing a general 'cucumber' category while also allowing for more granular specifications when necessary",
        "candidates_provided": [
            "FOODON:03540669",
            "FOODON:03540670",
            "FOODON:03542572",
            "FOODON:03401521",
            "FOODON:03540671",
            "FOODON:03310480",
            "FOODON:00001795",
            "FOODON:03401371",
            "NCBITaxon:3659",
            "NCBITaxon:7705",
            "FOODON:03401695",
            "FOODON:03401520",
            "FOODON:03401522",
            "FOODON:03411719",
            "FOODON:00001793",
            "FOODON:00003005",
            "FOODON:03412115",
            "FOODON:03544024",
            "FOODON:03540672",
            "FOODON:03411231",
            "FOODON:03301545",
            "FOODON:03306754",
            "FOODON:00001794",
            "FOODON:00003415",
            "FOODON:03302744",
            "FOODON:03000229",
            "FOODON:03000106",
            "NCBITaxon:3655",
            "NCBITaxon:3650",
            "FOODON:03411404",
            "FOODON:03301146",
            "FOODON:03414459",
            "FOODON:00004884",
            "NCBITaxon:28832",
            "FOODON:03310117"
        ]
    },
    {
        "query": "CAULIFLOWER",
        "chosen_curie": "FOODON:00001703",
        "true_curies": [
            "NCIT:C45305",
            "NCBITaxon:3715",
            "FOODON:03302732",
            "CHEBI:60004",
            "FOODON:00003410"
        ],
        "explanation": "While several options mention \"cauliflower\", FOODON:00001703, \"cauliflower food product\", is the most encompassing and appropriate term.  It avoids specifying a particular form (floret, raw, etc.) and covers the broadest range of cauliflower-derived food products. Options like \"cauliflower floret\" are too specific, while others represent preparations or parts of the plant (leaf).",
        "candidates_provided": [
            "FOODON:00003410",
            "FOODON:03000057",
            "FOODON:00001703",
            "FOODON:00003767",
            "FOODON:00003634",
            "FOODON:03000058",
            "FOODON:03310181",
            "FOODON:03302732",
            "FOODON:03414184",
            "FOODON:03316393",
            "FOODON:03411094",
            "FOODON:03311755",
            "FOODON:03305392",
            "FOODON:03412600",
            "FOODON:03303377",
            "FOODON:03303344",
            "FOODON:03414554",
            "FOODON:03301394",
            "FOODON:03316744",
            "FOODON:03310105",
            "FOODON:03411579",
            "FOODON:00001702",
            "FOODON:03311166",
            "NCBITaxon:3822",
            "FOODON:03412011"
        ]
    },
    {
        "query": "TUNA",
        "chosen_curie": "FOODON:03542417",
        "true_curies": [
            "NCBITaxon:8235",
            "NCBITaxon:8237",
            "NCBITaxon:13353",
            "NCBITaxon:48168",
            "NCBITaxon:48169",
            "NCBITaxon:217026",
            "NCBITaxon:8238",
            "NCBITaxon:8240",
            "NCBITaxon:8227",
            "FOODON:03411269",
            "NCBITaxon:320457",
            "NCBITaxon:507566",
            "NCBITaxon:8226",
            "NCBITaxon:8241"
        ],
        "explanation": "While NCBITaxon:8236 lists 'tuna' as a synonym, FOODON:03542417 is preferred because it's a FOODON term and represents the broader concept of tuna encompassing various species.  Other FOODON terms are more specific cuts or preparations of tuna. This term, despite being generic, best captures the user's intent when mentioning \"TUNA\" without qualification.",
        "candidates_provided": [
            "FOODON:00002987",
            "FOODON:00002985",
            "FOODON:00002742",
            "FOODON:03601059",
            "FOODON:00002371",
            "NCBITaxon:8236",
            "FOODON:00002397",
            "FOODON:03411269",
            "FOODON:03542417",
            "FOODON:03542426",
            "FOODON:03542420",
            "FOODON:03542419",
            "FOODON:03542424",
            "FOODON:03542427",
            "FOODON:03542425",
            "FOODON:03542421",
            "FOODON:03542422",
            "FOODON:03542423",
            "FOODON:03542413",
            "FOODON:00001578",
            "FOODON:00002320",
            "FOODON:03411120",
            "FOODON:03411070",
            "FOODON:03305444",
            "FOODON:03413992",
            "FOODON:03309019",
            "FOODON:03411004",
            "FOODON:00001658",
            "FOODON:03411074",
            "FOODON:03308716",
            "FOODON:03308730",
            "FOODON:03412891",
            "FOODON:03308451",
            "FOODON:03308452",
            "FOODON:00002009",
            "FOODON:03310037",
            "FOODON:03309625",
            "FOODON:03308907",
            "FOODON:03308447"
        ]
    },
    {
        "query": "YOLK",
        "chosen_curie": "FOODON:03542967",
        "true_curies": [
            "FOODON:03315772"
        ],
        "explanation": "While several terms refer to specific animal egg yolks, FOODON:03542967 ('egg yolk (efsa foodex2)') provides the broadest, most general definition encompassing all types of egg yolks.  The definition explicitly states it is the fatty part of an egg. Other options are more specific (e.g., chicken egg yolk) or refer to a processed form of yolk (e.g., dried yolk).  Therefore, this term best matches the user's unspecific 'YOLK' entity.",
        "candidates_provided": [
            "FOODON:02020411",
            "FOODON:02020782",
            "FOODON:02020381",
            "FOODON:02020157",
            "FOODON:02020121",
            "FOODON:02020727",
            "FOODON:02010009",
            "FOODON:03315772",
            "FOODON:02010010",
            "FOODON:02020783",
            "FOODON:02020158",
            "FOODON:00004427",
            "FOODON:02020382",
            "FOODON:02020728",
            "FOODON:02020412",
            "FOODON:00004705",
            "FOODON:03542967",
            "FOODON:03542974",
            "FOODON:03542968",
            "FOODON:03544256",
            "FOODON:03309602",
            "FOODON:03316668",
            "FOODON:03307445",
            "FOODON:00001017",
            "FOODON:03307442",
            "FOODON:03311385",
            "FOODON:03301502",
            "FOODON:03305085",
            "FOODON:03315408",
            "FOODON:03315409",
            "FOODON:03307444",
            "FOODON:03317605",
            "FOODON:03307443",
            "FOODON:03317240",
            "FOODON:00004409",
            "FOODON:03307424",
            "FOODON:03304626",
            "FOODON:00001881",
            "FOODON:03315048"
        ]
    },
    {
        "query": "ITALIAN SAUSAGE",
        "chosen_curie": "FOODON:03317279",
        "true_curies": [
            "FOODON:03315904",
            "HANCESTRO:0307",
            "FOODON:03317294"
        ],
        "explanation": "While FOODON:03317294 ('italian sausage') is a closer label match, FOODON:03317279 ('italian sausage (raw)') offers more specificity.  'Italian sausage' is a broad category, and the raw specification is valuable information. Other options like 'pork sausage' or 'meat sausage' are too general.",
        "candidates_provided": [
            "FOODON:03542145",
            "FOODON:00002729",
            "FOODON:00002958",
            "FOODON:03315904",
            "FOODON:00003297",
            "FOODON:03317294",
            "FOODON:00005533",
            "FOODON:00001221",
            "FOODON:00001222",
            "FOODON:00001220",
            "FOODON:03305334",
            "FOODON:00003813",
            "FOODON:00002947",
            "FOODON:00001223",
            "FOODON:00001219",
            "FOODON:00004321",
            "FOODON:03317279",
            "FOODON:00001605",
            "FOODON:00001224",
            "FOODON:00001007",
            "FOODON:03304204",
            "HANCESTRO:0307",
            "FOODON:03303438",
            "FOODON:03303886",
            "FOODON:03303447",
            "FOODON:03304014",
            "FOODON:03307609",
            "FOODON:03309560",
            "FOODON:03310353",
            "FOODON:03317419",
            "FOODON:03303160",
            "FOODON:03304720",
            "FOODON:03310211",
            "FOODON:03304830",
            "FOODON:03310772",
            "FOODON:03306312",
            "FOODON:03306347"
        ]
    },
    {
        "query": "EGG WHITE",
        "chosen_curie": "FOODON:02020155",
        "true_curies": [
            "NCIT:C45305",
            "UBERON:0008944",
            "FOODON:03304840",
            "HANCESTRO:0005",
            "PATO:0000323",
            "CHEBI:60004"
        ],
        "explanation": "While FOODON:02020001 (animal egg white) is a broader term,  FOODON:02020155 (chicken egg white) is a more specific and likely the intended meaning when a user simply says \"EGG WHITE.\"  Chicken eggs are the most commonly consumed type of egg.  The other specific egg white terms (quail, goose, duck, turkey, ostrich) are less common.",
        "candidates_provided": [
            "FOODON:02020725",
            "FOODON:02020155",
            "FOODON:02020379",
            "FOODON:02020001",
            "FOODON:02020120",
            "FOODON:02020409",
            "FOODON:02020780",
            "FOODON:02020726",
            "FOODON:02020156",
            "FOODON:00004426",
            "FOODON:02020781",
            "FOODON:02020410",
            "FOODON:02020002",
            "FOODON:02020380",
            "FOODON:00004704",
            "FOODON:03316061",
            "FOODON:00004270",
            "FOODON:00004269",
            "FOODON:00002802",
            "FOODON:00002801",
            "FOODON:03315181",
            "FOODON:03310224",
            "FOODON:03310235",
            "FOODON:00002798",
            "FOODON:03304722",
            "FOODON:03310225",
            "FOODON:03311326",
            "FOODON:03310155",
            "FOODON:03305612",
            "FOODON:03304799",
            "FOODON:03315743",
            "FOODON:03304736",
            "FOODON:03315738",
            "FOODON:03302720",
            "FOODON:03420274",
            "FOODON:03309503",
            "FOODON:03316922",
            "FOODON:03304501"
        ]
    },
    {
        "query": "PEPPER",
        "chosen_curie": "FOODON:00003546",
        "true_curies": [
            "NCIT:C45305",
            "CHEBI:60004",
            "FOODON:00003013",
            "FOODON:03309928",
            "FOODON:00003520",
            "FOODON:00001649"
        ],
        "explanation": "While several terms use \"pepper\" in their label or synonyms, FOODON:00003546, 'bell pepper', offers the most precise and unambiguous match for the user's input 'PEPPER'.  It encompasses the broad category of bell peppers without specifying a color or pungency level, aligning best with the general term 'PEPPER' which can refer to various bell pepper types.",
        "candidates_provided": [
            "FOODON:00003013",
            "FOODON:03000242",
            "FOODON:00003546",
            "FOODON:00003798",
            "FOODON:00003744",
            "FOODON:03000126",
            "FOODON:03412632",
            "FOODON:00003547",
            "FOODON:00003548",
            "FOODON:00003550",
            "FOODON:00003485",
            "FOODON:00003520",
            "FOODON:03412628",
            "FOODON:03000249",
            "FOODON:00005363",
            "FOODON:00004856",
            "FOODON:03000128",
            "FOODON:00003545",
            "FOODON:03309928",
            "FOODON:00004853",
            "FOODON:03301526",
            "FOODON:00002109",
            "FOODON:03301105",
            "FOODON:03315873",
            "FOODON:00002117",
            "FOODON:03413458",
            "FOODON:03310070",
            "FOODON:00001935",
            "FOODON:03306722",
            "FOODON:03306728",
            "FOODON:00002191",
            "FOODON:00001649",
            "FOODON:03302033",
            "FOODON:03304289",
            "FOODON:00001955",
            "FOODON:03315875",
            "FOODON:03306738",
            "FOODON:03302554",
            "FOODON:03306727"
        ]
    },
    {
        "query": "SAUCE",
        "chosen_curie": "FOODON:03315781",
        "true_curies": [
            "FOODON:03311146",
            "NCIT:C45305",
            "CHEBI:60004"
        ],
        "explanation": "The term 'sauce (unstandardized)' (FOODON:03315781) is the most appropriate because the user entity 'SAUCE' is a very broad category encompassing numerous specific types of sauces.  While many other options list specific sauces, this term best reflects the generality and lack of specification in the user's input.",
        "candidates_provided": [
            "FOODON:00003259",
            "FOODON:03306786",
            "FOODON:00002526",
            "FOODON:00003232",
            "FOODON:03400863",
            "FOODON:00005513",
            "FOODON:03400862",
            "FOODON:03400263",
            "FOODON:03304206",
            "FOODON:03304888",
            "FOODON:03480034",
            "FOODON:00003236",
            "FOODON:00004312",
            "FOODON:03544116",
            "FOODON:03400286",
            "FOODON:00003295",
            "FOODON:03544125",
            "FOODON:03544124",
            "FOODON:03544120",
            "FOODON:00003870",
            "FOODON:03316286",
            "FOODON:03316041",
            "FOODON:03316040",
            "FOODON:03315781",
            "FOODON:03312058",
            "FOODON:03309559",
            "FOODON:03304022",
            "FOODON:03311146",
            "FOODON:03315016",
            "FOODON:03302062",
            "FOODON:03309619",
            "FOODON:03304054",
            "FOODON:03317524",
            "FOODON:03304024",
            "FOODON:03310470",
            "FOODON:03309556",
            "FOODON:03304580",
            "FOODON:03310703",
            "FOODON:03311704",
            "FOODON:03303886"
        ]
    },
    {
        "query": "WHITE CORN",
        "chosen_curie": "FOODON:03309775",
        "true_curies": [
            "FOODON:03303225",
            "HANCESTRO:0005",
            "PATO:0000323",
            "NCBITaxon:381124",
            "FOODON:03303201",
            "FOODON:03301061",
            "FOODON:00003783"
        ],
        "explanation": "While several terms mention 'white corn', FOODON:03309775, 'white corn grits', is a more specific and refined term than others like 'white corn' (which is too broad and lacks a definition) or 'white sweet corn kernel' (which implies a specific type of white corn).  The lack of definitions for many candidates makes this the most informed choice among defined candidates, though an ideal ontology would have more complete definitions for all terms. The absence of a definition for FOODON:03309775 does not disqualify it because it still represents a specific processed form of white corn, which is preferable to the excessive generality of other options.",
        "candidates_provided": [
            "FOODON:00003783",
            "FOODON:03303201",
            "FOODON:00003782",
            "FOODON:00003562",
            "FOODON:00005529",
            "FOODON:00001845",
            "FOODON:00003785",
            "FOODON:00003781",
            "FOODON:00002845",
            "FOODON:00003873",
            "FOODON:00003762",
            "FOODON:03301422",
            "FOODON:00001572",
            "FOODON:00005021",
            "FOODON:00005024",
            "FOODON:00005030",
            "FOODON:00005027",
            "FOODON:00005447",
            "FOODON:00005571",
            "FOODON:03302904",
            "FOODON:03309766",
            "FOODON:03305430",
            "FOODON:03411597",
            "FOODON:03309775",
            "FOODON:03317387",
            "FOODON:03411577",
            "FOODON:03311288",
            "FOODON:03310833",
            "FOODON:03316845",
            "FOODON:03302733",
            "FOODON:03317234",
            "FOODON:03317233",
            "FOODON:03311001",
            "FOODON:03311612",
            "FOODON:03310986",
            "FOODON:03310640",
            "FOODON:03302731",
            "FOODON:03301388"
        ]
    },
    {
        "query": "YOLK",
        "chosen_curie": "FOODON:03542967",
        "true_curies": [
            "NCIT:C45305",
            "CHEBI:60004",
            "FOODON:03315772"
        ],
        "explanation": "While several terms refer to specific animal egg yolks, FOODON:03542967, 'egg yolk (efsa foodex2)', is the most appropriate. It encompasses all types of egg yolks without specifying the animal source, aligning with the broad, unspecified nature of the user's input 'YOLK'.  More specific terms are less suitable as 'YOLK' doesn't inherently imply a specific animal origin.",
        "candidates_provided": [
            "FOODON:02020411",
            "FOODON:02020782",
            "FOODON:02020381",
            "FOODON:02020157",
            "FOODON:02020121",
            "FOODON:02020727",
            "FOODON:02010009",
            "FOODON:03315772",
            "FOODON:02010010",
            "FOODON:02020783",
            "FOODON:02020158",
            "FOODON:00004427",
            "FOODON:02020382",
            "FOODON:02020728",
            "FOODON:02020412",
            "FOODON:00004705",
            "FOODON:03542967",
            "FOODON:03542974",
            "FOODON:03542968",
            "FOODON:03544256",
            "FOODON:03309602",
            "FOODON:03316668",
            "FOODON:03307445",
            "FOODON:00001017",
            "FOODON:03307442",
            "FOODON:03311385",
            "FOODON:03301502",
            "FOODON:03305085",
            "FOODON:03315408",
            "FOODON:03315409",
            "FOODON:03307444",
            "FOODON:03317605",
            "FOODON:03307443",
            "FOODON:03317240",
            "FOODON:00004409",
            "FOODON:03307424",
            "FOODON:03304626",
            "FOODON:00001881",
            "FOODON:03315048"
        ]
    },
    {
        "query": "KALE",
        "chosen_curie": "FOODON:03411281",
        "true_curies": [
            "FOODON:03304859",
            "NCBITaxon:3713"
        ],
        "explanation": "While several options mention 'kale', FOODON:03411281 provides the most comprehensive definition, encompassing various kale types and its botanical classification (Brassica oleracea).  This makes it the most suitable overarching term for 'kale' without specifying a particular cultivar or preparation.",
        "candidates_provided": [
            "FOODON:03000235",
            "FOODON:03000236",
            "FOODON:00003506",
            "FOODON:00004642",
            "FOODON:00003532",
            "FOODON:00003173",
            "FOODON:00003501",
            "FOODON:00004671",
            "FOODON:03413376",
            "FOODON:00001981",
            "FOODON:03000113",
            "FOODON:03000114",
            "FOODON:00004672",
            "FOODON:00004643",
            "FOODON:03411281",
            "FOODON:03304859",
            "FOODON:00003442",
            "FOODON:03401461",
            "FOODON:03540492",
            "FOODON:03415025",
            "obo:AfPO_0000436",
            "FOODON:03311034",
            "FOODON:03412237",
            "FOODON:03413375",
            "FOODON:03413720",
            "FOODON:03420276",
            "FOODON:03412011",
            "FOODON:03317415",
            "obo:AfPO_0000263",
            "FOODON:03311634",
            "FOODON:03414851",
            "FOODON:00002895",
            "FOODON:03411279",
            "FOODON:03411546",
            "FOODON:03317457"
        ]
    },
    {
        "query": "CHILLED",
        "chosen_curie": "FOODON:00004725",
        "true_curies": [
            "NCIT:C45305",
            "CHEBI:60004",
            "FOODON:00002642"
        ],
        "explanation": "FOODON:00004725 ('chilled') is the most appropriate term because it directly defines 'chilled' as a temperature characteristic, unlike other options that specify chilled *food* or other specific chilled items.  It provides a general, accurate definition of the term without unnecessary specificity.",
        "candidates_provided": [
            "FOODON:00002642",
            "FOODON:00004726",
            "FOODON:00004725",
            "FOODON:00004730",
            "FOODON:03317226",
            "FOODON:03305980",
            "FOODON:03317102",
            "FOODON:03317256",
            "FOODON:03317223",
            "FOODON:03317245",
            "FOODON:03315534",
            "FOODON:03311827",
            "FOODON:03305983",
            "FOODON:03311269",
            "PATO:0001985",
            "FOODON:00004727",
            "FOODON:00004729",
            "PATO:0001306",
            "obo:UO_0000005",
            "obo:UO_0000027",
            "FOODON:03470128",
            "FOODON:03470132",
            "obo:UO_1000027",
            "FOODON:00005179",
            "obo:UO_1000195",
            "FOODON:03305490",
            "FOODON:00004728",
            "FOODON:03470131",
            "obo:UO_0000195",
            "FOODON:03470142",
            "FOODON:03460241"
        ]
    },
    {
        "query": "FLOUR",
        "chosen_curie": "FOODON:00004512",
        "true_curies": [
            "NCIT:C45305",
            "CHEBI:60004",
            "FOODON:03301116"
        ],
        "explanation": "While FOODON:00004510 is a more general term for 'flour', FOODON:00004512 ('00 white wheat flour') provides more specificity.  The user's input 'FLOUR' is too general to warrant the broad 'flour' term; therefore, a specific flour type is preferred.",
        "candidates_provided": [
            "FOODON:03302142",
            "FOODON:03304488",
            "FOODON:03601071",
            "FOODON:00004512",
            "FOODON:00002553",
            "FOODON:03311459",
            "FOODON:00002207",
            "FOODON:00004506",
            "FOODON:00003355",
            "FOODON:00004721",
            "FOODON:00004104",
            "FOODON:00004510",
            "FOODON:00003605",
            "FOODON:00004507",
            "FOODON:00004511",
            "FOODON:03304487",
            "FOODON:00005500",
            "FOODON:00001056",
            "FOODON:00003353",
            "FOODON:00003317",
            "FOODON:00003342",
            "FOODON:03530140",
            "FOODON:03315176",
            "FOODON:03530143",
            "FOODON:00002140",
            "FOODON:03530138",
            "FOODON:03301120",
            "FOODON:03309292",
            "FOODON:03304022",
            "FOODON:03305224",
            "FOODON:03411634",
            "FOODON:03412030",
            "FOODON:03412421",
            "FOODON:03530142",
            "FOODON:03317665",
            "FOODON:03412043",
            "FOODON:03315289",
            "FOODON:03303387",
            "FOODON:03414361",
            "FOODON:03411446"
        ]
    },
    {
        "query": "SWISS CHEESE",
        "chosen_curie": "FOODON:00001032",
        "true_curies": [
            "HANCESTRO:0394",
            "FOODON:00001013",
            "FOODON:03303659"
        ],
        "explanation": "While several terms relate to cheese, FOODON:00001032, 'swiss cheese food product', is the most appropriate.  It specifically mentions Swiss cheese and its production process,  unlike the more general 'cheese food product' or other specific cheese types.  Terms like 'emmental cheese' are close but 'swiss cheese' is the common name of the cheese in question.",
        "candidates_provided": [
            "FOODON:00003632",
            "FOODON:00001032",
            "FOODON:00003868",
            "FOODON:00003865",
            "FOODON:00003867",
            "FOODON:00001013",
            "FOODON:03306275",
            "FOODON:00001033",
            "FOODON:00002960",
            "FOODON:03303675",
            "FOODON:00003631",
            "FOODON:00002421",
            "FOODON:00002425",
            "FOODON:00003933",
            "FOODON:00003863",
            "FOODON:03303659",
            "FOODON:03400115",
            "FOODON:00003860",
            "FOODON:00003841",
            "FOODON:03303867",
            "FOODON:03303540",
            "FOODON:03316874",
            "FOODON:03316710",
            "FOODON:03303550",
            "FOODON:03303000",
            "FOODON:03316656",
            "FOODON:03302991",
            "FOODON:03303548",
            "FOODON:03304807",
            "FOODON:03304494",
            "FOODON:03316613",
            "FOODON:00002231",
            "FOODON:03316148",
            "FOODON:03316584",
            "FOODON:00001945",
            "FOODON:03305272",
            "FOODON:00002230",
            "FOODON:03316644"
        ]
    },
    {
        "query": "CRAB",
        "chosen_curie": "FOODON:02021446",
        "true_curies": [
            "NCIT:C45305",
            "CHEBI:60004",
            "FOODON:03411335"
        ],
        "explanation": "While several terms relate to parts of a crab or crab meat, \"FOODON:02021446\" (crab) is the most appropriate as it represents the whole entity.  Other options are parts of a crab, or specify types of crabs. \"crab\" is the most general and encompassing term for the user's input.",
        "candidates_provided": [
            "FOODON:02021450",
            "FOODON:02021447",
            "FOODON:02021785",
            "FOODON:02021448",
            "FOODON:02021446",
            "FOODON:02021451",
            "FOODON:00002677",
            "FOODON:02021449",
            "FOODON:02021865",
            "FOODON:02021863",
            "FOODON:02021445",
            "FOODON:02021862",
            "FOODON:03301081",
            "FOODON:02021866",
            "FOODON:02021861",
            "FOODON:03412228",
            "FOODON:02021444",
            "FOODON:03412220",
            "FOODON:02021864",
            "FOODON:00002885",
            "FOODON:03411335",
            "FOODON:03412217",
            "FOODON:03413615",
            "FOODON:03411961",
            "FOODON:03317237",
            "FOODON:03412128",
            "FOODON:03413555",
            "FOODON:03411180",
            "FOODON:03311030",
            "FOODON:03412350",
            "FOODON:03412216",
            "FOODON:03413474",
            "FOODON:00002247",
            "FOODON:03308599",
            "FOODON:03303182",
            "FOODON:03413561",
            "FOODON:00001789",
            "FOODON:00001785",
            "FOODON:03311028"
        ]
    },
    {
        "query": "CHOPPED",
        "chosen_curie": "FOODON:00002777",
        "true_curies": [
            "FOODON:03430125",
            "FOODON:03306632"
        ],
        "explanation": "While many terms include 'chopped' in their label, FOODON:00002777, 'food (chopped)', is the most general and appropriate term.  Other options specify a particular food type (e.g., meat, liver, beef), while 'food (chopped)' accurately reflects the user's entity as a general action applied to unspecified food material.",
        "candidates_provided": [
            "FOODON:00004279",
            "FOODON:00002777",
            "FOODON:00004119",
            "FOODON:03301881",
            "FOODON:03430125",
            "FOODON:03317335",
            "FOODON:03316399",
            "FOODON:03301880",
            "FOODON:03316397",
            "FOODON:03306437",
            "FOODON:03307082",
            "FOODON:03311056",
            "FOODON:00005592",
            "FOODON:00004696",
            "FOODON:03307353",
            "FOODON:03311272",
            "FOODON:03306490",
            "FOODON:03305812",
            "FOODON:03311688",
            "FOODON:03311083",
            "FOODON:03430145",
            "FOODON:03430137",
            "FOODON:03430115",
            "FOODON:03430124",
            "FOODON:03430111",
            "FOODON:03430141",
            "FOODON:03430107",
            "FOODON:03530106",
            "FOODON:03530040",
            "FOODON:03530104",
            "FOODON:03530105",
            "FOODON:03530252",
            "FOODON:03530047",
            "FOODON:03530048",
            "FOODON:03430122",
            "FOODON:03304169",
            "FOODON:03430136",
            "FOODON:03530139",
            "FOODON:03413958"
        ]
    },
    {
        "query": "MOLASSES",
        "chosen_curie": "FOODON:03543001",
        "true_curies": [
            "CHEBI:83163"
        ],
        "explanation": "FOODON:03543001 ('molasses (efsa foodex2)') is the best match because it provides a general definition of molasses encompassing various sources, aligning with the broad nature of the user's input 'MOLASSES'.  While other options specify molasses from particular sources (e.g., sugarcane, beet), the user didn't specify a source.  CHEBI:83163 is a good chemical definition but lacks the food-focused context of FOODON:03543001.  Other FOODON IDs are either obsolete, too specific (e.g., molasses cookie), or refer to related but distinct entities (e.g., muscovado).",
        "candidates_provided": [
            "FOODON:03543005",
            "FOODON:03543004",
            "FOODON:03543001",
            "FOODON:03543003",
            "FOODON:03543002",
            "FOODON:03543000",
            "CHEBI:83163",
            "FOODON:03400984",
            "FOODON:03301349",
            "FOODON:03306213",
            "FOODON:03303104",
            "FOODON:03315859",
            "FOODON:03303166",
            "FOODON:03315858",
            "FOODON:03315857",
            "FOODON:03306211",
            "FOODON:03460156",
            "FOODON:00002539",
            "FOODON:03315751",
            "FOODON:00002847",
            "FOODON:03412847",
            "FOODON:03414562",
            "FOODON:03530138",
            "FOODON:03414361",
            "FOODON:03412853",
            "FOODON:03412698",
            "FOODON:03500053",
            "FOODON:03301120",
            "FOODON:03412035",
            "IAO:0000600",
            "FOODON:03414005",
            "FOODON:03420220",
            "FOODON:00003342",
            "FOODON:03309195",
            "FOODON:03414367",
            "rdfs:label"
        ]
    },
    {
        "query": "EGG WHITE",
        "chosen_curie": "FOODON:02020155",
        "true_curies": [
            "UBERON:0008944",
            "PATO:0000323",
            "FOODON:03304840",
            "HANCESTRO:0005"
        ],
        "explanation": "While FOODON:02020001 (animal egg white) is a broader category encompassing the user entity, FOODON:02020155 (chicken egg white) is a more specific and therefore preferable match given that 'egg white' without further specification most commonly refers to chicken eggs.",
        "candidates_provided": [
            "FOODON:02020725",
            "FOODON:02020155",
            "FOODON:02020379",
            "FOODON:02020001",
            "FOODON:02020120",
            "FOODON:02020409",
            "FOODON:02020780",
            "FOODON:02020726",
            "FOODON:02020156",
            "FOODON:00004426",
            "FOODON:02020781",
            "FOODON:02020410",
            "FOODON:02020002",
            "FOODON:02020380",
            "FOODON:00004704",
            "FOODON:03316061",
            "FOODON:00004270",
            "FOODON:00004269",
            "FOODON:00002802",
            "FOODON:00002801",
            "FOODON:03315181",
            "FOODON:03310224",
            "FOODON:03310235",
            "FOODON:00002798",
            "FOODON:03304722",
            "FOODON:03310225",
            "FOODON:03311326",
            "FOODON:03310155",
            "FOODON:03305612",
            "FOODON:03304799",
            "FOODON:03315743",
            "FOODON:03304736",
            "FOODON:03315738",
            "FOODON:03302720",
            "FOODON:03420274",
            "FOODON:03309503",
            "FOODON:03316922",
            "FOODON:03304501"
        ]
    },
    {
        "query": "FISH",
        "chosen_curie": "FOODON:00003594",
        "true_curies": [
            "FOODON:03411222",
            "NCBITaxon:7898",
            "NCBITaxon:7777"
        ],
        "explanation": "While several terms relate to fish, FOODON:00003594 ('fish meat') is the most general and encompassing term representing the flesh of a fish, aligning best with the broad, unspecified nature of the user's input 'FISH'.",
        "candidates_provided": [
            "FOODON:00002986",
            "FOODON:00003594",
            "FOODON:03315446",
            "FOODON:00004502",
            "FOODON:00004283",
            "FOODON:00004317",
            "FOODON:00002679",
            "FOODON:03413361",
            "FOODON:03413362",
            "FOODON:00004319",
            "FOODON:00001248",
            "ENVO:00000295",
            "FOODON:03302926",
            "FOODON:03308391",
            "ENVO:00000294",
            "FOODON:03301620",
            "FOODON:03317675",
            "FOODON:00004318",
            "FOODON:03600002",
            "FOODON:03411601",
            "FOODON:00001249",
            "FOODON:03411365",
            "FOODON:03308389",
            "FOODON:03317241",
            "FOODON:03301077",
            "FOODON:03411164",
            "FOODON:03315445",
            "FOODON:00002445",
            "FOODON:03301156",
            "FOODON:00001634",
            "FOODON:00001236",
            "FOODON:03311223",
            "FOODON:00001684",
            "FOODON:03315534",
            "FOODON:03308602",
            "FOODON:00002216",
            "FOODON:03317384",
            "FOODON:03411592",
            "FOODON:03301170",
            "FOODON:00002113"
        ]
    },
    {
        "query": "PIZZA CRUST",
        "chosen_curie": "FOODON:03400167",
        "true_curies": [
            "FOODON:03317327",
            "FOODON:00003928"
        ],
        "explanation": "While several terms relate to pizza, FOODON:03400167, 'pizza crust (us cfr)', is the only one that specifically and directly names the provided entity, \"PIZZA CRUST\".  Other terms describe complete pizzas or pizza dough, but not the crust in isolation.",
        "candidates_provided": [
            "FOODON:00003928",
            "FOODON:03400167",
            "FOODON:03400160",
            "FOODON:00003936",
            "FOODON:00003937",
            "FOODON:00003931",
            "FOODON:00003933",
            "FOODON:00003934",
            "FOODON:03306973",
            "FOODON:00003932",
            "FOODON:03317327",
            "FOODON:00003929",
            "FOODON:03306786",
            "FOODON:00003930",
            "FOODON:00003935",
            "FOODON:03301563",
            "FOODON:03400140",
            "FOODON:03543932",
            "FOODON:03540139",
            "FOODON:03540200",
            "FOODON:03310775",
            "FOODON:03311389",
            "FOODON:03311484",
            "FOODON:03311539",
            "FOODON:03302031",
            "FOODON:03309492",
            "FOODON:03305390",
            "FOODON:03307629",
            "FOODON:03306792",
            "FOODON:03306773",
            "FOODON:03310601",
            "FOODON:03310587",
            "FOODON:03307756",
            "FOODON:03306788",
            "FOODON:03306789",
            "FOODON:03310705"
        ]
    },
    {
        "query": "BROCCOLI",
        "chosen_curie": "FOODON:03411443",
        "true_curies": [
            "FOODON:00003405",
            "NCBITaxon:36774",
            "FOODON:03301713"
        ],
        "explanation": "While several terms refer to parts of a broccoli plant (florets, stalks, sprouts, leaves), FOODON:03411443, 'broccoli plant', is the most encompassing and appropriate term for the user entity 'BROCCOLI'.  It encompasses all the other options, representing the whole plant and its edible parts, making it the best overall match.",
        "candidates_provided": [
            "FOODON:00003405",
            "FOODON:00005355",
            "FOODON:00002989",
            "FOODON:00004834",
            "FOODON:03000046",
            "FOODON:03000048",
            "FOODON:03000047",
            "FOODON:03000045",
            "FOODON:03310180",
            "FOODON:03411443",
            "FOODON:03301713",
            "FOODON:00004835",
            "FOODON:00004836",
            "FOODON:03540524",
            "FOODON:03540525",
            "FOODON:03401453",
            "FOODON:03540504",
            "FOODON:03540527",
            "FOODON:03311420",
            "FOODON:03301384",
            "FOODON:00001666",
            "FOODON:03309604",
            "NCBITaxon:36774",
            "FOODON:03414945",
            "FOODON:03000056",
            "FOODON:03414921"
        ]
    },
    {
        "query": "SAUSAGE MEAT",
        "chosen_curie": "FOODON:03400798",
        "true_curies": [
            "FOODON:03315904",
            "FOODON:03317646"
        ],
        "explanation": "FOODON:03400798 (sausage or similar meat product (eurofir)) is the best match because its definition explicitly includes \"sausage meat\" and encompasses various sausage types, making it a more inclusive and accurate representation than terms specifying a particular meat type or preparation method.",
        "candidates_provided": [
            "FOODON:03315904",
            "FOODON:00002729",
            "FOODON:00001007",
            "FOODON:00003297",
            "FOODON:00001605",
            "FOODON:00001224",
            "FOODON:00001223",
            "FOODON:00002958",
            "FOODON:00002728",
            "FOODON:03400221",
            "FOODON:03400150",
            "FOODON:00005533",
            "FOODON:00001221",
            "FOODON:03400798",
            "FOODON:00001222",
            "FOODON:00001220",
            "FOODON:00003235",
            "FOODON:03309475",
            "FOODON:00002947",
            "FOODON:00001219",
            "FOODON:03309559",
            "FOODON:03301113",
            "FOODON:03317646",
            "FOODON:03310755",
            "FOODON:03317328",
            "FOODON:03315801",
            "FOODON:03316650",
            "FOODON:03310754",
            "FOODON:03309454",
            "FOODON:03307971",
            "FOODON:03315862",
            "FOODON:03310246",
            "FOODON:03315803",
            "FOODON:00003288",
            "FOODON:03315419",
            "FOODON:03316231",
            "FOODON:03301313",
            "FOODON:03309903",
            "FOODON:03316589",
            "FOODON:03304744"
        ]
    },
    {
        "query": "BRIE CHEESE",
        "chosen_curie": "FOODON:03542770",
        "true_curies": [
            "FOODON:00001013",
            "FOODON:03303508"
        ],
        "explanation": "FOODON:03542770 is the best match because its label, \"27700 - cheese, brie (efsa foodex2)\", explicitly includes \"brie cheese\" and its definition clearly states that it encompasses all types of brie cheese. While other options mention brie (e.g., FOODON:03400314), this ID offers the most precise and comprehensive coverage of the user's entity.",
        "candidates_provided": [
            "FOODON:03542770",
            "FOODON:00003868",
            "FOODON:00003865",
            "FOODON:00003867",
            "FOODON:00001028",
            "FOODON:00001013",
            "FOODON:03306275",
            "FOODON:00001033",
            "FOODON:00002960",
            "FOODON:03303675",
            "FOODON:00002421",
            "FOODON:03303508",
            "FOODON:00002425",
            "FOODON:00003933",
            "FOODON:00003863",
            "FOODON:03542769",
            "FOODON:03400314",
            "FOODON:03400115",
            "FOODON:00003860",
            "FOODON:00003841",
            "FOODON:03305272",
            "FOODON:03310297",
            "FOODON:03316656",
            "FOODON:00001082",
            "FOODON:03316584",
            "FOODON:03304807",
            "FOODON:03316878",
            "FOODON:03307846",
            "FOODON:03316613",
            "FOODON:03316709",
            "FOODON:03316624",
            "FOODON:03309371",
            "FOODON:00001797",
            "FOODON:03316537",
            "FOODON:00001945",
            "FOODON:03303548",
            "FOODON:03316644",
            "FOODON:00002230"
        ]
    },
    {
        "query": "COTTAGE CHEESE",
        "chosen_curie": "FOODON:03400185",
        "true_curies": [
            "FOODON:00001013",
            "FOODON:03301605"
        ],
        "explanation": "While FOODON:03303547 (cottage cheese (pasteurized)), FOODON:03302997 (obsolete: roquefort cheese), and FOODON:03302973 (cottage cheese (creamed)) are also related, FOODON:03400185 (uncured cheese (us cfr)) is the best fit because its definition explicitly includes cottage cheese as an example, making it more specific and comprehensive than the other options.",
        "candidates_provided": [
            "FOODON:03000475",
            "FOODON:03542733",
            "FOODON:00003868",
            "FOODON:00003865",
            "FOODON:00003867",
            "FOODON:00001013",
            "FOODON:03306275",
            "FOODON:00001033",
            "FOODON:00002960",
            "FOODON:03303675",
            "FOODON:00002421",
            "FOODON:00002425",
            "FOODON:03400185",
            "FOODON:00003933",
            "FOODON:00003863",
            "FOODON:03301605",
            "FOODON:00005579",
            "FOODON:03400115",
            "FOODON:00003860",
            "FOODON:00003841",
            "FOODON:03316656",
            "FOODON:03302973",
            "FOODON:03316712",
            "FOODON:03306703",
            "FOODON:03304807",
            "FOODON:03303547",
            "FOODON:03302997",
            "FOODON:03303575",
            "FOODON:03309542",
            "FOODON:00001797",
            "FOODON:03303528",
            "FOODON:03303535",
            "FOODON:03316613",
            "FOODON:03316644",
            "FOODON:03303903",
            "FOODON:03315608",
            "FOODON:03316537",
            "FOODON:03315869",
            "FOODON:00002231",
            "FOODON:03303548"
        ]
    },
    {
        "query": "SPINACH",
        "chosen_curie": "FOODON:03000221",
        "true_curies": [
            "NCIT:C45305",
            "FOODON:03301716",
            "NCBITaxon:3562",
            "CHEBI:60004",
            "FOODON:00003496"
        ],
        "explanation": "While several options mention 'spinach', FOODON:03000221, 'spinach (whole or pieces)', offers the most encompassing and general definition, suitable for the broad term 'SPINACH'.  Other options specify forms (e.g., cooked, leaf, baby), preparations, or other spinach species, making them less suitable as a general representation of 'SPINACH'.",
        "candidates_provided": [
            "FOODON:03000221",
            "FOODON:00003496",
            "FOODON:00003497",
            "FOODON:03000153",
            "FOODON:00004356",
            "FOODON:00003908",
            "FOODON:00003495",
            "FOODON:00002269",
            "FOODON:00002977",
            "FOODON:00004197",
            "FOODON:00004196",
            "FOODON:00004195",
            "FOODON:03301716",
            "FOODON:03000084",
            "FOODON:03000154",
            "FOODON:00004357",
            "FOODON:03000085",
            "FOODON:00004355",
            "FOODON:03401851",
            "FOODON:03401850",
            "FOODON:00001273",
            "FOODON:03306297",
            "FOODON:03311372",
            "FOODON:03301376",
            "FOODON:03301375",
            "FOODON:03311147",
            "FOODON:03310186",
            "FOODON:00004194",
            "FOODON:03311895",
            "FOODON:03412852",
            "FOODON:03414815",
            "FOODON:03306295",
            "FOODON:03307535"
        ]
    },
    {
        "query": "EGGPLANT",
        "chosen_curie": "FOODON:00003618",
        "true_curies": [
            "FOODON:03309709",
            "NCBITaxon:4111"
        ],
        "explanation": "This term has the label 'eggplant', which is an exact match for the user's entity.  While other terms mention eggplant, this is the most general and directly applicable term for the entity 'EGGPLANT', avoiding unnecessary specificity regarding cultivar or preparation method.",
        "candidates_provided": [
            "FOODON:00003618",
            "FOODON:00004952",
            "FOODON:00004953",
            "FOODON:00004954",
            "FOODON:03309709",
            "NCBITaxon:119830",
            "NCBITaxon:115666",
            "FOODON:03411458",
            "FOODON:03309715",
            "FOODON:03304848",
            "FOODON:03304836",
            "FOODON:00001830",
            "FOODON:03414981",
            "FOODON:03414982",
            "NCBITaxon:205524",
            "FOODON:00003253",
            "FOODON:03401121",
            "FOODON:03401122",
            "FOODON:03401119",
            "FOODON:03543856",
            "FOODON:03315738",
            "FOODON:03304501",
            "FOODON:03309558",
            "FOODON:03420274",
            "FOODON:00002181",
            "FOODON:00003574",
            "FOODON:03302353",
            "FOODON:03301407",
            "FOODON:03420194",
            "FOODON:03316828",
            "FOODON:03305036",
            "FOODON:03301074",
            "FOODON:00002199",
            "FOODON:03316425",
            "FOODON:03420178",
            "FOODON:03316831",
            "FOODON:02020153",
            "FOODON:03420134"
        ]
    },
    {
        "query": "CHICKEN",
        "chosen_curie": "FOODON:02020206",
        "true_curies": [
            "FOODON:03530217",
            "FOODON:03411457",
            "NCBITaxon:9031"
        ],
        "explanation": "While FOODON:00002702 ('chicken') is a strong contender, FOODON:02020206 ('piece of chicken meat (raw)') offers more specificity.  The user input 'CHICKEN' is ambiguous and could refer to various chicken parts or preparations.  Since many options lack definitions, the more specific raw chicken meat piece is preferred, unless the user intends to specify a preparation method in subsequent steps.",
        "candidates_provided": [
            "FOODON:03310576",
            "FOODON:03601018",
            "FOODON:02020190",
            "FOODON:02020155",
            "FOODON:00003344",
            "FOODON:00003360",
            "FOODON:03303012",
            "FOODON:02020205",
            "FOODON:00003849",
            "FOODON:02020305",
            "FOODON:00002703",
            "FOODON:02020164",
            "FOODON:03303027",
            "FOODON:00002702",
            "FOODON:00003937",
            "FOODON:02020211",
            "FOODON:02020198",
            "FOODON:02020206",
            "FOODON:03316061",
            "FOODON:03411457",
            "FOODON:03311101",
            "FOODON:00004237",
            "FOODON:03304224",
            "FOODON:03307827",
            "FOODON:00001040",
            "FOODON:03310628",
            "FOODON:03311876",
            "FOODON:03303031",
            "FOODON:03311864",
            "FOODON:03311526",
            "FOODON:03305363",
            "FOODON:03304544",
            "FOODON:03310822",
            "FOODON:03311611",
            "FOODON:00002704",
            "FOODON:03301121",
            "FOODON:03315174",
            "FOODON:03317629",
            "FOODON:03304108",
            "FOODON:03303017"
        ]
    },
    {
        "query": "QUINOA",
        "chosen_curie": "FOODON:00004188",
        "true_curies": [
            "NCBITaxon:63459",
            "FOODON:03310193"
        ],
        "explanation": "While several terms relate to quinoa, FOODON:00004188, 'quinoa seed', is the most precise and generally applicable term.  Other options like 'quinoa flour' or cultivars specify processed forms or specific varieties, while 'quinoa food product' is too broad.  NCBITaxon:63459 refers to the plant itself, not the food entity.  FOODON:03540015 is close but less specific than 'quinoa seed'.",
        "candidates_provided": [
            "NCBITaxon:63459",
            "FOODON:00004188",
            "FOODON:00004506",
            "FOODON:00001192",
            "FOODON:00004868",
            "FOODON:00004405",
            "FOODON:03310193",
            "FOODON:00004869",
            "FOODON:00004870",
            "FOODON:03540015",
            "FOODON:03412027",
            "NCBITaxon:882375",
            "FOODON:03400759",
            "FOODON:03311543",
            "FOODON:03315449",
            "FOODON:03302976",
            "FOODON:00001663",
            "FOODON:03000431",
            "NCBITaxon:3913",
            "FOODON:03460177",
            "FOODON:03315299",
            "FOODON:00002813"
        ]
    },
    {
        "query": "QUINOA",
        "chosen_curie": "FOODON:00004188",
        "true_curies": [
            "NCIT:C45305",
            "CHEBI:60004",
            "NCBITaxon:63459",
            "FOODON:03310193"
        ],
        "explanation": "While several options mention quinoa, FOODON:00004188, 'quinoa seed', is the most specific and directly addresses the user's entity. Other options refer to processed forms (flour, cooked seed) or cultivars, while 'quinoa seed' represents the most fundamental form of quinoa as a food.",
        "candidates_provided": [
            "NCBITaxon:63459",
            "FOODON:00004188",
            "FOODON:00004506",
            "FOODON:00001192",
            "FOODON:00004868",
            "FOODON:00004405",
            "FOODON:03310193",
            "FOODON:00004869",
            "FOODON:00004870",
            "FOODON:03540015",
            "FOODON:03412027",
            "NCBITaxon:882375",
            "FOODON:03400759",
            "FOODON:03311543",
            "FOODON:03315449",
            "FOODON:03302976",
            "FOODON:00001663",
            "FOODON:03000431",
            "NCBITaxon:3913",
            "FOODON:03460177",
            "FOODON:03315299",
            "FOODON:00002813"
        ]
    },
    {
        "query": "DICED",
        "chosen_curie": "FOODON:03430117",
        "true_curies": [
            "FOODON:03430115",
            "FOODON:00003013",
            "FOODON:03309928",
            "FOODON:00003520",
            "FOODON:00001649",
            "FOODON:00003494"
        ],
        "explanation": "While FOODON:00004549 ('food (diced)') is a tempting option, it's too generic.  FOODON:03430117 ('medium ground') is a more precise description of 'diced', which is generally understood to involve cutting into cubes or pieces of a moderate size.",
        "candidates_provided": [
            "FOODON:00004549",
            "FOODON:03303374",
            "FOODON:03310846",
            "FOODON:03304885",
            "FOODON:03307350",
            "FOODON:03315074",
            "FOODON:03430115",
            "FOODON:03308714",
            "FOODON:03317505",
            "FOODON:03401668",
            "FOODON:03401665",
            "FOODON:03401660",
            "FOODON:03401683",
            "FOODON:03401661",
            "FOODON:03401666",
            "FOODON:03401679",
            "FOODON:03401542",
            "FOODON:03401685",
            "FOODON:03401674",
            "FOODON:03401663",
            "FOODON:03413821",
            "FOODON:03317415",
            "FOODON:03430106",
            "FOODON:03430122",
            "FOODON:03430136",
            "FOODON:03440014",
            "FOODON:03310752",
            "FOODON:03301404",
            "FOODON:03460154",
            "FOODON:00003342",
            "FOODON:03413958",
            "FOODON:00005241",
            "FOODON:03411860",
            "FOODON:03301247",
            "FOODON:03460188",
            "FOODON:03310889",
            "FOODON:03412411",
            "FOODON:03414615",
            "FOODON:03430117",
            "FOODON:03315686"
        ]
    },
    {
        "query": "WHITE ONION",
        "chosen_curie": "FOODON:00003518",
        "true_curies": [
            "NCBITaxon:4679",
            "HANCESTRO:0005",
            "PATO:0000323",
            "FOODON:03301704",
            "FOODON:03413721"
        ],
        "explanation": "While several terms mention 'white onion', FOODON:00003518 is the most precise and general term, simply defining it as 'A bulb of a white onion plant cultivar'. Other options specify a particular cultivar (Cometa) or add a state (raw), which is unnecessarily specific for the user's input 'WHITE ONION'.",
        "candidates_provided": [
            "FOODON:00003518",
            "FOODON:00004820",
            "FOODON:03413721",
            "FOODON:00004822",
            "FOODON:00003349",
            "FOODON:03316347",
            "FOODON:00003172",
            "FOODON:03311276",
            "FOODON:00003350",
            "FOODON:00004821",
            "FOODON:03414314",
            "FOODON:03415024",
            "FOODON:00004826",
            "FOODON:03304029",
            "FOODON:00003873",
            "FOODON:00003762",
            "FOODON:03414323",
            "FOODON:00004823",
            "FOODON:00005335",
            "FOODON:00004824",
            "FOODON:03301704",
            "FOODON:00002069",
            "FOODON:03316397",
            "FOODON:03306528",
            "FOODON:03306350",
            "FOODON:03310327",
            "FOODON:03315770",
            "FOODON:03316446",
            "FOODON:03306563",
            "FOODON:03000021",
            "FOODON:03306529",
            "FOODON:03309591",
            "FOODON:03311124"
        ]
    },
    {
        "query": "OATS",
        "chosen_curie": "FOODON:00002062",
        "true_curies": [
            "FOODON:00003429",
            "FOODON:03315188"
        ],
        "explanation": "While several terms relate to oats, FOODON:00002062, 'milled oat food product', encompasses the broadest range of oat preparations.  'Oat' (FOODON:00003429) is too general, referring to the plant's fruit, not the processed food.  Other options specify a particular oat type (e.g., rolled oats) or a product made from oats (e.g., oat milk). 'Milled oat food product' best captures the general user input of 'OATS' without being overly specific.",
        "candidates_provided": [
            "FOODON:00003209",
            "FOODON:00004362",
            "FOODON:00005569",
            "FOODON:00004363",
            "FOODON:03307110",
            "FOODON:03543834",
            "FOODON:00001189",
            "FOODON:00004515",
            "FOODON:03310651",
            "FOODON:00005568",
            "FOODON:03317167",
            "FOODON:03311064",
            "FOODON:00002062",
            "FOODON:03540068",
            "FOODON:03309855",
            "FOODON:00003938",
            "FOODON:03400814",
            "FOODON:03306272",
            "FOODON:03302888",
            "FOODON:03310260",
            "FOODON:03317168",
            "FOODON:03310307",
            "FOODON:03315188",
            "FOODON:00001760",
            "FOODON:00003429",
            "FOODON:03311248",
            "FOODON:03411219",
            "FOODON:00004219",
            "FOODON:03303213",
            "FOODON:03414319",
            "FOODON:00003774",
            "FOODON:03304828",
            "FOODON:03311725",
            "FOODON:03309878"
        ]
    },
    {
        "query": "RUSSIAN",
        "chosen_curie": "GAZ:00002721",
        "true_curies": [
            "FOODON:03316042",
            "HANCESTRO:0386",
            "FOODON:00001290",
            "FOODON:03315498"
        ],
        "explanation": "GAZ:00002721 (Russia) is the most appropriate choice.  While several options mention \"Russian\" in their labels, this ID specifically refers to the country of Russia, providing the most precise and unambiguous match for the user's input \"RUSSIAN\".",
        "candidates_provided": [
            "HANCESTRO:0762",
            "HANCESTRO:0836",
            "FOODON:03540915",
            "HANCESTRO:0386",
            "FOODON:03306669",
            "FOODON:03308547",
            "FOODON:03307848",
            "FOODON:03310464",
            "FOODON:03413811",
            "FOODON:00002964",
            "NCBITaxon:64478",
            "FOODON:00002561",
            "NCBITaxon:25996",
            "FOODON:03412616",
            "NCBITaxon:7902",
            "NCBITaxon:355939",
            "NCBITaxon:27602",
            "GAZ:00006912",
            "FOODON:03541634",
            "GAZ:00002960",
            "GAZ:00005459",
            "HANCESTRO:0321",
            "HANCESTRO:0396",
            "GAZ:00002721",
            "HANCESTRO:0320",
            "HANCESTRO:0585",
            "HANCESTRO:0392",
            "HANCESTRO:0308",
            "FOODON:03520357",
            "FOODON:03414893",
            "FOODON:03305518",
            "HANCESTRO:0353"
        ]
    },
    {
        "query": "PINEAPPLE",
        "chosen_curie": "FOODON:00003459",
        "true_curies": [
            "NCBITaxon:4615",
            "FOODON:03301831"
        ],
        "explanation": "While several terms refer to pineapple, FOODON:00003459 offers the most general and accurate representation of a pineapple as a fruit from the Ananas comosus plant.  Other options specify preparation methods (raw, canned, etc.) or refer to pineapple-flavored products, which are derivatives rather than the core entity.  The term 'pineapple' without qualification is preferable to the more specific 'pineapple (raw)' unless the user has indicated raw preparation.",
        "candidates_provided": [
            "FOODON:03301831",
            "FOODON:00003459",
            "FOODON:00005319",
            "FOODON:00005320",
            "FOODON:00003073",
            "FOODON:00004238",
            "FOODON:03543203",
            "FOODON:03543176",
            "FOODON:03543247",
            "FOODON:03544349",
            "FOODON:03541875",
            "FOODON:03543295",
            "FOODON:03543314",
            "FOODON:03541855",
            "FOODON:03541837",
            "FOODON:00003930",
            "FOODON:03306054",
            "FOODON:03306782",
            "FOODON:03303912",
            "FOODON:03306714",
            "FOODON:00002119",
            "FOODON:03303126",
            "FOODON:00002120",
            "obo:FLOPO_0016496",
            "FOODON:03316531",
            "FOODON:03309800",
            "FOODON:03301003",
            "FOODON:03420137",
            "FOODON:00002481",
            "FOODON:03306770",
            "FOODON:03315615",
            "FOODON:03304862",
            "FOODON:00004186",
            "FOODON:03317622",
            "FOODON:03420138",
            "FOODON:03306997"
        ]
    },
    {
        "query": "HABANERO",
        "chosen_curie": "FOODON:00004467",
        "true_curies": [
            "NCBITaxon:80379",
            "FOODON:00003013",
            "FOODON:03309928",
            "FOODON:00003520",
            "FOODON:00001649"
        ],
        "explanation": "While FOODON:00004403 (habanero (raw)) is more specific, FOODON:00004467 (habanero) is a more general and widely accepted term for the fruit.  The user's input 'HABANERO' is a general term, not specifying raw or processed form.  Other options refer to the plant or processed forms, making FOODON:00004467 the best fit.",
        "candidates_provided": [
            "FOODON:00004467",
            "FOODON:00004403",
            "FOODON:00003915",
            "NCBITaxon:80379",
            "FOODON:03412555",
            "FOODON:00002983",
            "FOODON:03315168",
            "FOODON:03301715",
            "FOODON:03411643",
            "obo:AfPO_0000214",
            "FOODON:03311515",
            "FOODON:00001935",
            "FOODON:03305540",
            "FOODON:03413458",
            "FOODON:03411179",
            "NCBITaxon:260138",
            "FOODON:03302033",
            "FOODON:03412559",
            "FOODON:00003545",
            "FOODON:03310466",
            "FOODON:03305604"
        ]
    },
    {
        "query": "TARRAGON",
        "chosen_curie": "FOODON:00003812",
        "true_curies": [
            "FOODON:00003036",
            "NCBITaxon:72341"
        ],
        "explanation": "While several terms mention 'tarragon', FOODON:00003812 ('tarragon leaf') offers the most precise and unambiguous definition: 'A leaf of a tarragon plant (Artemisia dracunculus)'.  Other options are either too broad (e.g., 'tarragon food product'), too specific (e.g., mentioning fresh commercial varieties or dried tarragon), or refer to obsolete or irrelevant entities.  This term directly reflects the user's entity without additional specifications.",
        "candidates_provided": [
            "FOODON:00003036",
            "FOODON:00003812",
            "FOODON:03401603",
            "FOODON:03540906",
            "FOODON:03540907",
            "FOODON:03540915",
            "FOODON:03301214",
            "FOODON:03304716",
            "FOODON:03307138",
            "FOODON:00003279",
            "NCBITaxon:72341",
            "FOODON:00002311",
            "FOODON:03411469",
            "FOODON:03412872",
            "FOODON:03413839",
            "FOODON:03412276",
            "FOODON:03414857",
            "FOODON:03411240",
            "FOODON:03413832",
            "FOODON:03411788",
            "FOODON:03412490",
            "FOODON:03413875",
            "FOODON:03411910",
            "FOODON:03414870",
            "FOODON:03315108",
            "obo:chebi#is_tautomer_of",
            "obo:AfPO_0000091",
            "FOODON:03413993",
            "FOODON:03414877"
        ]
    },
    {
        "query": "SAGE",
        "chosen_curie": "FOODON:03301560",
        "true_curies": [
            "FOODON:00002217"
        ],
        "explanation": "While several terms relate to sage, FOODON:03301560 ('sage leaf') offers the most precise match.  The user's entity 'SAGE' is commonly understood to refer to the leaf of the Salvia officinalis plant, aligning perfectly with the label and definition of this term. Other options refer to the plant itself, other sage varieties, or processed products.  This option specifies the leaf as the relevant part, making it the most specific and appropriate choice.",
        "candidates_provided": [
            "FOODON:03301560",
            "FOODON:00003073",
            "FOODON:00002217",
            "FOODON:03411303",
            "FOODON:03401599",
            "FOODON:03540856",
            "FOODON:03540855",
            "FOODON:03540860",
            "FOODON:03541275",
            "NCBITaxon:38868",
            "FOODON:03540859",
            "FOODON:03544368",
            "FOODON:03301211",
            "FOODON:03301504",
            "FOODON:03310633",
            "FOODON:03543474",
            "FOODON:03543591",
            "FOODON:03317582",
            "FOODON:03412783",
            "FOODON:00003072",
            "FOODON:03411440",
            "IAO:0000600",
            "FOODON:03301120",
            "FOODON:03415124",
            "FOODON:03413813",
            "rdfs:label",
            "FOODON:03414993",
            "FOODON:03411670",
            "obo:COB_0000502",
            "FOODON:03413370",
            "FOODON:03420310",
            "FOODON:03412513",
            "FOODON:03413959",
            "NCBITaxon:21880",
            "FOODON:03420277"
        ]
    },
    {
        "query": "OREGANO",
        "chosen_curie": "FOODON:03000226",
        "true_curies": [
            "NCBITaxon:39352",
            "FOODON:03301482"
        ],
        "explanation": "While several terms mention oregano, FOODON:03000226, 'oregano (whole or pieces)', is the most general and encompassing term.  It covers various forms of oregano, making it the best fit for the broad user input 'OREGANO' rather than more specific options like dried or ground oregano.",
        "candidates_provided": [
            "FOODON:03000226",
            "FOODON:03000027",
            "FOODON:03301482",
            "FOODON:03301557",
            "FOODON:00002073",
            "FOODON:03401594",
            "FOODON:03540873",
            "NCBITaxon:39352",
            "FOODON:03540868",
            "FOODON:03544335",
            "FOODON:03412262",
            "FOODON:03540912",
            "NCBITaxon:452416",
            "FOODON:03540875",
            "FOODON:03301203",
            "FOODON:03411542",
            "NCBITaxon:1082757",
            "FOODON:03415004",
            "FOODON:00003190",
            "NCBITaxon:268906",
            "FOODON:03414078",
            "NCBITaxon:39174",
            "FOODON:03414509",
            "NCBITaxon:553066",
            "HANCESTRO:0392",
            "HANCESTRO:0318",
            "oboInOwl:hasOBONamespace",
            "FOODON:03411933",
            "FOODON:03301064",
            "FOODON:03412094",
            "FOODON:03414000",
            "FOODON:03302385",
            "FOODON:03413839",
            "FOODON:03414877"
        ]
    },
    {
        "query": "DICED",
        "chosen_curie": "FOODON:03430117",
        "true_curies": [
            "FOODON:03430115"
        ],
        "explanation": "While FOODON:00004549 ('food (diced)') is tempting due to the presence of 'diced', it's too generic.  FOODON:03430117 ('medium ground') lists 'diced' as a synonym and implies a specific size, representing a more precise description of 'diced' than the generic option.",
        "candidates_provided": [
            "FOODON:00004549",
            "FOODON:03303374",
            "FOODON:03310846",
            "FOODON:03304885",
            "FOODON:03307350",
            "FOODON:03315074",
            "FOODON:03430115",
            "FOODON:03308714",
            "FOODON:03317505",
            "FOODON:03401668",
            "FOODON:03401665",
            "FOODON:03401660",
            "FOODON:03401683",
            "FOODON:03401661",
            "FOODON:03401666",
            "FOODON:03401679",
            "FOODON:03401542",
            "FOODON:03401685",
            "FOODON:03401674",
            "FOODON:03401663",
            "FOODON:03413821",
            "FOODON:03317415",
            "FOODON:03430106",
            "FOODON:03430122",
            "FOODON:03430136",
            "FOODON:03440014",
            "FOODON:03310752",
            "FOODON:03301404",
            "FOODON:03460154",
            "FOODON:00003342",
            "FOODON:03413958",
            "FOODON:00005241",
            "FOODON:03411860",
            "FOODON:03301247",
            "FOODON:03460188",
            "FOODON:03310889",
            "FOODON:03412411",
            "FOODON:03414615",
            "FOODON:03430117",
            "FOODON:03315686"
        ]
    },
    {
        "query": "PAPAYA",
        "chosen_curie": "FOODON:00003540",
        "true_curies": [
            "NCBITaxon:3649",
            "FOODON:03301830"
        ],
        "explanation": "FOODON:00003540 is the best match because its label is simply 'papaya', which is an exact match for the user entity.  While other options include 'papaya' in their label, they are more specific (e.g., specific cultivars, processed forms), whereas this term represents the general concept of a papaya fruit.",
        "candidates_provided": [
            "FOODON:03000228",
            "FOODON:00003540",
            "FOODON:00003642",
            "FOODON:00004859",
            "FOODON:00004862",
            "FOODON:00004864",
            "FOODON:00004861",
            "FOODON:00004860",
            "FOODON:00004863",
            "FOODON:03301830",
            "FOODON:00004404",
            "FOODON:00002838",
            "NCBITaxon:3649",
            "FOODON:03540401",
            "FOODON:03544337",
            "FOODON:03543292",
            "FOODON:03543533",
            "FOODON:03305292",
            "FOODON:03316379",
            "FOODON:03306843",
            "FOODON:00002082",
            "FOODON:03310434",
            "FOODON:03306835",
            "FOODON:03411249",
            "FOODON:03306840",
            "FOODON:03306838",
            "FOODON:03306848",
            "FOODON:00002086",
            "FOODON:03305544",
            "FOODON:00003065",
            "FOODON:03303951",
            "FOODON:03304873",
            "FOODON:00002119",
            "FOODON:03306844"
        ]
    },
    {
        "query": "CARDAMOM",
        "chosen_curie": "FOODON:00003792",
        "true_curies": [
            "NCBITaxon:105181"
        ],
        "explanation": "While several terms mention 'cardamom', FOODON:00003792 ('cardamom seed') offers the most precise and general representation of the user entity 'CARDAMOM'.  It avoids the specificity of ground, dried, or a particular variety (green or black) which might not always apply.  The synonyms also strongly support this choice.",
        "candidates_provided": [
            "FOODON:03000246",
            "FOODON:00003792",
            "FOODON:00002925",
            "FOODON:00002923",
            "FOODON:00001683",
            "FOODON:00002924",
            "FOODON:00004455",
            "FOODON:00004454",
            "FOODON:03541379",
            "FOODON:03544223",
            "FOODON:03541380",
            "FOODON:03310743",
            "FOODON:03301219",
            "FOODON:03411665",
            "FOODON:03304881",
            "FOODON:03601057",
            "NCBITaxon:1008370",
            "NCBITaxon:105181",
            "NCBITaxon:637930",
            "FOODON:03305445",
            "FOODON:00002895",
            "FOODON:03412698",
            "FOODON:03414876",
            "FOODON:03413388",
            "FOODON:03411727",
            "FOODON:03413490",
            "FOODON:03414359",
            "NCBITaxon:980193",
            "NCBITaxon:742010",
            "CHEBI:2120"
        ]
    },
    {
        "query": "CHOPPED",
        "chosen_curie": "FOODON:00002777",
        "true_curies": [
            "FOODON:03430125",
            "NCBITaxon:16718"
        ],
        "explanation": "While many terms describe chopped food items, FOODON:00002777, 'food (chopped)', is the most general and therefore the best fit for the highly general user input 'CHOPPED'. More specific terms like 'meat (chopped)' or 'onion (chopped)' are too restrictive.",
        "candidates_provided": [
            "FOODON:00004279",
            "FOODON:00002777",
            "FOODON:00004119",
            "FOODON:03301881",
            "FOODON:03430125",
            "FOODON:03317335",
            "FOODON:03316399",
            "FOODON:03301880",
            "FOODON:03316397",
            "FOODON:03306437",
            "FOODON:03307082",
            "FOODON:03311056",
            "FOODON:00005592",
            "FOODON:00004696",
            "FOODON:03307353",
            "FOODON:03311272",
            "FOODON:03306490",
            "FOODON:03305812",
            "FOODON:03311688",
            "FOODON:03311083",
            "FOODON:03430145",
            "FOODON:03430137",
            "FOODON:03430115",
            "FOODON:03430124",
            "FOODON:03430111",
            "FOODON:03430141",
            "FOODON:03430107",
            "FOODON:03530106",
            "FOODON:03530040",
            "FOODON:03530104",
            "FOODON:03530105",
            "FOODON:03530252",
            "FOODON:03530047",
            "FOODON:03530048",
            "FOODON:03430122",
            "FOODON:03304169",
            "FOODON:03430136",
            "FOODON:03530139",
            "FOODON:03413958"
        ]
    },
    {
        "query": "CURRY PASTE",
        "chosen_curie": "FOODON:03544122",
        "true_curies": [
            "FOODON:03302920"
        ],
        "explanation": "FOODON:03544122 ('41220 - curry sauce (efsa foodex2)') is the best match because its definition explicitly states that it includes curry paste. While FOODON:03302920 ('curry paste') is a more direct label match, it lacks a definition, making FOODON:03544122 the more informative and reliable choice.",
        "candidates_provided": [
            "FOODON:03000225",
            "FOODON:00003260",
            "FOODON:03000122",
            "FOODON:00002389",
            "FOODON:03544122",
            "FOODON:03301842",
            "FOODON:03302920",
            "FOODON:03000432",
            "FOODON:00003887",
            "FOODON:03309823",
            "FOODON:00003870",
            "FOODON:03544062",
            "FOODON:03601043",
            "FOODON:03540858",
            "FOODON:00002484",
            "FOODON:03542614",
            "FOODON:03540902",
            "FOODON:00002390",
            "FOODON:03540938",
            "FOODON:03544255",
            "FOODON:03304046",
            "FOODON:03304142",
            "FOODON:03305182",
            "FOODON:03310030",
            "FOODON:03310032",
            "FOODON:03306648",
            "FOODON:03310033",
            "FOODON:03315576",
            "FOODON:03304227",
            "FOODON:03316520",
            "FOODON:03304780",
            "FOODON:03305618",
            "FOODON:03306491",
            "FOODON:03311287",
            "FOODON:03315435",
            "FOODON:03317091",
            "FOODON:03315543",
            "FOODON:03316661"
        ]
    },
    {
        "query": "TOMATILLO",
        "chosen_curie": "FOODON:00003745",
        "true_curies": [
            "NCIT:C45305",
            "CHEBI:60004",
            "FOODON:03309584"
        ],
        "explanation": "This term is the most appropriate because its label 'tomatillo' exactly matches the user entity. While other options refer to specific cultivars or processing states, FOODON:00003745 represents the general concept of a tomatillo fruit, making it the broadest and most suitable choice for the given entity.",
        "candidates_provided": [
            "FOODON:00003745",
            "FOODON:00005137",
            "FOODON:03309584",
            "FOODON:00004925",
            "FOODON:00005138",
            "NCBITaxon:304130",
            "FOODON:03401848",
            "FOODON:03540640",
            "FOODON:03316538",
            "FOODON:03000227",
            "FOODON:03307843",
            "FOODON:03316532",
            "FOODON:03316522",
            "FOODON:03304889",
            "FOODON:03316171",
            "FOODON:03301454",
            "FOODON:03316733",
            "FOODON:03305005",
            "FOODON:03316730",
            "FOODON:03302669",
            "FOODON:03316731",
            "FOODON:00002313",
            "FOODON:03304668",
            "FOODON:03304884",
            "FOODON:03301455"
        ]
    },
    {
        "query": "BAKED",
        "chosen_curie": "FOODON:03311876",
        "true_curies": [
            "FOODON:00002456"
        ],
        "explanation": "While FOODON:00002456 ('food (baked)') is a very general term,  FOODON:03311876 ('chicken (baked)') is more specific.  The user entity 'BAKED' is a cooking method, not a specific food item.  Many of the other options are specific baked food items, whereas 'chicken (baked)' represents a category of baked food.  The lack of definition for FOODON:03311876 does not outweigh its specificity in this context.",
        "candidates_provided": [
            "FOODON:00002456",
            "FOODON:03302196",
            "FOODON:03301946",
            "FOODON:00002411",
            "FOODON:03310635",
            "FOODON:03304432",
            "FOODON:03540960",
            "FOODON:03542946",
            "FOODON:03301924",
            "FOODON:03311631",
            "FOODON:03312030",
            "FOODON:03301359",
            "FOODON:03311876",
            "FOODON:03309854",
            "FOODON:03317288",
            "FOODON:03311588",
            "FOODON:03311559",
            "FOODON:03400210",
            "FOODON:03317521",
            "FOODON:00003269",
            "FOODON:03315932",
            "FOODON:03460391",
            "FOODON:00001213",
            "FOODON:03450005",
            "FOODON:03440014",
            "FOODON:03460188",
            "FOODON:00004464",
            "FOODON:03440022",
            "FOODON:03303672",
            "FOODON:03450046",
            "FOODON:03302359",
            "FOODON:03440018",
            "FOODON:03450010",
            "FOODON:03302358",
            "FOODON:03316032",
            "FOODON:00002384",
            "FOODON:03316518"
        ]
    },
    {
        "query": "CHILE",
        "chosen_curie": "FOODON:00002994",
        "true_curies": [
            "GAZ:00002825",
            "FOODON:00003013",
            "FOODON:03309928",
            "FOODON:00003520",
            "FOODON:00001649"
        ],
        "explanation": "While several terms relate to Chile (the country), the user's input 'CHILE' is most likely referring to the chili pepper.  FOODON:00002994, 'ancho pepper', specifically identifies a type of chili pepper, providing a more precise match than broader terms like 'chile de \u00e1rbol' or 'guajillo chili'. The synonyms also support this as 'ancho', 'chile ancho', and 'poblano' are all common names for this pepper.",
        "candidates_provided": [
            "GAZ:00002825",
            "FOODON:00002995",
            "FOODON:03412551",
            "FOODON:03415020",
            "FOODON:00002994",
            "FOODON:00002747",
            "FOODON:03412205",
            "FOODON:03412554",
            "FOODON:00003914",
            "FOODON:00002926",
            "FOODON:03412560",
            "HANCESTRO:0626",
            "HANCESTRO:0624",
            "NCBITaxon:33114",
            "FOODON:03412632",
            "FOODON:03414683",
            "HANCESTRO:0623",
            "FOODON:03412564",
            "GAZ:00002511",
            "FOODON:00002838",
            "HANCESTRO:0356",
            "FOODON:03412192",
            "FOODON:03413890",
            "FOODON:03308681",
            "FOODON:03411814",
            "FOODON:03412643",
            "HANCESTRO:0392",
            "FOODON:03415061",
            "FOODON:03308247",
            "FOODON:03411955",
            "FOODON:03308455",
            "FOODON:03309306",
            "FOODON:03413653",
            "FOODON:03413671",
            "FOODON:03413338",
            "HANCESTRO:0404",
            "NCBITaxon:173667",
            "FOODON:03309610"
        ]
    },
    {
        "query": "PANCAKE",
        "chosen_curie": "FOODON:03400194",
        "true_curies": [
            "FOODON:03315258"
        ],
        "explanation": "While several terms relate to pancakes (e.g., FOODON:03315258), FOODON:03400194 ('pancake or waffle (us cfr)') provides a definition that best aligns with the general understanding of a pancake as a 'thin, sweetened bakery product griddled or cooked in a heated mold'.  Other options are too specific (e.g., types of pancakes) or too general (e.g., baked goods).",
        "candidates_provided": [
            "FOODON:03315258",
            "FOODON:03315166",
            "FOODON:03309355",
            "FOODON:03310962",
            "FOODON:03540235",
            "FOODON:03311571",
            "FOODON:03400822",
            "FOODON:03307019",
            "FOODON:03400194",
            "FOODON:03401297",
            "FOODON:03310963",
            "FOODON:00002080",
            "FOODON:00002561",
            "FOODON:00002975",
            "FOODON:03311631",
            "FOODON:03316909",
            "FOODON:03310705",
            "FOODON:03307629",
            "FOODON:03301304",
            "FOODON:03302466",
            "FOODON:03316299",
            "FOODON:03303672",
            "FOODON:03306773",
            "FOODON:03307479",
            "FOODON:03311630",
            "FOODON:03306775",
            "FOODON:03316903",
            "FOODON:03304173",
            "FOODON:03312035",
            "FOODON:03315272"
        ]
    },
    {
        "query": "RICE",
        "chosen_curie": "FOODON:00004320",
        "true_curies": [
            "NCIT:C45305",
            "FOODON:03301641",
            "CHEBI:60004",
            "NCBITaxon:4530"
        ],
        "explanation": "While FOODON:00004320, \"rice (cooked)\", lacks a definition, it's the most appropriate choice.  Many terms refer to specific rice types or preparations (e.g., fried rice, black rice), but \"rice\" is a very general term. The ambiguity requires consideration of whether the rice is cooked or uncooked, and the 'cooked' version is more likely the intended meaning without further context.  Other options that mention 'rice' (like FOODON:00004326, 'rice (uncooked)') are less likely to be what the user intended as this is more specific than the broad term 'rice'.",
        "candidates_provided": [
            "FOODON:03301641",
            "FOODON:03311875",
            "FOODON:00002881",
            "FOODON:03411322",
            "FOODON:00002849",
            "FOODON:00004676",
            "FOODON:00003438",
            "FOODON:00002867",
            "FOODON:00004720",
            "FOODON:00004327",
            "FOODON:03600010",
            "FOODON:00003786",
            "FOODON:00001332",
            "FOODON:00004330",
            "FOODON:00002207",
            "FOODON:00005555",
            "FOODON:03601051",
            "FOODON:03309871",
            "FOODON:00002575",
            "FOODON:00003056",
            "FOODON:00004320",
            "FOODON:03306909",
            "FOODON:03302745",
            "FOODON:03310371",
            "FOODON:03307152",
            "FOODON:03311295",
            "FOODON:03305184",
            "FOODON:03310654",
            "FOODON:03304556",
            "FOODON:03312030",
            "FOODON:00004326",
            "FOODON:03304555",
            "FOODON:03307146",
            "FOODON:00001185",
            "FOODON:03307150",
            "FOODON:03304585",
            "FOODON:03304549",
            "FOODON:03310254",
            "FOODON:03311392",
            "FOODON:03304560"
        ]
    },
    {
        "query": "LEMON PEEL",
        "chosen_curie": "FOODON:03306082",
        "true_curies": [
            "FOODON:03306143",
            "NCBITaxon:2708",
            "FOODON:03301441"
        ],
        "explanation": "While FOODON:00005229 (lemon peel (raw)) is a close match, it implies a raw state which is not specified by the user.  FOODON:03306082 (lemon peel infusion (dried)) is a more specific term covering a processed form of lemon peel, encompassing a broader range of possibilities than the raw version.  Other options refer to entirely different fruits or plant parts.",
        "candidates_provided": [
            "FOODON:00005229",
            "FOODON:00005165",
            "FOODON:03315104",
            "FOODON:00004746",
            "FOODON:00004804",
            "FOODON:00004737",
            "FOODON:03414998",
            "FOODON:03301441",
            "FOODON:03306143",
            "FOODON:00004747",
            "FOODON:00004738",
            "FOODON:00004805",
            "FOODON:00004809",
            "FOODON:00004763",
            "FOODON:03412273",
            "FOODON:03412953",
            "FOODON:00005464",
            "FOODON:00004798",
            "FOODON:00004790",
            "FOODON:00003726",
            "FOODON:03316384",
            "FOODON:03305779",
            "FOODON:03316381",
            "FOODON:03307082",
            "FOODON:03306082",
            "FOODON:03305882",
            "FOODON:00003284",
            "FOODON:00001995",
            "FOODON:03306076",
            "FOODON:03302398",
            "FOODON:03305428",
            "FOODON:03303620",
            "FOODON:03316330",
            "FOODON:03305747",
            "FOODON:03420138",
            "FOODON:03307072",
            "FOODON:03317535"
        ]
    },
    {
        "query": "HONEY",
        "chosen_curie": "FOODON:03543011",
        "true_curies": [
            "NCIT:C45305",
            "CHEBI:60004",
            "UBERON:0036016"
        ],
        "explanation": "While UBERON:0036016 also uses the label 'honey', FOODON:03543011 provides a more comprehensive and specific definition within the context of food science, aligning with the EFSA Foodex2 classification.  It explicitly addresses honey's origin and processing, making it a more suitable choice for a food ontology.",
        "candidates_provided": [
            "FOODON:00004920",
            "FOODON:00004919",
            "FOODON:00002504",
            "UBERON:0036016",
            "FOODON:00004918",
            "FOODON:03401114",
            "FOODON:03543013",
            "FOODON:03543014",
            "FOODON:03543015",
            "FOODON:03543017",
            "FOODON:03543012",
            "FOODON:03401880",
            "FOODON:03401496",
            "FOODON:03543011",
            "FOODON:03543016",
            "FOODON:03540809",
            "FOODON:03544289",
            "FOODON:03400836",
            "FOODON:03544290",
            "FOODON:03302701",
            "FOODON:03301024",
            "FOODON:03305255",
            "FOODON:03301019",
            "FOODON:03301030",
            "FOODON:03301026",
            "FOODON:03301022",
            "FOODON:03304387",
            "FOODON:03305529",
            "FOODON:00001178",
            "FOODON:03305528",
            "FOODON:03305626",
            "FOODON:03301062",
            "FOODON:03460149",
            "FOODON:03301031",
            "FOODON:03301023",
            "FOODON:03301027",
            "FOODON:03305534",
            "FOODON:03305635",
            "FOODON:03301028"
        ]
    },
    {
        "query": "CHILE",
        "chosen_curie": "FOODON:00002994",
        "true_curies": [
            "FOODON:03311146",
            "GAZ:00002825"
        ],
        "explanation": "While several terms mention 'Chile' (the country) or Chilean ingredients, FOODON:00002994, 'ancho pepper', directly refers to a type of chili pepper.  The user input 'CHILE' is commonly understood to refer to a chili pepper, making this the most appropriate choice.",
        "candidates_provided": [
            "GAZ:00002825",
            "FOODON:00002995",
            "FOODON:03412551",
            "FOODON:03415020",
            "FOODON:00002994",
            "FOODON:00002747",
            "FOODON:03412205",
            "FOODON:03412554",
            "FOODON:00003914",
            "FOODON:00002926",
            "FOODON:03412560",
            "HANCESTRO:0626",
            "HANCESTRO:0624",
            "NCBITaxon:33114",
            "FOODON:03412632",
            "FOODON:03414683",
            "HANCESTRO:0623",
            "FOODON:03412564",
            "GAZ:00002511",
            "FOODON:00002838",
            "HANCESTRO:0356",
            "FOODON:03412192",
            "FOODON:03413890",
            "FOODON:03308681",
            "FOODON:03411814",
            "FOODON:03412643",
            "HANCESTRO:0392",
            "FOODON:03415061",
            "FOODON:03308247",
            "FOODON:03411955",
            "FOODON:03308455",
            "FOODON:03309306",
            "FOODON:03413653",
            "FOODON:03413671",
            "FOODON:03413338",
            "HANCESTRO:0404",
            "NCBITaxon:173667",
            "FOODON:03309610"
        ]
    },
    {
        "query": "CHILE",
        "chosen_curie": "FOODON:00002994",
        "true_curies": [
            "FOODON:03311146",
            "NCIT:C45305",
            "CHEBI:60004",
            "GAZ:00002825"
        ],
        "explanation": "While 'Chile' (GAZ:00002825) is an exact label match, it refers to the country, not the food.  Several FOODON terms refer to different types of chile peppers. FOODON:00002994 ('ancho pepper') is the most specific and commonly used term for a type of chile pepper, making it the best match for the ambiguous user input 'CHILE'.",
        "candidates_provided": [
            "GAZ:00002825",
            "FOODON:00002995",
            "FOODON:03412551",
            "FOODON:03415020",
            "FOODON:00002994",
            "FOODON:00002747",
            "FOODON:03412205",
            "FOODON:03412554",
            "FOODON:00003914",
            "FOODON:00002926",
            "FOODON:03412560",
            "HANCESTRO:0626",
            "HANCESTRO:0624",
            "NCBITaxon:33114",
            "FOODON:03412632",
            "FOODON:03414683",
            "HANCESTRO:0623",
            "FOODON:03412564",
            "GAZ:00002511",
            "FOODON:00002838",
            "HANCESTRO:0356",
            "FOODON:03412192",
            "FOODON:03413890",
            "FOODON:03308681",
            "FOODON:03411814",
            "FOODON:03412643",
            "HANCESTRO:0392",
            "FOODON:03415061",
            "FOODON:03308247",
            "FOODON:03411955",
            "FOODON:03308455",
            "FOODON:03309306",
            "FOODON:03413653",
            "FOODON:03413671",
            "FOODON:03413338",
            "HANCESTRO:0404",
            "NCBITaxon:173667",
            "FOODON:03309610"
        ]
    },
    {
        "query": "PEANUT BUTTER",
        "chosen_curie": "FOODON:03541415",
        "true_curies": [
            "NCIT:C45305",
            "FOODON:03310351",
            "CHEBI:60004",
            "NCBITaxon:3818",
            "FOODON:03306867",
            "FOODON:00003206"
        ],
        "explanation": "FOODON:03541415 ('14150 - peanut butter (efsa foodex2)') is the best match because its label explicitly mentions \"peanut butter\" and its definition encompasses all types of peanut butter.  Other options like 'peanut' or various peanut cultivars are too general, while terms like 'peanut butter sandwich' are too specific.  'Peanut butter flavor' describes an artificial imitation, not the food itself.",
        "candidates_provided": [
            "FOODON:00003326",
            "FOODON:03311834",
            "FOODON:03541415",
            "FOODON:03544344",
            "FOODON:03302641",
            "FOODON:00003206",
            "FOODON:03301353",
            "FOODON:03311783",
            "FOODON:00003207",
            "FOODON:00003854",
            "FOODON:00003703",
            "FOODON:00003701",
            "FOODON:00003702",
            "FOODON:03400809",
            "FOODON:03309868",
            "FOODON:03306912",
            "FOODON:00003704",
            "FOODON:03311785",
            "FOODON:00003700",
            "FOODON:03000476",
            "FOODON:03306903",
            "FOODON:03306873",
            "FOODON:03315358",
            "FOODON:03306904",
            "FOODON:03306863",
            "FOODON:03306861",
            "FOODON:03306855",
            "FOODON:03302449",
            "FOODON:03306866",
            "FOODON:03304469",
            "FOODON:03306862",
            "FOODON:03302522",
            "FOODON:03306824",
            "FOODON:03303711",
            "FOODON:03302537",
            "FOODON:03310656",
            "FOODON:03302503",
            "FOODON:03306205",
            "FOODON:03302532",
            "FOODON:03307026"
        ]
    },
    {
        "query": "TUNA",
        "chosen_curie": "FOODON:03542417",
        "true_curies": [
            "NCBITaxon:13353",
            "NCBITaxon:48168",
            "NCBITaxon:48169",
            "FOODON:03411269",
            "NCBITaxon:8227",
            "NCBITaxon:8235",
            "NCBITaxon:320457",
            "NCBITaxon:507566",
            "NCBITaxon:8226",
            "NCBITaxon:8241",
            "NCIT:C45305",
            "NCBITaxon:8237",
            "NCBITaxon:217026",
            "NCBITaxon:8240",
            "CHEBI:60004",
            "NCBITaxon:8238"
        ],
        "explanation": "While NCBITaxon:8236 (Thunnus albacares) is a strong contender as it includes 'tuna' as a synonym, FOODON:03542417 is preferred because it represents the more general concept of 'tuna' encompassing various species, aligning better with the user's broad input of 'TUNA' without specifying a particular species or preparation method.  Other FOODON IDs are too specific (e.g., cuts of tuna), while this encompasses all Tuna species as a generic term.",
        "candidates_provided": [
            "FOODON:00002987",
            "FOODON:00002985",
            "FOODON:00002742",
            "FOODON:03601059",
            "FOODON:00002371",
            "NCBITaxon:8236",
            "FOODON:00002397",
            "FOODON:03411269",
            "FOODON:03542417",
            "FOODON:03542426",
            "FOODON:03542420",
            "FOODON:03542419",
            "FOODON:03542424",
            "FOODON:03542427",
            "FOODON:03542425",
            "FOODON:03542421",
            "FOODON:03542422",
            "FOODON:03542423",
            "FOODON:03542413",
            "FOODON:00001578",
            "FOODON:00002320",
            "FOODON:03411120",
            "FOODON:03411070",
            "FOODON:03305444",
            "FOODON:03413992",
            "FOODON:03309019",
            "FOODON:03411004",
            "FOODON:00001658",
            "FOODON:03411074",
            "FOODON:03308716",
            "FOODON:03308730",
            "FOODON:03412891",
            "FOODON:03308451",
            "FOODON:03308452",
            "FOODON:00002009",
            "FOODON:03310037",
            "FOODON:03309625",
            "FOODON:03308907",
            "FOODON:03308447"
        ]
    },
    {
        "query": "CHOPPED",
        "chosen_curie": "FOODON:00002777",
        "true_curies": [
            "FOODON:00003582",
            "FOODON:03430125",
            "NCBITaxon:4682",
            "FOODON:03305208"
        ],
        "explanation": "While many terms describe chopped *specific* food items, FOODON:00002777, 'food (chopped)', is the most general and appropriate term to represent the action of chopping food without specifying the type of food.",
        "candidates_provided": [
            "FOODON:00004279",
            "FOODON:00002777",
            "FOODON:00004119",
            "FOODON:03301881",
            "FOODON:03430125",
            "FOODON:03317335",
            "FOODON:03316399",
            "FOODON:03301880",
            "FOODON:03316397",
            "FOODON:03306437",
            "FOODON:03307082",
            "FOODON:03311056",
            "FOODON:00005592",
            "FOODON:00004696",
            "FOODON:03307353",
            "FOODON:03311272",
            "FOODON:03306490",
            "FOODON:03305812",
            "FOODON:03311688",
            "FOODON:03311083",
            "FOODON:03430145",
            "FOODON:03430137",
            "FOODON:03430115",
            "FOODON:03430124",
            "FOODON:03430111",
            "FOODON:03430141",
            "FOODON:03430107",
            "FOODON:03530106",
            "FOODON:03530040",
            "FOODON:03530104",
            "FOODON:03530105",
            "FOODON:03530252",
            "FOODON:03530047",
            "FOODON:03530048",
            "FOODON:03430122",
            "FOODON:03304169",
            "FOODON:03430136",
            "FOODON:03530139",
            "FOODON:03413958"
        ]
    },
    {
        "query": "CROISSANT",
        "chosen_curie": "FOODON:03540277",
        "true_curies": [
            "FOODON:03309852"
        ],
        "explanation": "FOODON:03540277 ('croissant') is the best match because it represents the most general and inclusive category for a croissant, encompassing various fillings or the absence thereof.  The other options are more specific (e.g., filled with chocolate, filled with cream), while FOODON:03540277 accurately reflects the user's entity without unnecessary constraint.",
        "candidates_provided": [
            "FOODON:03540277",
            "FOODON:03540278",
            "FOODON:03540279",
            "FOODON:03540280",
            "FOODON:03540292",
            "FOODON:03540293",
            "FOODON:03309852",
            "FOODON:03413914",
            "obo:COB_0000502",
            "FOODON:03412698",
            "FOODON:03412369",
            "FOODON:03412302",
            "FOODON:03412660",
            "PATO:0000570",
            "FOODON:00003342",
            "FOODON:03411903",
            "IAO:0000600",
            "FOODON:03413663",
            "FOODON:03414121",
            "FOODON:03412708",
            "FOODON:03413474",
            "FOODON:03413478",
            "PATO:0000591",
            "FOODON:03301120",
            "FOODON:03414361",
            "FOODON:03413813",
            "FOODON:03420310"
        ]
    },
    {
        "query": "BANANA",
        "chosen_curie": "FOODON:00004184",
        "true_curies": [
            "FOODON:03311513",
            "FOODON:03316257",
            "NCBITaxon:4641"
        ],
        "explanation": "While FOODON:00004184 ('banana (raw)') and FOODON:00004183 ('banana') are both good matches, FOODON:00004184 is slightly more specific.  The user entity 'BANANA' doesn't specify ripeness, but the raw state is more precise than no ripeness specified.  Other options are either specific banana varieties or related items (like banana peppers).",
        "candidates_provided": [
            "FOODON:03316257",
            "FOODON:03000126",
            "FOODON:00003771",
            "FOODON:00004183",
            "FOODON:00004184",
            "FOODON:03303705",
            "FOODON:00003608",
            "FOODON:00005197",
            "FOODON:00004796",
            "FOODON:00004798",
            "FOODON:03000127",
            "FOODON:00004797",
            "FOODON:00004801",
            "FOODON:00004799",
            "FOODON:03311513",
            "FOODON:00004180",
            "FOODON:00001628",
            "FOODON:03413722",
            "FOODON:00002793",
            "FOODON:03411568",
            "FOODON:00001629",
            "FOODON:00002159",
            "FOODON:00002794",
            "FOODON:03305869",
            "FOODON:03301964",
            "FOODON:03414270",
            "obo:FLOPO_0016496",
            "FOODON:03304221",
            "FOODON:03315615",
            "FOODON:03303591",
            "FOODON:03315614",
            "FOODON:00001640",
            "FOODON:03307587",
            "FOODON:00002481",
            "FOODON:03316531",
            "FOODON:03317424",
            "FOODON:03420138"
        ]
    },
    {
        "query": "VEGETABLE",
        "chosen_curie": "FOODON:03315308",
        "true_curies": [
            "NCIT:C45305",
            "FOODON:00003816",
            "CHEBI:60004"
        ],
        "explanation": "FOODON:03315308, 'vegetable (whole or pieces)', is the most appropriate term because it encompasses the broadest definition of 'vegetable' \u2013  including both whole vegetables and processed vegetable pieces.  Other options are too specific (e.g., root vegetable, leafy vegetable) or refer to processed forms or parts of vegetables rather than vegetables themselves.",
        "candidates_provided": [
            "FOODON:03315308",
            "FOODON:03411005",
            "FOODON:00004460",
            "FOODON:00003650",
            "FOODON:00003572",
            "FOODON:03460263",
            "FOODON:00002978",
            "FOODON:03400271",
            "FOODON:03301561",
            "FOODON:03480016",
            "FOODON:03400806",
            "FOODON:03411566",
            "FOODON:03000000",
            "FOODON:00002333",
            "FOODON:03400264",
            "FOODON:03401726",
            "FOODON:03401727",
            "FOODON:03540358",
            "FOODON:03401729",
            "FOODON:03543216",
            "FOODON:03309605",
            "FOODON:03302008",
            "FOODON:03316887",
            "FOODON:03310980",
            "FOODON:03315084",
            "FOODON:03317425",
            "FOODON:03315341",
            "FOODON:03315333",
            "FOODON:03317399",
            "FOODON:03302086",
            "FOODON:03307800",
            "FOODON:00002142",
            "FOODON:03305395",
            "FOODON:03411579",
            "FOODON:03316401",
            "FOODON:03307615",
            "FOODON:03315375",
            "FOODON:03311171",
            "FOODON:03317426",
            "FOODON:03301521"
        ]
    },
    {
        "query": "VEGETABLE",
        "chosen_curie": "FOODON:03315308",
        "true_curies": [
            "FOODON:00003816"
        ],
        "explanation": "While several terms relate to vegetables, FOODON:03315308 is the most encompassing and general term.  Other options specify a part of the vegetable (leaf, root), preparation method (pickled, frozen), or a processed product (patty, juice). 'vegetable (whole or pieces)' best reflects the broad user input of 'VEGETABLE'.",
        "candidates_provided": [
            "FOODON:03315308",
            "FOODON:03411005",
            "FOODON:00004460",
            "FOODON:00003650",
            "FOODON:00003572",
            "FOODON:03460263",
            "FOODON:00002978",
            "FOODON:03400271",
            "FOODON:03301561",
            "FOODON:03480016",
            "FOODON:03400806",
            "FOODON:03411566",
            "FOODON:03000000",
            "FOODON:00002333",
            "FOODON:03400264",
            "FOODON:03401726",
            "FOODON:03401727",
            "FOODON:03540358",
            "FOODON:03401729",
            "FOODON:03543216",
            "FOODON:03309605",
            "FOODON:03302008",
            "FOODON:03316887",
            "FOODON:03310980",
            "FOODON:03315084",
            "FOODON:03317425",
            "FOODON:03315341",
            "FOODON:03315333",
            "FOODON:03317399",
            "FOODON:03302086",
            "FOODON:03307800",
            "FOODON:00002142",
            "FOODON:03305395",
            "FOODON:03411579",
            "FOODON:03316401",
            "FOODON:03307615",
            "FOODON:03315375",
            "FOODON:03311171",
            "FOODON:03317426",
            "FOODON:03301521"
        ]
    },
    {
        "query": "QUICHE",
        "chosen_curie": "FOODON:03543945",
        "true_curies": [
            "FOODON:03307177"
        ],
        "explanation": "FOODON:03543945 is the best match because its label 'quiche' exactly matches the user's input and its definition provides a comprehensive description of a quiche, encompassing various types and ingredients.  Other options like 'cheese quiche' or 'quiche Lorraine' are more specific subtypes of quiche, making FOODON:03543945 the most appropriate general term.",
        "candidates_provided": [
            "FOODON:03543945",
            "FOODON:03307177",
            "FOODON:03307179",
            "FOODON:03310083",
            "FOODON:03307180",
            "FOODON:03400284",
            "FOODON:03310084",
            "FOODON:03307629",
            "FOODON:03310705",
            "FOODON:03306773",
            "FOODON:03307479",
            "FOODON:03304172",
            "FOODON:03316903",
            "FOODON:03303672",
            "FOODON:03301563",
            "FOODON:03316299",
            "FOODON:03315272",
            "FOODON:03315073",
            "FOODON:03317353",
            "FOODON:00002476",
            "FOODON:03306775"
        ]
    },
    {
        "query": "POPPY",
        "chosen_curie": "FOODON:03000025",
        "true_curies": [
            "FOODON:03411515"
        ],
        "explanation": "While several terms relate to poppy plants or products, FOODON:03000025, 'poppy seed', is the most precise and direct match for the user's entity 'POPPY'.  It specifically refers to the seed, which is a common culinary ingredient, unlike terms referring to the plant or plant products which are less precise.",
        "candidates_provided": [
            "FOODON:03000025",
            "FOODON:03411515",
            "FOODON:00003216",
            "NCBITaxon:33128",
            "FOODON:03541182",
            "FOODON:03541183",
            "FOODON:03543597",
            "FOODON:03316559",
            "FOODON:03412156",
            "FOODON:03310252",
            "FOODON:03413709",
            "FOODON:03413710",
            "FOODON:00003118",
            "FOODON:03306675",
            "NCBITaxon:3465",
            "FOODON:03430131",
            "NCBITaxon:200993",
            "NCBITaxon:3469",
            "FOODON:03400686",
            "FOODON:03301105",
            "FOODON:03316942",
            "FOODON:03420198",
            "FOODON:03412534",
            "FOODON:03420303",
            "FOODON:03306985",
            "FOODON:03411682",
            "FOODON:03411634",
            "FOODON:03302179",
            "FOODON:03413997",
            "FOODON:00003342",
            "FOODON:03306835",
            "FOODON:03305386",
            "FOODON:03412493",
            "FOODON:03413545",
            "FOODON:03412030",
            "FOODON:03411903"
        ]
    },
    {
        "query": "BANANA",
        "chosen_curie": "FOODON:00004184",
        "true_curies": [
            "NCIT:C45305",
            "FOODON:03316257",
            "FOODON:03311513",
            "NCBITaxon:4641",
            "CHEBI:60004"
        ],
        "explanation": "While FOODON:00004184 ('banana (raw)') is more specific than FOODON:00004183 ('banana'), the user entity 'BANANA' is quite general.  Given the lack of specification of ripeness, FOODON:00004184 is preferable to more specific banana types (e.g., Cavendish banana) and implicitly accounts for raw bananas as a subset of all bananas.",
        "candidates_provided": [
            "FOODON:03316257",
            "FOODON:03000126",
            "FOODON:00003771",
            "FOODON:00004183",
            "FOODON:00004184",
            "FOODON:03303705",
            "FOODON:00003608",
            "FOODON:00005197",
            "FOODON:00004796",
            "FOODON:00004798",
            "FOODON:03000127",
            "FOODON:00004797",
            "FOODON:00004801",
            "FOODON:00004799",
            "FOODON:03311513",
            "FOODON:00004180",
            "FOODON:00001628",
            "FOODON:03413722",
            "FOODON:00002793",
            "FOODON:03411568",
            "FOODON:00001629",
            "FOODON:00002159",
            "FOODON:00002794",
            "FOODON:03305869",
            "FOODON:03301964",
            "FOODON:03414270",
            "obo:FLOPO_0016496",
            "FOODON:03304221",
            "FOODON:03315615",
            "FOODON:03303591",
            "FOODON:03315614",
            "FOODON:00001640",
            "FOODON:03307587",
            "FOODON:00002481",
            "FOODON:03316531",
            "FOODON:03317424",
            "FOODON:03420138"
        ]
    },
    {
        "query": "OAT",
        "chosen_curie": "FOODON:00003429",
        "true_curies": [
            "NCIT:C45305",
            "CHEBI:60004",
            "FOODON:03309855"
        ],
        "explanation": "While several terms relate to oats, FOODON:00003429 ('oat') is the most general and encompassing term, representing the fruit of the oat plant itself.  Other terms describe processed forms of oats or specific parts of the plant.",
        "candidates_provided": [
            "FOODON:00003429",
            "FOODON:00004219",
            "FOODON:03309878",
            "FOODON:00003774",
            "FOODON:03540034",
            "FOODON:03540354",
            "FOODON:00005553",
            "FOODON:03540324",
            "FOODON:03311725",
            "FOODON:03540035",
            "FOODON:03540109",
            "FOODON:03544164",
            "FOODON:00001189",
            "FOODON:03540076",
            "FOODON:03540100",
            "FOODON:03540314",
            "FOODON:03540315",
            "FOODON:03540316",
            "FOODON:03540343",
            "FOODON:03540344",
            "FOODON:03310307",
            "FOODON:03317167",
            "FOODON:03317168",
            "FOODON:03315188",
            "FOODON:03311064",
            "FOODON:03310651",
            "FOODON:00001760",
            "FOODON:03311248",
            "FOODON:03309855",
            "FOODON:03411219",
            "FOODON:03303213",
            "FOODON:03305723",
            "FOODON:03414319",
            "FOODON:03304828",
            "FOODON:00004515",
            "FOODON:03414078"
        ]
    },
    {
        "query": "ASPARAGUS",
        "chosen_curie": "FOODON:00003458",
        "true_curies": [
            "FOODON:03311349"
        ],
        "explanation": "FOODON:00003458 ('asparagus spear') is the most appropriate term because it represents the most common edible part of the Asparagus plant (Asparagus officinalis) and is a more general term encompassing the different colors of asparagus spears (green, purple, white).",
        "candidates_provided": [
            "FOODON:00003551",
            "FOODON:00003553",
            "FOODON:00003458",
            "FOODON:00003552",
            "FOODON:03000097",
            "FOODON:03305126",
            "FOODON:00004351",
            "FOODON:03311349",
            "FOODON:03540538",
            "NCBITaxon:4686",
            "FOODON:03411415",
            "FOODON:03540539",
            "FOODON:03401854",
            "FOODON:03310435",
            "FOODON:03411724",
            "FOODON:03540622",
            "NCBITaxon:4685",
            "FOODON:03541052",
            "FOODON:00004098",
            "FOODON:03306318",
            "FOODON:03411604",
            "NCBITaxon:73496",
            "NCBITaxon:272846",
            "FOODON:03411603",
            "NCBITaxon:40552",
            "FOODON:00001620",
            "FOODON:03316391",
            "FOODON:03301366",
            "FOODON:00004350",
            "NCBITaxon:51435",
            "NCBITaxon:4674",
            "FOODON:00002773",
            "FOODON:03412760",
            "NCBITaxon:125009"
        ]
    },
    {
        "query": "ASIAGO CHEESE",
        "chosen_curie": "FOODON:03542796",
        "true_curies": [
            "FOODON:00001013",
            "FOODON:03301736"
        ],
        "explanation": "FOODON:03542796 is the best match because its label, \"27960 - cheese, asiago (efsa foodex2)\", explicitly includes \"asiago cheese\" in its label.  While other options refer to cheese types, this is the only one that directly names Asiago cheese and provides a definition consistent with the user's entity. Options like FOODON:03315064 and FOODON:03315066 are more specific types of Asiago, not the general term itself.  FOODON:00001013 is too general, referring to cheese broadly. ",
        "candidates_provided": [
            "FOODON:03542796",
            "FOODON:00003868",
            "FOODON:00003865",
            "FOODON:00003867",
            "FOODON:00001013",
            "FOODON:03306275",
            "FOODON:00001033",
            "FOODON:00002960",
            "FOODON:03303675",
            "FOODON:00002421",
            "FOODON:03301736",
            "FOODON:00002425",
            "FOODON:00003933",
            "FOODON:00003863",
            "FOODON:03315064",
            "FOODON:03315066",
            "FOODON:03400115",
            "FOODON:00003860",
            "FOODON:00003841",
            "FOODON:03315067",
            "FOODON:03307531",
            "FOODON:03303548",
            "FOODON:00001712",
            "FOODON:03303869",
            "FOODON:03317474",
            "FOODON:03316644",
            "FOODON:03304807",
            "FOODON:00001945",
            "FOODON:03316584",
            "FOODON:03316613",
            "FOODON:03305272",
            "FOODON:03304603",
            "FOODON:03303504",
            "FOODON:03315063",
            "FOODON:00002231",
            "FOODON:00002230"
        ]
    },
    {
        "query": "PUDDING",
        "chosen_curie": "FOODON:03400285",
        "true_curies": [
            "FOODON:03301660"
        ],
        "explanation": "While many terms refer to specific types of pudding, FOODON:03400285, 'custard or pudding (us cfr)', is the broadest and most encompassing term that covers the general concept of 'pudding'.  Other options are subtypes of pudding,  making this the most appropriate general term for the ambiguous user input.",
        "candidates_provided": [
            "FOODON:03307094",
            "FOODON:03305135",
            "FOODON:03400285",
            "FOODON:00002557",
            "FOODON:03601039",
            "FOODON:03542939",
            "FOODON:03543981",
            "FOODON:03301660",
            "FOODON:03540307",
            "FOODON:03316578",
            "FOODON:03301612",
            "FOODON:03307102",
            "FOODON:03305044",
            "FOODON:03308693",
            "FOODON:03310796",
            "FOODON:03316146",
            "FOODON:03316264",
            "FOODON:03316145",
            "FOODON:03307100",
            "FOODON:03601055",
            "FOODON:03302751",
            "FOODON:03316440",
            "FOODON:03317080",
            "FOODON:03316969",
            "FOODON:03309502",
            "FOODON:03460182",
            "FOODON:03305012",
            "FOODON:03310350",
            "FOODON:03470181",
            "FOODON:03307537",
            "FOODON:03310869",
            "FOODON:03460268"
        ]
    },
    {
        "query": "HERB",
        "chosen_curie": "FOODON:00003814",
        "true_curies": [
            "FOODON:00003042",
            "FOODON:00002732",
            "FOODON:03301189"
        ],
        "explanation": "While several terms relate to herbs, FOODON:00003814 ('herb leaf') is the most specific and directly addresses the user's entity 'HERB' by focusing on the leaf, a common and defining part of many herbs.  Other options are either too general (e.g., 'spice or herb'), refer to processed forms (e.g., 'herb (ground)'), or specify additional characteristics not mentioned by the user (e.g., 'herb leaf (dried)', 'herb leaf (fresh)').",
        "candidates_provided": [
            "FOODON:00003814",
            "FOODON:00001242",
            "FOODON:00004546",
            "FOODON:00004547",
            "FOODON:03301542",
            "FOODON:00004539",
            "FOODON:03543393",
            "FOODON:03540842",
            "FOODON:03540858",
            "FOODON:03540908",
            "FOODON:03540897",
            "FOODON:03305484",
            "FOODON:03301333",
            "FOODON:03305543",
            "FOODON:03307701",
            "FOODON:03544285",
            "FOODON:03540918",
            "FOODON:03310121",
            "FOODON:03306262",
            "FOODON:03304354",
            "FOODON:03315168",
            "FOODON:03415138",
            "FOODON:03413359",
            "FOODON:03414509",
            "FOODON:00003042",
            "FOODON:03413358",
            "FOODON:03411579",
            "FOODON:03413357",
            "FOODON:03305540",
            "obo:PO_0008037",
            "FOODON:03411386",
            "FOODON:03414168",
            "FOODON:03420238",
            "FOODON:03411179"
        ]
    },
    {
        "query": "FRUIT",
        "chosen_curie": "FOODON:03304644",
        "true_curies": [
            "obo:PO_0009001"
        ],
        "explanation": "While many terms refer to specific fruits, FOODON:03304644, 'fruit (raw)', is the most appropriate because it is a general term representing the user's entity 'FRUIT' without any additional specifications like processing or type of fruit. Other options are more specific and therefore less suitable as a general representation of 'FRUIT'.",
        "candidates_provided": [
            "FOODON:03305040",
            "FOODON:00002689",
            "FOODON:00002487",
            "FOODON:00003195",
            "FOODON:03304644",
            "FOODON:03400143",
            "FOODON:00003733",
            "FOODON:00003567",
            "FOODON:00004385",
            "FOODON:00003675",
            "FOODON:00003101",
            "obo:PO_0030094",
            "obo:PO_0030092",
            "FOODON:00004580",
            "FOODON:00004250",
            "FOODON:03301109",
            "FOODON:00004605",
            "FOODON:00004602",
            "obo:PO_0030093",
            "FOODON:00004742",
            "FOODON:03316531",
            "FOODON:03412030",
            "FOODON:03315615",
            "FOODON:03411634",
            "obo:FLOPO_0016496",
            "FOODON:03306688",
            "FOODON:00002481",
            "FOODON:03315289",
            "FOODON:03309507",
            "FOODON:00003040",
            "FOODON:03317622",
            "FOODON:03316521",
            "FOODON:03305224",
            "FOODON:03303121",
            "FOODON:03420138",
            "FOODON:03420137",
            "FOODON:03315020",
            "FOODON:03301540",
            "FOODON:03317424",
            "FOODON:00001640"
        ]
    },
    {
        "query": "BANANA",
        "chosen_curie": "FOODON:00004184",
        "true_curies": [
            "FOODON:03311513",
            "FOODON:03316257",
            "FOODON:03301304",
            "NCBITaxon:4641"
        ],
        "explanation": "While FOODON:00004184 ('banana (raw)') is more specific than FOODON:00004183 ('banana'),  the user input 'BANANA' is vague.  Given the lack of specification regarding ripeness, FOODON:00004184 is a better choice as it clarifies the state. Other options refer to specific banana types or processed products.",
        "candidates_provided": [
            "FOODON:03316257",
            "FOODON:03000126",
            "FOODON:00003771",
            "FOODON:00004183",
            "FOODON:00004184",
            "FOODON:03303705",
            "FOODON:00003608",
            "FOODON:00005197",
            "FOODON:00004796",
            "FOODON:00004798",
            "FOODON:03000127",
            "FOODON:00004797",
            "FOODON:00004801",
            "FOODON:00004799",
            "FOODON:03311513",
            "FOODON:00004180",
            "FOODON:00001628",
            "FOODON:03413722",
            "FOODON:00002793",
            "FOODON:03411568",
            "FOODON:00001629",
            "FOODON:00002159",
            "FOODON:00002794",
            "FOODON:03305869",
            "FOODON:03301964",
            "FOODON:03414270",
            "obo:FLOPO_0016496",
            "FOODON:03304221",
            "FOODON:03315615",
            "FOODON:03303591",
            "FOODON:03315614",
            "FOODON:00001640",
            "FOODON:03307587",
            "FOODON:00002481",
            "FOODON:03316531",
            "FOODON:03317424",
            "FOODON:03420138"
        ]
    },
    {
        "query": "GHEE",
        "chosen_curie": "FOODON:03543141",
        "true_curies": [
            "FOODON:03310185"
        ],
        "explanation": "FOODON:03543141 is the best match because its label is 'ghee (efsa foodex2)' which is an exact match for the user input, and its definition explicitly describes ghee as a type of clarified butter with a specific flavor and aroma.  While FOODON:03310185 also uses the label 'ghee', FOODON:03543141 provides a more detailed and comprehensive definition.",
        "candidates_provided": [
            "FOODON:03543141",
            "FOODON:03310185",
            "FOODON:03400809",
            "FOODON:03601056",
            "FOODON:03601057",
            "HANCESTRO:0578",
            "FOODON:03414851",
            "FOODON:03411838",
            "CHEBI:33680",
            "FOODON:03414255",
            "FOODON:03304674",
            "FOODON:03317415",
            "CHEBI:33679",
            "oboInOwl:hasOBONamespace",
            "CHEBI:35115",
            "NCBITaxon:163729",
            "obo:AfPO_0000214",
            "FOODON:03412705",
            "CHEBI:35155",
            "FOODON:03413894",
            "obo:CDNO_0200695",
            "obo:UO_0000196",
            "CHEBI:33973"
        ]
    },
    {
        "query": "APPLE PIE",
        "chosen_curie": "FOODON:03306761",
        "true_curies": [
            "FOODON:00002473",
            "FOODON:03303380",
            "NCBITaxon:3750",
            "FOODON:00002475"
        ],
        "explanation": "While several terms relate to apples or pies, FOODON:03306761, 'apple pie (baked)', is the most precise match for the user's entity 'APPLE PIE'.  It specifies that the pie is baked, which is a key characteristic of apple pie. Other options are too general (e.g., 'apple pie', 'pie', 'fruit pie') or refer to different food items altogether.",
        "candidates_provided": [
            "FOODON:00002411",
            "FOODON:03310788",
            "FOODON:00001059",
            "FOODON:00003626",
            "FOODON:00002972",
            "FOODON:00004203",
            "FOODON:00003750",
            "FOODON:00003660",
            "FOODON:00003262",
            "FOODON:00002973",
            "FOODON:00003569",
            "FOODON:00003112",
            "FOODON:00002473",
            "FOODON:00002876",
            "FOODON:03301129",
            "FOODON:00004613",
            "FOODON:00005306",
            "FOODON:00004619",
            "FOODON:00004617",
            "FOODON:00004611",
            "FOODON:00002475",
            "FOODON:03306761",
            "FOODON:03305680",
            "FOODON:00001890",
            "FOODON:03307431",
            "FOODON:03301922",
            "FOODON:03306770",
            "FOODON:00002476",
            "FOODON:00001611",
            "FOODON:03301923",
            "FOODON:03303784",
            "FOODON:03306776",
            "FOODON:03301954",
            "FOODON:03301930",
            "FOODON:03306759",
            "FOODON:03309516",
            "FOODON:03306763",
            "FOODON:00001610",
            "FOODON:03301924"
        ]
    },
    {
        "query": "ORANGE JUICE",
        "chosen_curie": "FOODON:03301101",
        "true_curies": [
            "FOODON:03315552",
            "PATO:0000953",
            "FOODON:03315106",
            "FOODON:03301103"
        ],
        "explanation": "While several terms mention 'orange juice', FOODON:03301101 ('orange juice') is the most general and broadly applicable term without any additional specification (e.g., pasteurized, with pulp, etc.).  The other 'orange juice' terms add unnecessary specificity that might not apply to all instances of orange juice.  Other options refer to orange as a fruit, not juice. Therefore, FOODON:03301101 is the best choice for the general entity 'ORANGE JUICE'.",
        "candidates_provided": [
            "FOODON:00001277",
            "FOODON:00005497",
            "FOODON:00001059",
            "FOODON:03309832",
            "FOODON:03543172",
            "FOODON:03543164",
            "FOODON:03543168",
            "FOODON:03543169",
            "FOODON:03543240",
            "FOODON:03301101",
            "FOODON:00004198",
            "FOODON:03411339",
            "FOODON:00003550",
            "FOODON:03315552",
            "FOODON:03315106",
            "FOODON:03411193",
            "PATO:0001944",
            "FOODON:03000144",
            "PATO:0001256",
            "PATO:0001278",
            "FOODON:03301103",
            "FOODON:03301102",
            "FOODON:03306016",
            "FOODON:03305389",
            "FOODON:03311067",
            "FOODON:03311343",
            "FOODON:03302250",
            "FOODON:03305980",
            "FOODON:03304598",
            "FOODON:03302385",
            "FOODON:03302211",
            "FOODON:03306030",
            "FOODON:03306014",
            "FOODON:03301100",
            "FOODON:03302219",
            "FOODON:03305397",
            "FOODON:03306017",
            "FOODON:03302183",
            "FOODON:03306031",
            "FOODON:03316786"
        ]
    },
    {
        "query": "ORANGE",
        "chosen_curie": "FOODON:00003555",
        "true_curies": [
            "PATO:0000953",
            "FOODON:00003283",
            "FOODON:03315106"
        ],
        "explanation": "While several terms mention 'orange', FOODON:00003555, 'mandarin orange', is too specific.  FOODON:03309832 ('orange (raw)') is a good candidate, but it lacks the precision to distinguish between different orange varieties. FOODON:00003555 is a broader term encompassing various types of oranges, making it the most appropriate general term for the user input 'ORANGE'.",
        "candidates_provided": [
            "FOODON:03309832",
            "FOODON:00004198",
            "FOODON:03411339",
            "FOODON:00003550",
            "FOODON:03315106",
            "FOODON:03411193",
            "PATO:0001944",
            "FOODON:03000144",
            "PATO:0001256",
            "PATO:0001278",
            "PATO:0001277",
            "PATO:0001255",
            "FOODON:03000145",
            "FOODON:00004199",
            "FOODON:00004386",
            "FOODON:00003555",
            "FOODON:00003579",
            "FOODON:00001277",
            "FOODON:00003619",
            "FOODON:03301101",
            "FOODON:03306028",
            "FOODON:03302385",
            "FOODON:00002071",
            "FOODON:03530289",
            "FOODON:03301103",
            "FOODON:03530290",
            "FOODON:03301102",
            "FOODON:03306016",
            "FOODON:03306689",
            "FOODON:03302220",
            "FOODON:03302219",
            "FOODON:03302203",
            "FOODON:03316385",
            "FOODON:03302210",
            "FOODON:03301100",
            "FOODON:03305389",
            "FOODON:03412328",
            "FOODON:03311067",
            "FOODON:03305778",
            "FOODON:03305980"
        ]
    },
    {
        "query": "CHEESE SAUCE",
        "chosen_curie": "FOODON:03544101",
        "true_curies": [
            "FOODON:03311146",
            "FOODON:00001013",
            "FOODON:03304042"
        ],
        "explanation": "While several terms relate to cheese, FOODON:03544101 ('cheese sauce (efsa foodex2)') is the most precise match for the user's entity 'CHEESE SAUCE'.  It explicitly defines 'any type of sauce based on cheese,' aligning directly with the user's input. Other options, like macaroni and cheese, are dishes containing cheese sauce, but not cheese sauce itself.",
        "candidates_provided": [
            "FOODON:00003933",
            "FOODON:00002960",
            "FOODON:03306275",
            "FOODON:03544101",
            "FOODON:00003868",
            "FOODON:00003865",
            "FOODON:00003867",
            "FOODON:00003259",
            "FOODON:00001013",
            "FOODON:00001033",
            "FOODON:00003236",
            "FOODON:03303675",
            "FOODON:00002421",
            "FOODON:00002425",
            "FOODON:03306786",
            "FOODON:00002526",
            "FOODON:00003232",
            "FOODON:00003863",
            "FOODON:03400863",
            "FOODON:00005513",
            "FOODON:03304042",
            "FOODON:03309371",
            "FOODON:03302985",
            "FOODON:03315679",
            "FOODON:03303869",
            "FOODON:03304807",
            "FOODON:03316584",
            "FOODON:03311122",
            "FOODON:03305272",
            "FOODON:03312036",
            "FOODON:03316643",
            "FOODON:03303548",
            "FOODON:03315640",
            "FOODON:00001797",
            "FOODON:03316667",
            "FOODON:03302031",
            "FOODON:03315644",
            "FOODON:03317466",
            "FOODON:03310470",
            "FOODON:03307846"
        ]
    },
    {
        "query": "SPINACH",
        "chosen_curie": "FOODON:03000221",
        "true_curies": [
            "NCIT:C45305",
            "obo:FAO_0000012",
            "FOODON:03301716",
            "NCBITaxon:3562",
            "FOODON:00003528",
            "FOODON:03301303",
            "CHEBI:60004",
            "FOODON:00003496"
        ],
        "explanation": "While several options refer to spinach, FOODON:03000221, 'spinach (whole or pieces)', is the most encompassing and general term.  It covers various forms of spinach without specifying a particular preparation method or growth stage, making it the best fit for the ambiguous user input 'SPINACH'.",
        "candidates_provided": [
            "FOODON:03000221",
            "FOODON:00003496",
            "FOODON:00003497",
            "FOODON:03000153",
            "FOODON:00004356",
            "FOODON:00003908",
            "FOODON:00003495",
            "FOODON:00002269",
            "FOODON:00002977",
            "FOODON:00004197",
            "FOODON:00004196",
            "FOODON:00004195",
            "FOODON:03301716",
            "FOODON:03000084",
            "FOODON:03000154",
            "FOODON:00004357",
            "FOODON:03000085",
            "FOODON:00004355",
            "FOODON:03401851",
            "FOODON:03401850",
            "FOODON:00001273",
            "FOODON:03306297",
            "FOODON:03311372",
            "FOODON:03301376",
            "FOODON:03301375",
            "FOODON:03311147",
            "FOODON:03310186",
            "FOODON:00004194",
            "FOODON:03311895",
            "FOODON:03412852",
            "FOODON:03414815",
            "FOODON:03306295",
            "FOODON:03307535"
        ]
    },
    {
        "query": "CHOPPED",
        "chosen_curie": "FOODON:00002777",
        "true_curies": [
            "FOODON:03430125",
            "FOODON:03301453",
            "FOODON:03309927",
            "NCBITaxon:4081"
        ],
        "explanation": "While many terms describe chopped food items, FOODON:00002777, 'food (chopped)', is the most general and appropriate term for the user entity 'CHOPPED'.  Other options are more specific to a particular food type (e.g., meat, liver, garlic), while this term encompasses the act of chopping applied to any food.",
        "candidates_provided": [
            "FOODON:00004279",
            "FOODON:00002777",
            "FOODON:00004119",
            "FOODON:03301881",
            "FOODON:03430125",
            "FOODON:03317335",
            "FOODON:03316399",
            "FOODON:03301880",
            "FOODON:03316397",
            "FOODON:03306437",
            "FOODON:03307082",
            "FOODON:03311056",
            "FOODON:00005592",
            "FOODON:00004696",
            "FOODON:03307353",
            "FOODON:03311272",
            "FOODON:03306490",
            "FOODON:03305812",
            "FOODON:03311688",
            "FOODON:03311083",
            "FOODON:03430145",
            "FOODON:03430137",
            "FOODON:03430115",
            "FOODON:03430124",
            "FOODON:03430111",
            "FOODON:03430141",
            "FOODON:03430107",
            "FOODON:03530106",
            "FOODON:03530040",
            "FOODON:03530104",
            "FOODON:03530105",
            "FOODON:03530252",
            "FOODON:03530047",
            "FOODON:03530048",
            "FOODON:03430122",
            "FOODON:03304169",
            "FOODON:03430136",
            "FOODON:03530139",
            "FOODON:03413958"
        ]
    },
    {
        "query": "RICOTTA CHEESE",
        "chosen_curie": "FOODON:03542738",
        "true_curies": [
            "FOODON:03302908",
            "FOODON:00001013"
        ],
        "explanation": "FOODON:03542738 ('27380 - ricotta (efsa foodex2)') is the best match because it encompasses all types of ricotta cheese, as specified by its definition.  Other options like FOODON:03000486 and FOODON:03000472 are more specific subtypes of ricotta, whereas FOODON:03542738 provides a more general and encompassing term for the user's entity 'RICOTTA CHEESE'.",
        "candidates_provided": [
            "FOODON:03000486",
            "FOODON:03542757",
            "FOODON:03000472",
            "FOODON:03542756",
            "FOODON:00003868",
            "FOODON:00003865",
            "FOODON:00003867",
            "FOODON:00001013",
            "FOODON:03306275",
            "FOODON:00001033",
            "FOODON:00002960",
            "FOODON:03303675",
            "FOODON:00002421",
            "FOODON:03542738",
            "FOODON:00002425",
            "FOODON:03302908",
            "FOODON:00003933",
            "FOODON:00003863",
            "FOODON:03400115",
            "FOODON:00003860",
            "FOODON:03311730",
            "FOODON:03310353",
            "FOODON:03315069",
            "FOODON:03316878",
            "FOODON:00001945",
            "FOODON:03311731",
            "FOODON:03301039",
            "FOODON:03305272",
            "FOODON:03309371",
            "FOODON:03310297",
            "FOODON:03317574",
            "FOODON:03303548",
            "FOODON:00001797",
            "FOODON:03304807",
            "FOODON:00001082",
            "FOODON:03316584",
            "FOODON:03303876"
        ]
    },
    {
        "query": "QUINOA",
        "chosen_curie": "FOODON:00004188",
        "true_curies": [
            "NCBITaxon:63459",
            "FOODON:03310193",
            "FOODON:03301116"
        ],
        "explanation": "While several terms relate to quinoa, FOODON:00004188, 'quinoa seed', is the most precise and directly representative of the user's input 'QUINOA'.  Other options refer to derived products (flour, food product) or specific cultivars, making 'quinoa seed' the most appropriate general term.",
        "candidates_provided": [
            "NCBITaxon:63459",
            "FOODON:00004188",
            "FOODON:00004506",
            "FOODON:00001192",
            "FOODON:00004868",
            "FOODON:00004405",
            "FOODON:03310193",
            "FOODON:00004869",
            "FOODON:00004870",
            "FOODON:03540015",
            "FOODON:03412027",
            "NCBITaxon:882375",
            "FOODON:03400759",
            "FOODON:03311543",
            "FOODON:03315449",
            "FOODON:03302976",
            "FOODON:00001663",
            "FOODON:03000431",
            "NCBITaxon:3913",
            "FOODON:03460177",
            "FOODON:03315299",
            "FOODON:00002813"
        ]
    },
    {
        "query": "PORRIDGE",
        "chosen_curie": "FOODON:03540329",
        "true_curies": [
            "FOODON:03311555"
        ],
        "explanation": "While several terms mention 'porridge', FOODON:03540329 ('porridge (ready to eat)') is the most comprehensive and accurate match.  It encompasses various types of porridge and preparation methods, unlike the more specific grain-based options or the dry, pre-prepared ones.  The other general term 'porridge' (FOODON:03311555) lacks a definition.",
        "candidates_provided": [
            "FOODON:03540324",
            "FOODON:03540321",
            "FOODON:03540326",
            "FOODON:03540325",
            "FOODON:03540322",
            "FOODON:03540329",
            "FOODON:03540327",
            "FOODON:03540323",
            "FOODON:03540331",
            "FOODON:03540330",
            "FOODON:03311555",
            "FOODON:03310288",
            "FOODON:03317469",
            "FOODON:03310872",
            "FOODON:03316896",
            "FOODON:03317557",
            "FOODON:00005563",
            "FOODON:03315508",
            "FOODON:03317508",
            "FOODON:03540328",
            "FOODON:03411234",
            "FOODON:03411978",
            "FOODON:03412283",
            "FOODON:03414287",
            "FOODON:03308482",
            "NCBITaxon:80835",
            "FOODON:03412534",
            "NCBITaxon:600346",
            "FOODON:03308000",
            "FOODON:03309149",
            "FOODON:03412571",
            "FOODON:03414740",
            "FOODON:02000295",
            "FOODON:03411207",
            "FOODON:03309163",
            "FOODON:03414960",
            "obo:UO_0010034",
            "FOODON:03413687",
            "FOODON:03414877"
        ]
    },
    {
        "query": "WALNUT",
        "chosen_curie": "FOODON:03316466",
        "true_curies": [
            "FOODON:03301364",
            "NCIT:C45305",
            "FOODON:03315233",
            "CHEBI:60004"
        ],
        "explanation": "While several terms refer to walnuts, FOODON:03316466, 'walnut (whole or pieces)', offers the broadest coverage encompassing various forms of walnuts without specifying a particular type (e.g., English walnut, black walnut).  Its definition also explicitly includes both whole and processed forms, making it the most comprehensive and suitable choice for the general term 'WALNUT'.",
        "candidates_provided": [
            "FOODON:03316466",
            "FOODON:00003611",
            "FOODON:03301364",
            "FOODON:00005234",
            "FOODON:03311411",
            "FOODON:00004148",
            "FOODON:03315233",
            "FOODON:03541168",
            "FOODON:03306516",
            "FOODON:03306518",
            "FOODON:03543111",
            "NCBITaxon:51240",
            "FOODON:03543551",
            "FOODON:03543553",
            "FOODON:03544403",
            "FOODON:03412616",
            "FOODON:03307235",
            "FOODON:03307229",
            "FOODON:03311689",
            "FOODON:00003218",
            "FOODON:00002338",
            "FOODON:03303110",
            "FOODON:00005348",
            "FOODON:03310876",
            "FOODON:00001833",
            "FOODON:03411290",
            "FOODON:00001652",
            "FOODON:03306520",
            "FOODON:03311323",
            "FOODON:03310998",
            "FOODON:00003564",
            "FOODON:03306050",
            "FOODON:00001722"
        ]
    },
    {
        "query": "HASH",
        "chosen_curie": "FOODON:00001598",
        "true_curies": [
            "FOODON:03307343"
        ],
        "explanation": "While several terms include \"hash\" as a label or synonym, FOODON:00001598, 'animal-based stew or hash', is the most appropriate.  The user input 'HASH' is vague; this term provides the necessary context of an animal-based preparation, which is a common characteristic of many hash dishes.  Other options are too specific (e.g., beef hash, potato hash brown) or obsolete.",
        "candidates_provided": [
            "FOODON:03307343",
            "FOODON:00001598",
            "FOODON:03310607",
            "FOODON:00002276",
            "FOODON:03311317",
            "FOODON:03302098",
            "FOODON:00002172",
            "FOODON:03400212",
            "FOODON:03311316",
            "FOODON:00001729",
            "FOODON:00001698",
            "FOODON:00002734",
            "FOODON:00001607",
            "FOODON:03311443",
            "oboInOwl:hasAlternativeId",
            "oboInOwl:hasOBONamespace",
            "oboInOwl:hasDbXref",
            "rdfs:label",
            "CHEBI:35155",
            "FOODON:03317415",
            "FOODON:03413705",
            "CHEBI:35115",
            "FOODON:03530221",
            "obo:chebi#is_conjugate_base_of",
            "FOODON:03411838",
            "ns1:hasXSDDuration",
            "CHEBI:82663",
            "FOODON:03414885",
            "CHEBI:33973",
            "FOODON:03530234"
        ]
    },
    {
        "query": "GLUTEN",
        "chosen_curie": "FOODON:03544161",
        "true_curies": [
            "FOODON:03420177",
            "FOODON:03301116"
        ],
        "explanation": "While FOODON:03420177 also has 'gluten' as a label, FOODON:03544161's definition is more comprehensive, explicitly mentioning 'any type of Gluten proteins'.  The other options refer to gluten-free products or diets, which are not the entity itself.",
        "candidates_provided": [
            "FOODON:03420177",
            "obo:ONS_1000043",
            "FOODON:03544161",
            "FOODON:03540166",
            "FOODON:03544168",
            "obo:ONS_2000043",
            "FOODON:03540082",
            "FOODON:03540167",
            "FOODON:03540168",
            "FOODON:03540192",
            "FOODON:03301888",
            "FOODON:03310808",
            "FOODON:03306200",
            "FOODON:03310809",
            "FOODON:03302453",
            "FOODON:03302452",
            "FOODON:03460758",
            "FOODON:03460750",
            "FOODON:03316290",
            "FOODON:03510174",
            "FOODON:00001907",
            "FOODON:00002355",
            "FOODON:03315911",
            "FOODON:03510214",
            "FOODON:03305461",
            "FOODON:03305013",
            "FOODON:03302364",
            "FOODON:03304535",
            "CHEBI:24384"
        ]
    },
    {
        "query": "ROAST BEEF",
        "chosen_curie": "FOODON:03303431",
        "true_curies": [
            "FOODON:00002734"
        ],
        "explanation": "While FOODON:00004477 (beef roast) is a good general match, FOODON:03303431 (roast beef (oven-cooked)) is a more precise match to the user's entity 'ROAST BEEF', as it explicitly specifies the cooking method, 'oven-cooked'. The other terms are either specific cuts of beef or include additional details (raw, boneless, etc.) that are not part of the user's input.",
        "candidates_provided": [
            "FOODON:02000103",
            "FOODON:02000050",
            "FOODON:02020976",
            "FOODON:02020975",
            "FOODON:02000027",
            "FOODON:02000075",
            "FOODON:02000125",
            "FOODON:02020977",
            "FOODON:02000021",
            "FOODON:02000163",
            "FOODON:02000169",
            "FOODON:02000141",
            "FOODON:02000208",
            "FOODON:02000068",
            "FOODON:02000160",
            "FOODON:02000076",
            "FOODON:02000142",
            "FOODON:02000104",
            "FOODON:02000159",
            "FOODON:02020978",
            "FOODON:03311662",
            "FOODON:03303431",
            "FOODON:03311827",
            "FOODON:03309854",
            "FOODON:03311514",
            "FOODON:03310240",
            "FOODON:03310959",
            "FOODON:03310244",
            "FOODON:03311314",
            "FOODON:03311014",
            "FOODON:03310680",
            "FOODON:00002734",
            "FOODON:03309738",
            "FOODON:03310919",
            "FOODON:00004477",
            "FOODON:02000008",
            "FOODON:03317376"
        ]
    },
    {
        "query": "SALT",
        "chosen_curie": "FOODON:03400134",
        "true_curies": [
            "NCBITaxon:185734",
            "CHEBI:26710",
            "NCBITaxon:185735",
            "NCBITaxon:8047",
            "CHEBI:24866",
            "FOODON:03411423"
        ],
        "explanation": "While CHEBI:24866 has a matching label, FOODON:03400134 is a better fit because it explicitly includes 'table salt and its substitutes', encompassing the various forms of salt used in food preparation and consumption.  The CHEBI term is too chemically general.",
        "candidates_provided": [
            "FOODON:03400134",
            "CHEBI:24866",
            "obo:CDNO_0200175",
            "CHEBI:50744",
            "CHEBI:50562",
            "CHEBI:190413",
            "CHEBI:190425",
            "CHEBI:190417",
            "CHEBI:190415",
            "CHEBI:190431",
            "CHEBI:190302",
            "CHEBI:190419",
            "CHEBI:190423",
            "CHEBI:190421",
            "CHEBI:190429",
            "CHEBI:190299",
            "CHEBI:24997",
            "CHEBI:190300",
            "CHEBI:190297",
            "CHEBI:190422",
            "FOODON:03309467",
            "FOODON:03309536",
            "FOODON:03306222",
            "FOODON:00002221",
            "CHEBI:24868",
            "FOODON:03305008",
            "FOODON:03309954",
            "FOODON:03315110",
            "FOODON:03460367",
            "FOODON:03303092",
            "FOODON:03315559",
            "CHEBI:51082",
            "CHEBI:24839",
            "FOODON:03414423",
            "FOODON:03414425",
            "FOODON:03413262",
            "CHEBI:35175",
            "FOODON:00002250",
            "CHEBI:33958"
        ]
    },
    {
        "query": "RICE",
        "chosen_curie": "FOODON:00004320",
        "true_curies": [
            "FOODON:03301641",
            "UBERON:0001913",
            "NCBITaxon:4530"
        ],
        "explanation": "While FOODON:00004327 ('rice') is a close match, it's too general.  Many of the other options describe specific types or preparations of rice.  FOODON:00004320 ('rice (cooked)') is a better fit because 'RICE' is often understood as cooked rice unless a specific preparation or form is specified.",
        "candidates_provided": [
            "FOODON:03301641",
            "FOODON:03311875",
            "FOODON:00002881",
            "FOODON:03411322",
            "FOODON:00002849",
            "FOODON:00004676",
            "FOODON:00003438",
            "FOODON:00002867",
            "FOODON:00004720",
            "FOODON:00004327",
            "FOODON:03600010",
            "FOODON:00003786",
            "FOODON:00001332",
            "FOODON:00004330",
            "FOODON:00002207",
            "FOODON:00005555",
            "FOODON:03601051",
            "FOODON:03309871",
            "FOODON:00002575",
            "FOODON:00003056",
            "FOODON:00004320",
            "FOODON:03306909",
            "FOODON:03302745",
            "FOODON:03310371",
            "FOODON:03307152",
            "FOODON:03311295",
            "FOODON:03305184",
            "FOODON:03310654",
            "FOODON:03304556",
            "FOODON:03312030",
            "FOODON:00004326",
            "FOODON:03304555",
            "FOODON:03307146",
            "FOODON:00001185",
            "FOODON:03307150",
            "FOODON:03304585",
            "FOODON:03304549",
            "FOODON:03310254",
            "FOODON:03311392",
            "FOODON:03304560"
        ]
    },
    {
        "query": "MILLET",
        "chosen_curie": "FOODON:00005207",
        "true_curies": [
            "FOODON:03309702"
        ],
        "explanation": "While several options mention 'millet', FOODON:00005207 ('millet seed') provides the most general and encompassing term.  Other options specify types of millet (e.g., pearl millet, finger millet), or processed forms (e.g., flour, groats), while 'millet seed' covers the broader category.",
        "candidates_provided": [
            "FOODON:00003430",
            "FOODON:00003695",
            "FOODON:00005207",
            "FOODON:00004438",
            "FOODON:03309702",
            "FOODON:03540016",
            "FOODON:00004570",
            "FOODON:03540025",
            "FOODON:03414681",
            "FOODON:03540519",
            "FOODON:03540028",
            "FOODON:03540075",
            "FOODON:03540099",
            "FOODON:03540022",
            "FOODON:03540017",
            "FOODON:03540313",
            "FOODON:03540020",
            "FOODON:03540024",
            "NCBITaxon:4511",
            "NCBITaxon:305658",
            "FOODON:00001188",
            "FOODON:03301349",
            "FOODON:00003342",
            "FOODON:03414367",
            "obo:UO_0000098",
            "FOODON:00002038",
            "FOODON:03411784",
            "FOODON:03414316",
            "FOODON:03415146",
            "FOODON:03301120",
            "FOODON:03316405",
            "FOODON:03412140",
            "FOODON:03414361",
            "FOODON:03411285",
            "FOODON:03414979",
            "FOODON:03413814",
            "FOODON:03414318",
            "FOODON:00001758",
            "obo:UO_0000016"
        ]
    },
    {
        "query": "CHILE",
        "chosen_curie": "FOODON:00002994",
        "true_curies": [
            "GAZ:00002825",
            "NCBITaxon:4071"
        ],
        "explanation": "While several terms mention \"chile\", FOODON:00002994, 'ancho pepper', specifically refers to a type of chile pepper,  'poblano', providing a more precise match than broader geographical or cultural terms.  Other 'chile' mentions are related to powders or plants, whereas this term refers directly to the pepper itself.  The synonyms further support the choice, given that 'chile ancho' and 'ancho pepper' are common names for the pepper.",
        "candidates_provided": [
            "GAZ:00002825",
            "FOODON:00002995",
            "FOODON:03412551",
            "FOODON:03415020",
            "FOODON:00002994",
            "FOODON:00002747",
            "FOODON:03412205",
            "FOODON:03412554",
            "FOODON:00003914",
            "FOODON:00002926",
            "FOODON:03412560",
            "HANCESTRO:0626",
            "HANCESTRO:0624",
            "NCBITaxon:33114",
            "FOODON:03412632",
            "FOODON:03414683",
            "HANCESTRO:0623",
            "FOODON:03412564",
            "GAZ:00002511",
            "FOODON:00002838",
            "HANCESTRO:0356",
            "FOODON:03412192",
            "FOODON:03413890",
            "FOODON:03308681",
            "FOODON:03411814",
            "FOODON:03412643",
            "HANCESTRO:0392",
            "FOODON:03415061",
            "FOODON:03308247",
            "FOODON:03411955",
            "FOODON:03308455",
            "FOODON:03309306",
            "FOODON:03413653",
            "FOODON:03413671",
            "FOODON:03413338",
            "HANCESTRO:0404",
            "NCBITaxon:173667",
            "FOODON:03309610"
        ]
    },
    {
        "query": "COCOA POWDER",
        "chosen_curie": "FOODON:03543435",
        "true_curies": [
            "FOODON:03301072",
            "FOODON:00002976",
            "NCBITaxon:3641"
        ],
        "explanation": "While FOODON:03301072 (cocoa) is a close match, FOODON:03543435 explicitly mentions \"cocoa powder\" in its label and definition, making it the more precise choice.  Other options refer to different powders or cocoa-containing products, but not specifically cocoa powder itself.",
        "candidates_provided": [
            "FOODON:03301072",
            "FOODON:00002995",
            "FOODON:03543435",
            "FOODON:00004098",
            "FOODON:03543439",
            "FOODON:00004097",
            "FOODON:00003917",
            "FOODON:03000441",
            "FOODON:00004157",
            "FOODON:00003918",
            "FOODON:03316771",
            "FOODON:00003914",
            "FOODON:03543722",
            "FOODON:00004175",
            "FOODON:03000442",
            "FOODON:00004711",
            "FOODON:00005461",
            "FOODON:00002503",
            "FOODON:03316761",
            "FOODON:00004163",
            "FOODON:03304061",
            "FOODON:03316703",
            "FOODON:03315302",
            "FOODON:03315099",
            "FOODON:03460231",
            "FOODON:03317115",
            "FOODON:03305232",
            "FOODON:03316038",
            "FOODON:03317057",
            "FOODON:03316704",
            "FOODON:03315098",
            "FOODON:03302818",
            "FOODON:03302821",
            "FOODON:03315968",
            "FOODON:03301332",
            "FOODON:03315114",
            "FOODON:03305849",
            "FOODON:03303173",
            "FOODON:03315236"
        ]
    },
    {
        "query": "COCOA",
        "chosen_curie": "FOODON:00001215",
        "true_curies": [
            "NCIT:C45305",
            "FOODON:03301072",
            "CHEBI:60004",
            "NCBITaxon:3641"
        ],
        "explanation": "While several terms mention \"cocoa\", FOODON:00001215, 'cacao food product', encompasses the broadest range of cocoa-derived products, aligning with the general and widely understood meaning of \"COCOA.\"  More specific terms like cocoa powder or breakfast cocoa would be incorrect if the user intended a general reference to the cocoa bean and its derivatives.",
        "candidates_provided": [
            "FOODON:03301072",
            "FOODON:03316771",
            "FOODON:00005461",
            "FOODON:00002503",
            "FOODON:03301070",
            "FOODON:03543436",
            "FOODON:03543722",
            "FOODON:03301071",
            "FOODON:03543117",
            "FOODON:03543439",
            "FOODON:03543435",
            "FOODON:03543434",
            "FOODON:03543428",
            "FOODON:03543429",
            "FOODON:03543043",
            "FOODON:03400845",
            "FOODON:03543403",
            "FOODON:00001215",
            "FOODON:03400913",
            "FOODON:03543673",
            "FOODON:03315099",
            "FOODON:03315114",
            "FOODON:03460231",
            "FOODON:03315302",
            "FOODON:03302818",
            "FOODON:03316038",
            "FOODON:03305232",
            "FOODON:03315396",
            "FOODON:03315098",
            "FOODON:03316704",
            "FOODON:03317057",
            "FOODON:03317115",
            "FOODON:03305849",
            "FOODON:03311568",
            "FOODON:00001747",
            "FOODON:03303173",
            "FOODON:03316772",
            "FOODON:03310769",
            "FOODON:03316703",
            "FOODON:03315236"
        ]
    },
    {
        "query": "WHITE",
        "chosen_curie": "FOODON:02020725",
        "true_curies": [
            "PATO:0000323",
            "HANCESTRO:0005"
        ],
        "explanation": "While several options describe foods with 'white' in their name, FOODON:02020725, 'quail egg white', is the most specific and directly refers to a distinct food component. Other 'white' terms are more general descriptions of color or refer to an entire food item, while 'quail egg white' points to a specific part of a food.",
        "candidates_provided": [
            "FOODON:00003873",
            "FOODON:00003762",
            "FOODON:00003783",
            "FOODON:00003757",
            "FOODON:02021978",
            "FOODON:00003552",
            "FOODON:02021973",
            "FOODON:02021976",
            "FOODON:02021974",
            "FOODON:03414533",
            "FOODON:02022088",
            "FOODON:00003559",
            "FOODON:02021972",
            "FOODON:00003462",
            "FOODON:03309415",
            "FOODON:03301232",
            "FOODON:00003777",
            "FOODON:00003518",
            "FOODON:02020725",
            "FOODON:02020155",
            "PATO:0000323",
            "FOODON:03308307",
            "FOODON:03309088",
            "FOODON:03530274",
            "FOODON:03530283",
            "FOODON:03309329",
            "FOODON:03306978",
            "FOODON:03315070",
            "FOODON:03311609",
            "FOODON:03412894",
            "FOODON:03303181",
            "FOODON:03304162",
            "FOODON:03316167",
            "FOODON:03510096",
            "FOODON:03412402",
            "FOODON:03309213",
            "FOODON:00002363",
            "FOODON:03302338",
            "FOODON:03301055",
            "FOODON:03308684"
        ]
    },
    {
        "query": "CANTALOUPE",
        "chosen_curie": "FOODON:00001288",
        "true_curies": [
            "NCBITaxon:3658",
            "FOODON:00003577"
        ],
        "explanation": "While several options mention cantaloupe, FOODON:00001288, 'cantaloupe fruit food product', provides the most comprehensive definition encompassing various names and classifications of the fruit as a food product.  Other options focus on the plant or specific cultivars, making this the most suitable general term for the entity 'CANTALOUPE'.",
        "candidates_provided": [
            "FOODON:03000243",
            "FOODON:00003577",
            "FOODON:03411471",
            "FOODON:03401699",
            "FOODON:00001288",
            "FOODON:03414222",
            "FOODON:03302805",
            "FOODON:00004880",
            "FOODON:03414220",
            "FOODON:03414224",
            "NCBITaxon:3656",
            "FOODON:03414226",
            "FOODON:03414459",
            "NCBITaxon:3658",
            "FOODON:03540694",
            "NCBITaxon:12953",
            "FOODON:03411903",
            "FOODON:03412305",
            "FOODON:03414361",
            "FOODON:00001026",
            "FOODON:03530142",
            "FOODON:03413393",
            "FOODON:03414000",
            "FOODON:03301120",
            "FOODON:03414857",
            "FOODON:03412654",
            "FOODON:03413388",
            "FOODON:00003342",
            "FOODON:03412712",
            "FOODON:03413839",
            "FOODON:03413663",
            "FOODON:03412698"
        ]
    },
    {
        "query": "VANILLA",
        "chosen_curie": "FOODON:03541398",
        "true_curies": [
            "FOODON:03411355",
            "CHEBI:36080",
            "FOODON:03316764",
            "NCBITaxon:51238",
            "FOODON:00002976",
            "FOODON:00002328"
        ],
        "explanation": "While several terms mention \"vanilla,\" FOODON:03541398 is the most comprehensive. It encompasses various vanilla species and explicitly refers to spices derived from the vanilla fruit, aligning with the broad interpretation of \"VANILLA\" as a food ingredient.  Other options are more specific to particular vanilla products (e.g., extract, bean) or plant species, while this term covers them all.",
        "candidates_provided": [
            "FOODON:00002328",
            "NCBITaxon:51239",
            "FOODON:03316764",
            "FOODON:03302056",
            "FOODON:03411355",
            "NCBITaxon:117957",
            "FOODON:00002396",
            "FOODON:00003738",
            "FOODON:03316763",
            "FOODON:03415042",
            "FOODON:03316761",
            "FOODON:03305153",
            "FOODON:03541398",
            "FOODON:03541399",
            "FOODON:03541397",
            "FOODON:03544416",
            "FOODON:03541401",
            "FOODON:03544417",
            "FOODON:03544401",
            "NCBITaxon:51238",
            "FOODON:03307348",
            "FOODON:03305800",
            "FOODON:03304426",
            "FOODON:03305844",
            "FOODON:03301629",
            "FOODON:03303151",
            "FOODON:03307273",
            "NCBITaxon:669897",
            "FOODON:03309572",
            "FOODON:03302772",
            "FOODON:03305790",
            "FOODON:03310567",
            "FOODON:03305649",
            "FOODON:03310665",
            "FOODON:03305409",
            "FOODON:03316923",
            "FOODON:03310983",
            "FOODON:03302576",
            "FOODON:03304422",
            "FOODON:03311395"
        ]
    },
    {
        "query": "COFFEE",
        "chosen_curie": "FOODON:00001244",
        "true_curies": [
            "FOODON:03301036",
            "NCBITaxon:13443"
        ],
        "explanation": "While several terms relate to coffee, FOODON:00001244, 'coffee beverage', is the most general and inclusive term encompassing various types of coffee drinks.  More specific terms like 'arabica coffee' or 'robusta coffee' would be incorrect if the user's intention was not to specify a particular type of bean.",
        "candidates_provided": [
            "FOODON:00003063",
            "FOODON:00003062",
            "FOODON:00003943",
            "FOODON:00001244",
            "FOODON:00004877",
            "FOODON:03301036",
            "FOODON:00004878",
            "FOODON:00003061",
            "FOODON:00003399",
            "FOODON:00001139",
            "FOODON:00004879",
            "FOODON:03303109",
            "FOODON:00003274",
            "FOODON:03543711",
            "FOODON:03400892",
            "FOODON:00005574",
            "FOODON:00003944",
            "FOODON:03401517",
            "FOODON:03543701",
            "FOODON:03400845",
            "FOODON:03315398",
            "FOODON:03301035",
            "FOODON:03317674",
            "FOODON:03316230",
            "FOODON:03311432",
            "FOODON:03316454",
            "FOODON:03302655",
            "FOODON:03304930",
            "FOODON:03301477",
            "FOODON:03301316",
            "FOODON:03312050",
            "FOODON:03303096",
            "FOODON:03307680",
            "FOODON:03310196",
            "FOODON:03303114",
            "FOODON:03317450",
            "FOODON:03305423",
            "FOODON:03301602",
            "FOODON:03303095"
        ]
    },
    {
        "query": "COFFEE",
        "chosen_curie": "FOODON:00001244",
        "true_curies": [
            "FOODON:03301036",
            "FOODON:03301926",
            "ENVO:01001125",
            "NCBITaxon:13443"
        ],
        "explanation": "While several terms relate to coffee, FOODON:00001244, 'coffee beverage', is the most general and encompassing term, fitting the user's simple input of 'COFFEE'.  More specific terms (e.g., arabica or robusta coffee) would only be appropriate if more details were provided.",
        "candidates_provided": [
            "FOODON:00003063",
            "FOODON:00003062",
            "FOODON:00003943",
            "FOODON:00001244",
            "FOODON:00004877",
            "FOODON:03301036",
            "FOODON:00004878",
            "FOODON:00003061",
            "FOODON:00003399",
            "FOODON:00001139",
            "FOODON:00004879",
            "FOODON:03303109",
            "FOODON:00003274",
            "FOODON:03543711",
            "FOODON:03400892",
            "FOODON:00005574",
            "FOODON:00003944",
            "FOODON:03401517",
            "FOODON:03543701",
            "FOODON:03400845",
            "FOODON:03315398",
            "FOODON:03301035",
            "FOODON:03317674",
            "FOODON:03316230",
            "FOODON:03311432",
            "FOODON:03316454",
            "FOODON:03302655",
            "FOODON:03304930",
            "FOODON:03301477",
            "FOODON:03301316",
            "FOODON:03312050",
            "FOODON:03303096",
            "FOODON:03307680",
            "FOODON:03310196",
            "FOODON:03303114",
            "FOODON:03317450",
            "FOODON:03305423",
            "FOODON:03301602",
            "FOODON:03303095"
        ]
    },
    {
        "query": "WHITE CHOCOLATE",
        "chosen_curie": "FOODON:03543041",
        "true_curies": [
            "FOODON:03301317",
            "FOODON:03303225",
            "FOODON:03301329",
            "NCBITaxon:3641",
            "FOODON:03307240",
            "HANCESTRO:0005",
            "PATO:0000323"
        ],
        "explanation": "FOODON:03543041 ('30410 - white chocolate (efsa foodex2)') is the best match because its label exactly matches the user's entity and its definition specifically describes white chocolate according to EU legislation, providing a precise and accurate description.",
        "candidates_provided": [
            "FOODON:03400839",
            "FOODON:00003873",
            "FOODON:00003762",
            "FOODON:00003783",
            "FOODON:03543041",
            "FOODON:00002562",
            "FOODON:00003879",
            "FOODON:00003757",
            "FOODON:02021978",
            "FOODON:00003552",
            "FOODON:02021973",
            "FOODON:02021976",
            "FOODON:02021974",
            "FOODON:00003875",
            "FOODON:03400272",
            "FOODON:03414533",
            "FOODON:02022088",
            "FOODON:00003559",
            "FOODON:03400288",
            "FOODON:02021972",
            "FOODON:03307240",
            "FOODON:03303596",
            "FOODON:03310448",
            "FOODON:03460231",
            "FOODON:03301007",
            "FOODON:00001733",
            "FOODON:03315302",
            "FOODON:03301329",
            "FOODON:03302806",
            "FOODON:03303785",
            "FOODON:03303615",
            "FOODON:03305368",
            "FOODON:00001734",
            "FOODON:03303611",
            "FOODON:03316706",
            "FOODON:00001280",
            "FOODON:03302821",
            "FOODON:03305848",
            "FOODON:03302823",
            "FOODON:03302882"
        ]
    },
    {
        "query": "COFFEE CREAMER",
        "chosen_curie": "FOODON:03543840",
        "true_curies": [
            "FOODON:03301036",
            "FOODON:03305264",
            "NCBITaxon:13443"
        ],
        "explanation": "FOODON:03543840 ('38400 - non dairy coffee creamer (efsa foodex2)') is the most appropriate term because it explicitly describes non-dairy coffee creamers, directly addressing the user's entity. While other terms mention 'coffee creamer,' this option provides a precise definition and clarifies the non-dairy aspect, which is a key characteristic of many coffee creamers.",
        "candidates_provided": [
            "FOODON:00003063",
            "FOODON:00003062",
            "FOODON:03543840",
            "FOODON:03305264",
            "FOODON:03304930",
            "FOODON:03400788",
            "FOODON:00003943",
            "FOODON:03302784",
            "FOODON:00001244",
            "FOODON:00004877",
            "FOODON:03301036",
            "FOODON:00004878",
            "FOODON:00003061",
            "FOODON:00003399",
            "FOODON:00001139",
            "FOODON:00004879",
            "FOODON:03303109",
            "FOODON:00003274",
            "FOODON:03543711",
            "FOODON:03400892",
            "FOODON:03304474",
            "FOODON:03301602",
            "FOODON:03317674",
            "FOODON:03315398",
            "FOODON:03301035",
            "FOODON:03302655",
            "FOODON:03307680",
            "FOODON:03304323",
            "FOODON:03315399",
            "FOODON:03305853",
            "FOODON:03316230",
            "FOODON:03311432",
            "FOODON:03310196",
            "FOODON:03303107",
            "FOODON:03316454",
            "FOODON:03312050",
            "FOODON:03304498"
        ]
    },
    {
        "query": "EGG WHITE",
        "chosen_curie": "FOODON:02020155",
        "true_curies": [
            "UBERON:0008944",
            "FOODON:03304840",
            "HANCESTRO:0005",
            "PATO:0000323",
            "FOODON:03315146"
        ],
        "explanation": "While FOODON:02020001 (animal egg white) is a broader category,  FOODON:02020155 (chicken egg white) is a more specific and likely more common interpretation of \"EGG WHITE.\"  The user entity does not specify a particular species of bird, but chicken eggs are the most prevalent globally.",
        "candidates_provided": [
            "FOODON:02020725",
            "FOODON:02020155",
            "FOODON:02020379",
            "FOODON:02020001",
            "FOODON:02020120",
            "FOODON:02020409",
            "FOODON:02020780",
            "FOODON:02020726",
            "FOODON:02020156",
            "FOODON:00004426",
            "FOODON:02020781",
            "FOODON:02020410",
            "FOODON:02020002",
            "FOODON:02020380",
            "FOODON:00004704",
            "FOODON:03316061",
            "FOODON:00004270",
            "FOODON:00004269",
            "FOODON:00002802",
            "FOODON:00002801",
            "FOODON:03315181",
            "FOODON:03310224",
            "FOODON:03310235",
            "FOODON:00002798",
            "FOODON:03304722",
            "FOODON:03310225",
            "FOODON:03311326",
            "FOODON:03310155",
            "FOODON:03305612",
            "FOODON:03304799",
            "FOODON:03315743",
            "FOODON:03304736",
            "FOODON:03315738",
            "FOODON:03302720",
            "FOODON:03420274",
            "FOODON:03309503",
            "FOODON:03316922",
            "FOODON:03304501"
        ]
    },
    {
        "query": "MUSHROOM",
        "chosen_curie": "FOODON:00005332",
        "true_curies": [
            "FOODON:03412974",
            "FOODON:03301303",
            "obo:FAO_0000012",
            "FOODON:00003528"
        ],
        "explanation": "While several terms mention 'mushroom',  FOODON:00005332 is the most specific term that can be reliably assigned to the provided entity without additional context.  The user's entry 'MUSHROOM' is too broad for terms like 'white mushroom' or 'portobello mushroom', and the lack of specification prevents the choice of other more specific mushroom types. The synonym 'mushroom' in FOODON:00005332 makes it the most appropriate choice.",
        "candidates_provided": [
            "FOODON:00003462",
            "FOODON:00003464",
            "FOODON:00003463",
            "FOODON:03413452",
            "FOODON:00004258",
            "FOODON:00004254",
            "FOODON:00004255",
            "FOODON:00004257",
            "FOODON:00005332",
            "FOODON:00003465",
            "FOODON:03306536",
            "FOODON:00004929",
            "FOODON:00005329",
            "FOODON:00005334",
            "FOODON:00004709",
            "FOODON:00004930",
            "FOODON:03301303",
            "FOODON:03543957",
            "FOODON:00003528",
            "FOODON:03310082",
            "FOODON:00001287",
            "FOODON:03412937",
            "FOODON:03310677",
            "FOODON:00002050",
            "FOODON:03316179",
            "FOODON:03309555",
            "FOODON:03316904",
            "FOODON:03309654",
            "FOODON:03308510",
            "FOODON:00004253",
            "FOODON:03414174",
            "FOODON:03306535",
            "FOODON:03306490",
            "FOODON:03412521",
            "FOODON:03304727",
            "FOODON:03315123",
            "FOODON:03306538",
            "FOODON:03311148",
            "FOODON:03304472"
        ]
    },
    {
        "query": "MUSHROOM",
        "chosen_curie": "FOODON:00005329",
        "true_curies": [
            "NCIT:C45305",
            "obo:FAO_0000012",
            "FOODON:03301716",
            "NCBITaxon:3562",
            "FOODON:00003528",
            "FOODON:03301303",
            "CHEBI:60004",
            "FOODON:00003496"
        ],
        "explanation": "While many terms refer to specific types of mushrooms, \"piece(s) of mushroom fruitbody\" is the most general and inclusive term that encompasses all types of mushrooms. The user entity 'MUSHROOM' is broad, making this the best fit. More specific terms like 'white mushroom' or 'portobello mushroom' would be inappropriate unless additional context was provided.",
        "candidates_provided": [
            "FOODON:00003462",
            "FOODON:00003464",
            "FOODON:00003463",
            "FOODON:03413452",
            "FOODON:00004258",
            "FOODON:00004254",
            "FOODON:00004255",
            "FOODON:00004257",
            "FOODON:00005332",
            "FOODON:00003465",
            "FOODON:03306536",
            "FOODON:00004929",
            "FOODON:00005329",
            "FOODON:00005334",
            "FOODON:00004709",
            "FOODON:00004930",
            "FOODON:03301303",
            "FOODON:03543957",
            "FOODON:00003528",
            "FOODON:03310082",
            "FOODON:00001287",
            "FOODON:03412937",
            "FOODON:03310677",
            "FOODON:00002050",
            "FOODON:03316179",
            "FOODON:03309555",
            "FOODON:03316904",
            "FOODON:03309654",
            "FOODON:03308510",
            "FOODON:00004253",
            "FOODON:03414174",
            "FOODON:03306535",
            "FOODON:03306490",
            "FOODON:03412521",
            "FOODON:03304727",
            "FOODON:03315123",
            "FOODON:03306538",
            "FOODON:03311148",
            "FOODON:03304472"
        ]
    },
    {
        "query": "WHITE",
        "chosen_curie": "FOODON:02021978",
        "true_curies": [
            "PATO:0000323",
            "FOODON:03302458",
            "FOODON:00001013",
            "HANCESTRO:0005"
        ],
        "explanation": "While several options mention \"white\",  FOODON:02021978, \"white sucker fillet\", is the most specific and clearly defined term.  Others are too general (e.g., \"white\"), or describe specific food items with \"white\" as an adjective. The fillet is a precise food item and is clearly defined.",
        "candidates_provided": [
            "FOODON:00003873",
            "FOODON:00003762",
            "FOODON:00003783",
            "FOODON:00003757",
            "FOODON:02021978",
            "FOODON:00003552",
            "FOODON:02021973",
            "FOODON:02021976",
            "FOODON:02021974",
            "FOODON:03414533",
            "FOODON:02022088",
            "FOODON:00003559",
            "FOODON:02021972",
            "FOODON:00003462",
            "FOODON:03309415",
            "FOODON:03301232",
            "FOODON:00003777",
            "FOODON:00003518",
            "FOODON:02020725",
            "FOODON:02020155",
            "PATO:0000323",
            "FOODON:03308307",
            "FOODON:03309088",
            "FOODON:03530274",
            "FOODON:03530283",
            "FOODON:03309329",
            "FOODON:03306978",
            "FOODON:03315070",
            "FOODON:03311609",
            "FOODON:03412894",
            "FOODON:03303181",
            "FOODON:03304162",
            "FOODON:03316167",
            "FOODON:03510096",
            "FOODON:03412402",
            "FOODON:03309213",
            "FOODON:00002363",
            "FOODON:03302338",
            "FOODON:03301055",
            "FOODON:03308684"
        ]
    },
    {
        "query": "KEFIR",
        "chosen_curie": "FOODON:00001086",
        "true_curies": [
            "FOODON:03310290"
        ],
        "explanation": "FOODON:00001086 ('kefir food product') provides a precise definition of kefir as a fermented milk drink, detailing its production process and highlighting the role of kefir grains and probiotics.  Other options are either too generic (e.g., 'kefir'), too specific (e.g., 'kefir (lowfat)'), or refer to unrelated entities.  While FOODON:03542706 mentions kefir, its definition is vague and relies on external links.",
        "candidates_provided": [
            "FOODON:03542706",
            "FOODON:00001086",
            "FOODON:03310290",
            "FOODON:03304697",
            "FOODON:03304701",
            "FOODON:03400783",
            "FOODON:03542710",
            "obo:AfPO_0000091",
            "FOODON:03412237",
            "obo:AfPO_0000436",
            "FOODON:03411910",
            "FOODON:00001080",
            "obo:AfPO_0000258",
            "FOODON:03411546",
            "FOODON:03412421",
            "FOODON:03413813",
            "FOODON:03411402",
            "FOODON:03415040",
            "FOODON:03412710",
            "CHEBI:37404",
            "FOODON:00001983",
            "CHEBI:6099",
            "FOODON:03414255"
        ]
    },
    {
        "query": "QUINOA",
        "chosen_curie": "FOODON:00004188",
        "true_curies": [
            "NCIT:C45305",
            "NCBITaxon:63459",
            "FOODON:03310193",
            "FOODON:03301116",
            "CHEBI:60004"
        ],
        "explanation": "While several options mention quinoa, FOODON:00004188, 'quinoa seed', is the most specific and directly addresses the user's entity.  Other options refer to derived products (flour, food products) or specific cultivars, making 'quinoa seed' the most appropriate general term.",
        "candidates_provided": [
            "NCBITaxon:63459",
            "FOODON:00004188",
            "FOODON:00004506",
            "FOODON:00001192",
            "FOODON:00004868",
            "FOODON:00004405",
            "FOODON:03310193",
            "FOODON:00004869",
            "FOODON:00004870",
            "FOODON:03540015",
            "FOODON:03412027",
            "NCBITaxon:882375",
            "FOODON:03400759",
            "FOODON:03311543",
            "FOODON:03315449",
            "FOODON:03302976",
            "FOODON:00001663",
            "FOODON:03000431",
            "NCBITaxon:3913",
            "FOODON:03460177",
            "FOODON:03315299",
            "FOODON:00002813"
        ]
    },
    {
        "query": "MUSHROOM",
        "chosen_curie": "FOODON:00003465",
        "true_curies": [
            "NCIT:C45305",
            "FOODON:03315904",
            "obo:FAO_0000012",
            "FOODON:00003528",
            "FOODON:03301303",
            "CHEBI:60004"
        ],
        "explanation": "While many options refer to specific types of mushrooms, \"cultivated mushroom\" (FOODON:00003465) is the most general and encompassing term for mushrooms that are grown commercially.  The user's input is simply \"MUSHROOM,\" which doesn't specify a type, making the general term the best fit. Other general options such as \"mushroom fruitbody\" are too broad and lack the specificity of cultivated mushroom for commercial use.",
        "candidates_provided": [
            "FOODON:00003462",
            "FOODON:00003464",
            "FOODON:00003463",
            "FOODON:03413452",
            "FOODON:00004258",
            "FOODON:00004254",
            "FOODON:00004255",
            "FOODON:00004257",
            "FOODON:00005332",
            "FOODON:00003465",
            "FOODON:03306536",
            "FOODON:00004929",
            "FOODON:00005329",
            "FOODON:00005334",
            "FOODON:00004709",
            "FOODON:00004930",
            "FOODON:03301303",
            "FOODON:03543957",
            "FOODON:00003528",
            "FOODON:03310082",
            "FOODON:00001287",
            "FOODON:03412937",
            "FOODON:03310677",
            "FOODON:00002050",
            "FOODON:03316179",
            "FOODON:03309555",
            "FOODON:03316904",
            "FOODON:03309654",
            "FOODON:03308510",
            "FOODON:00004253",
            "FOODON:03414174",
            "FOODON:03306535",
            "FOODON:03306490",
            "FOODON:03412521",
            "FOODON:03304727",
            "FOODON:03315123",
            "FOODON:03306538",
            "FOODON:03311148",
            "FOODON:03304472"
        ]
    },
    {
        "query": "OAT",
        "chosen_curie": "FOODON:00003429",
        "true_curies": [
            "FOODON:03309855"
        ],
        "explanation": "While several terms relate to oats, FOODON:00003429 ('oat') is the most general and encompassing term.  Others specify processed forms (bran, flour, etc.) or plant parts (straw). 'OAT' as an input is best represented by the general term for the fruit of the oat plant.",
        "candidates_provided": [
            "FOODON:00003429",
            "FOODON:00004219",
            "FOODON:03309878",
            "FOODON:00003774",
            "FOODON:03540034",
            "FOODON:03540354",
            "FOODON:00005553",
            "FOODON:03540324",
            "FOODON:03311725",
            "FOODON:03540035",
            "FOODON:03540109",
            "FOODON:03544164",
            "FOODON:00001189",
            "FOODON:03540076",
            "FOODON:03540100",
            "FOODON:03540314",
            "FOODON:03540315",
            "FOODON:03540316",
            "FOODON:03540343",
            "FOODON:03540344",
            "FOODON:03310307",
            "FOODON:03317167",
            "FOODON:03317168",
            "FOODON:03315188",
            "FOODON:03311064",
            "FOODON:03310651",
            "FOODON:00001760",
            "FOODON:03311248",
            "FOODON:03309855",
            "FOODON:03411219",
            "FOODON:03303213",
            "FOODON:03305723",
            "FOODON:03414319",
            "FOODON:03304828",
            "FOODON:00004515",
            "FOODON:03414078"
        ]
    },
    {
        "query": "PINEAPPLE",
        "chosen_curie": "FOODON:00003459",
        "true_curies": [
            "FOODON:03315552",
            "NCBITaxon:4615",
            "FOODON:03301831"
        ],
        "explanation": "While several options refer to pineapple, FOODON:00003459 provides the most general and accurate definition of a pineapple as a fruit from the Ananas comosus plant.  Other options specify preparations or varieties, while this term encompasses all of them.",
        "candidates_provided": [
            "FOODON:03301831",
            "FOODON:00003459",
            "FOODON:00005319",
            "FOODON:00005320",
            "FOODON:00003073",
            "FOODON:00004238",
            "FOODON:03543203",
            "FOODON:03543176",
            "FOODON:03543247",
            "FOODON:03544349",
            "FOODON:03541875",
            "FOODON:03543295",
            "FOODON:03543314",
            "FOODON:03541855",
            "FOODON:03541837",
            "FOODON:00003930",
            "FOODON:03306054",
            "FOODON:03306782",
            "FOODON:03303912",
            "FOODON:03306714",
            "FOODON:00002119",
            "FOODON:03303126",
            "FOODON:00002120",
            "obo:FLOPO_0016496",
            "FOODON:03316531",
            "FOODON:03309800",
            "FOODON:03301003",
            "FOODON:03420137",
            "FOODON:00002481",
            "FOODON:03306770",
            "FOODON:03315615",
            "FOODON:03304862",
            "FOODON:00004186",
            "FOODON:03317622",
            "FOODON:03420138",
            "FOODON:03306997"
        ]
    },
    {
        "query": "SPARKLING WINE",
        "chosen_curie": "FOODON:03543353",
        "true_curies": [
            "FOODON:03310759"
        ],
        "explanation": "FOODON:03543353 ('sparkling wine') is the most appropriate term because its label exactly matches the user's entity and its definition explicitly encompasses all types of sparkling wine.  While FOODON:03400887 also includes sparkling wine, it is broader, encompassing semi-sparkling wines as well.  Other options are specific types of wine (Prosecco, Riesling etc.) or broader categories of wine that don't necessarily include the sparkling characteristic.",
        "candidates_provided": [
            "FOODON:03400887",
            "FOODON:03543353",
            "FOODON:00002611",
            "FOODON:00004048",
            "FOODON:00002609",
            "FOODON:03543355",
            "FOODON:00002607",
            "FOODON:03317393",
            "FOODON:00002639",
            "FOODON:00002601",
            "FOODON:00002393",
            "FOODON:03310759",
            "FOODON:03311123",
            "FOODON:00002584",
            "FOODON:03543348",
            "FOODON:00002614",
            "FOODON:00002627",
            "FOODON:00002590",
            "FOODON:00002625",
            "FOODON:00002629",
            "FOODON:03316203",
            "FOODON:00004047",
            "FOODON:00002577",
            "FOODON:03304270",
            "FOODON:03317573",
            "FOODON:03303222",
            "FOODON:03315941",
            "FOODON:03304276",
            "FOODON:03301567",
            "FOODON:03317392",
            "FOODON:03317615",
            "FOODON:00002364",
            "FOODON:03315563",
            "FOODON:00001999",
            "FOODON:03301013",
            "FOODON:03315562",
            "FOODON:03317658",
            "FOODON:03317565",
            "FOODON:03303206"
        ]
    },
    {
        "query": "BANANA",
        "chosen_curie": "FOODON:00004184",
        "true_curies": [
            "NCIT:C45305",
            "FOODON:03316257",
            "FOODON:03311513",
            "NCBITaxon:4641",
            "CHEBI:60004",
            "FOODON:03420108"
        ],
        "explanation": "While FOODON:00004184 ('banana (raw)') is specific to raw bananas,  it's a more precise match than the broader term 'banana' (FOODON:00004184) because the user entity lacks specification of ripeness.  Other options refer to specific banana varieties, banana products, or other fruits altogether.",
        "candidates_provided": [
            "FOODON:03316257",
            "FOODON:03000126",
            "FOODON:00003771",
            "FOODON:00004183",
            "FOODON:00004184",
            "FOODON:03303705",
            "FOODON:00003608",
            "FOODON:00005197",
            "FOODON:00004796",
            "FOODON:00004798",
            "FOODON:03000127",
            "FOODON:00004797",
            "FOODON:00004801",
            "FOODON:00004799",
            "FOODON:03311513",
            "FOODON:00004180",
            "FOODON:00001628",
            "FOODON:03413722",
            "FOODON:00002793",
            "FOODON:03411568",
            "FOODON:00001629",
            "FOODON:00002159",
            "FOODON:00002794",
            "FOODON:03305869",
            "FOODON:03301964",
            "FOODON:03414270",
            "obo:FLOPO_0016496",
            "FOODON:03304221",
            "FOODON:03315615",
            "FOODON:03303591",
            "FOODON:03315614",
            "FOODON:00001640",
            "FOODON:03307587",
            "FOODON:00002481",
            "FOODON:03316531",
            "FOODON:03317424",
            "FOODON:03420138"
        ]
    },
    {
        "query": "CHILLED",
        "chosen_curie": "FOODON:00004725",
        "true_curies": [
            "FOODON:03301036",
            "FOODON:00002642",
            "NCBITaxon:13443"
        ],
        "explanation": "FOODON:00004725 ('chilled') provides the most accurate and general definition of 'chilled' as a temperature characteristic, unlike other options which refer to specific chilled food items or processes.  While FOODON:00002642 ('food (chilled)') is close,  FOODON:00004725 is a more fundamental and broadly applicable term within a food ontology.",
        "candidates_provided": [
            "FOODON:00002642",
            "FOODON:00004726",
            "FOODON:00004725",
            "FOODON:00004730",
            "FOODON:03317226",
            "FOODON:03305980",
            "FOODON:03317102",
            "FOODON:03317256",
            "FOODON:03317223",
            "FOODON:03317245",
            "FOODON:03315534",
            "FOODON:03311827",
            "FOODON:03305983",
            "FOODON:03311269",
            "PATO:0001985",
            "FOODON:00004727",
            "FOODON:00004729",
            "PATO:0001306",
            "obo:UO_0000005",
            "obo:UO_0000027",
            "FOODON:03470128",
            "FOODON:03470132",
            "obo:UO_1000027",
            "FOODON:00005179",
            "obo:UO_1000195",
            "FOODON:03305490",
            "FOODON:00004728",
            "FOODON:03470131",
            "obo:UO_0000195",
            "FOODON:03470142",
            "FOODON:03460241"
        ]
    },
    {
        "query": "CARAMEL",
        "chosen_curie": "FOODON:03316628",
        "true_curies": [
            "FOODON:03317034"
        ],
        "explanation": "While several terms relate to caramel, FOODON:03316628 ('caramel coating food product') is the most general and encompassing term, fitting the broad nature of the user's entity 'CARAMEL' which can be used in various forms (e.g., coating, filling, candy) without specifying the exact form or application.",
        "candidates_provided": [
            "FOODON:03315100",
            "FOODON:03543083",
            "FOODON:03543065",
            "FOODON:03544222",
            "FOODON:03401840",
            "FOODON:03317034",
            "FOODON:03302881",
            "FOODON:03316659",
            "FOODON:03413187",
            "FOODON:03412995",
            "FOODON:03316627",
            "FOODON:03301956",
            "FOODON:03303427",
            "FOODON:03400173",
            "FOODON:03413294",
            "FOODON:03310432",
            "FOODON:03413063",
            "FOODON:03316628",
            "FOODON:03311396",
            "FOODON:00001682",
            "FOODON:03302772",
            "FOODON:03316639",
            "FOODON:03311471",
            "FOODON:03316469",
            "FOODON:03316217",
            "FOODON:03305409",
            "FOODON:03310567",
            "FOODON:03316428",
            "FOODON:03316923",
            "FOODON:03305257",
            "FOODON:03316359",
            "FOODON:03316299",
            "FOODON:03460360"
        ]
    },
    {
        "query": "RICE",
        "chosen_curie": "FOODON:00004320",
        "true_curies": [
            "FOODON:03301641",
            "NCBITaxon:4530",
            "FOODON:03301116"
        ],
        "explanation": "While FOODON:00004327 (rice) is a good match, it's too general.  Many of the other options represent processed forms of rice or specific varieties. FOODON:00004320 (rice (cooked)) is a better fit because it specifies a state of the rice. While there's no definition provided for it, the context suggests it better encapsulates the general term 'RICE' without making assumptions about preparation.",
        "candidates_provided": [
            "FOODON:03301641",
            "FOODON:03311875",
            "FOODON:00002881",
            "FOODON:03411322",
            "FOODON:00002849",
            "FOODON:00004676",
            "FOODON:00003438",
            "FOODON:00002867",
            "FOODON:00004720",
            "FOODON:00004327",
            "FOODON:03600010",
            "FOODON:00003786",
            "FOODON:00001332",
            "FOODON:00004330",
            "FOODON:00002207",
            "FOODON:00005555",
            "FOODON:03601051",
            "FOODON:03309871",
            "FOODON:00002575",
            "FOODON:00003056",
            "FOODON:00004320",
            "FOODON:03306909",
            "FOODON:03302745",
            "FOODON:03310371",
            "FOODON:03307152",
            "FOODON:03311295",
            "FOODON:03305184",
            "FOODON:03310654",
            "FOODON:03304556",
            "FOODON:03312030",
            "FOODON:00004326",
            "FOODON:03304555",
            "FOODON:03307146",
            "FOODON:00001185",
            "FOODON:03307150",
            "FOODON:03304585",
            "FOODON:03304549",
            "FOODON:03310254",
            "FOODON:03311392",
            "FOODON:03304560"
        ]
    },
    {
        "query": "VODKA",
        "chosen_curie": "FOODON:03543383",
        "true_curies": [
            "FOODON:03305518"
        ],
        "explanation": "While FOODON:03305518 ('vodka') is a more concise label, FOODON:03543383 ('vodka and vodka-like spirits') provides a more accurate and comprehensive definition, encompassing the broader category to which vodka belongs.  The inclusion of 'vodka-like spirits' accounts for variations and related products. The definition also includes helpful links to relevant external resources.",
        "candidates_provided": [
            "FOODON:03543383",
            "FOODON:03305518",
            "FOODON:03307501",
            "FOODON:03530166",
            "FOODON:03530170",
            "FOODON:03317365",
            "FOODON:03310770",
            "FOODON:03530171",
            "FOODON:03310661",
            "FOODON:03530167",
            "FOODON:03305644",
            "FOODON:03530165",
            "FOODON:03530169",
            "FOODON:03530168",
            "FOODON:03303646",
            "FOODON:03317463",
            "FOODON:03308809",
            "FOODON:03316011",
            "FOODON:03317462",
            "FOODON:03307300",
            "FOODON:00001580"
        ]
    },
    {
        "query": "CELERY",
        "chosen_curie": "FOODON:00003636",
        "true_curies": [
            "obo:PO_0025066",
            "NCBITaxon:117781",
            "FOODON:03301727"
        ],
        "explanation": "While several terms relate to celery, FOODON:00003636 ('celery bunch') is the most appropriate because 'celery' typically refers to a bunch of stalks,  making it a more comprehensive and common representation of the user entity than individual parts like stalks or hearts. Other options specify processed forms or particular parts of the celery plant, which are less likely to be the user's intended meaning of 'CELERY'.",
        "candidates_provided": [
            "FOODON:00004121",
            "FOODON:00003589",
            "FOODON:00003636",
            "FOODON:03000036",
            "FOODON:00003635",
            "FOODON:00003411",
            "FOODON:03310560",
            "FOODON:00001705",
            "FOODON:00001704",
            "FOODON:03301727",
            "FOODON:03411729",
            "FOODON:03401857",
            "FOODON:03401574",
            "FOODON:03543210",
            "FOODON:03540832",
            "FOODON:03541296",
            "FOODON:03541266",
            "FOODON:03541297",
            "FOODON:00003034",
            "FOODON:03540833",
            "FOODON:00004123",
            "FOODON:03303374",
            "FOODON:03311578",
            "FOODON:03411634",
            "FOODON:03412030",
            "FOODON:03315875",
            "FOODON:03305224",
            "FOODON:03411282",
            "FOODON:03301862",
            "FOODON:03316493",
            "FOODON:03315289",
            "FOODON:00003040",
            "FOODON:03301221",
            "FOODON:03315615",
            "FOODON:03420138",
            "FOODON:03316531",
            "FOODON:03302922",
            "FOODON:03316217",
            "FOODON:03315176"
        ]
    },
    {
        "query": "GLAZE",
        "chosen_curie": "FOODON:03400340",
        "true_curies": [
            "FOODON:03315146"
        ],
        "explanation": "While several terms use \"glaze\" in their label, FOODON:03400340, 'glazing agent (including lubricants) (ec)', provides the most comprehensive definition: a substance applied to a food's surface for shine or protection. This encompasses the broadest range of applications of 'glaze' as a general term, unlike the more specific examples such as confectioner's glaze or honey glaze.  The other 'glaze' terms lack definitions or are too narrow.",
        "candidates_provided": [
            "FOODON:03315146",
            "FOODON:03400214",
            "FOODON:03306214",
            "FOODON:00003912",
            "FOODON:00001906",
            "FOODON:03305629",
            "FOODON:03315381",
            "FOODON:03303890",
            "FOODON:00002526",
            "FOODON:03315711",
            "FOODON:03315709",
            "FOODON:03315710",
            "FOODON:03490231",
            "FOODON:03490130",
            "ENVO:01000480",
            "FOODON:03490278",
            "FOODON:03490273",
            "FOODON:03490281",
            "FOODON:03490276",
            "FOODON:03412708",
            "FOODON:03490279",
            "FOODON:03490210",
            "FOODON:03400340",
            "FOODON:03490274",
            "FOODON:03490282",
            "FOODON:03500040",
            "FOODON:03490134",
            "FOODON:03301349",
            "FOODON:03490280",
            "FOODON:03315746",
            "FOODON:03490277"
        ]
    },
    {
        "query": "STRAWBERRY JAM",
        "chosen_curie": "FOODON:03541806",
        "true_curies": [
            "FOODON:03301124",
            "FOODON:03301722",
            "NCBITaxon:3747",
            "FOODON:00003443",
            "FOODON:03309973"
        ],
        "explanation": "While FOODON:03301124 has the exact label match \"strawberry jam\", FOODON:03541806 (\"18060 - jam, strawberries (efsa foodex2)\") provides a more precise and contextually rich definition specifying that the jam is made from strawberries, aligning with the expected composition of strawberry jam.  Other options are too broad (general fruit jams) or refer to other fruits or variations such as imitation or canned varieties.",
        "candidates_provided": [
            "FOODON:00003443",
            "FOODON:00004627",
            "FOODON:00004625",
            "FOODON:00004626",
            "FOODON:03301722",
            "FOODON:00004224",
            "FOODON:00004225",
            "FOODON:00004624",
            "FOODON:00004622",
            "FOODON:03301124",
            "FOODON:00004623",
            "FOODON:00004226",
            "FOODON:03305864",
            "FOODON:00002283",
            "FOODON:03306600",
            "FOODON:03541812",
            "FOODON:03541806",
            "FOODON:03541822",
            "FOODON:03541807",
            "FOODON:03541817",
            "FOODON:03301108",
            "FOODON:03305202",
            "FOODON:03305865",
            "FOODON:03303913",
            "FOODON:00002282",
            "FOODON:03315672",
            "FOODON:03301125",
            "FOODON:03306425",
            "FOODON:03316782",
            "FOODON:03305243",
            "FOODON:03317536",
            "FOODON:03304852",
            "FOODON:03305967",
            "FOODON:03304853",
            "FOODON:03309973",
            "FOODON:03305785"
        ]
    },
    {
        "query": "MOLASSES",
        "chosen_curie": "FOODON:03543001",
        "true_curies": [
            "NCIT:C45305",
            "CHEBI:60004",
            "CHEBI:83163"
        ],
        "explanation": "While several terms mention 'molasses', FOODON:03543001 is the most general and inclusive term, encompassing all types of molasses.  Other options are specific types of molasses (e.g., sugar cane, sugar beet) or are obsolete or irrelevant.  CHEBI:83163 is a good chemical definition but lacks the food context that FOODON:03543001 provides.",
        "candidates_provided": [
            "FOODON:03543005",
            "FOODON:03543004",
            "FOODON:03543001",
            "FOODON:03543003",
            "FOODON:03543002",
            "FOODON:03543000",
            "CHEBI:83163",
            "FOODON:03400984",
            "FOODON:03301349",
            "FOODON:03306213",
            "FOODON:03303104",
            "FOODON:03315859",
            "FOODON:03303166",
            "FOODON:03315858",
            "FOODON:03315857",
            "FOODON:03306211",
            "FOODON:03460156",
            "FOODON:00002539",
            "FOODON:03315751",
            "FOODON:00002847",
            "FOODON:03412847",
            "FOODON:03414562",
            "FOODON:03530138",
            "FOODON:03414361",
            "FOODON:03412853",
            "FOODON:03412698",
            "FOODON:03500053",
            "FOODON:03301120",
            "FOODON:03412035",
            "IAO:0000600",
            "FOODON:03414005",
            "FOODON:03420220",
            "FOODON:00003342",
            "FOODON:03309195",
            "FOODON:03414367",
            "rdfs:label"
        ]
    },
    {
        "query": "MUFFIN",
        "chosen_curie": "FOODON:03540266",
        "true_curies": [
            "FOODON:03309530"
        ],
        "explanation": "While several options mention 'muffin', FOODON:03540266 is the most appropriate because it provides a broad definition encompassing various types of muffins, including those with fillings or as cupcakes, aligning with the general understanding of 'muffin'.  Other options are too specific (e.g., 'english muffin', 'corn muffin mix') or are obsolete.",
        "candidates_provided": [
            "FOODON:03309530",
            "FOODON:03305833",
            "FOODON:03305164",
            "FOODON:03303936",
            "FOODON:03306235",
            "FOODON:03540266",
            "FOODON:03414361",
            "FOODON:03413478",
            "FOODON:03413998",
            "FOODON:00003342",
            "FOODON:03412436",
            "FOODON:03530143",
            "FOODON:03411784",
            "FOODON:03412421",
            "FOODON:03414121",
            "FOODON:03414562",
            "FOODON:03412043",
            "FOODON:00001193",
            "FOODON:03411903",
            "FOODON:03411402",
            "FOODON:03530138",
            "FOODON:03414943",
            "FOODON:03412237",
            "FOODON:03414275",
            "FOODON:03414293",
            "FOODON:03412698"
        ]
    },
    {
        "query": "HASH",
        "chosen_curie": "FOODON:00001598",
        "true_curies": [
            "FOODON:03301906",
            "FOODON:03307343",
            "PATO:0000952"
        ],
        "explanation": "While several terms include 'hash' as a label or synonym, FOODON:00001598, 'animal-based stew or hash', provides the most encompassing definition and covers various types of hash.  Other options are more specific types of hash, making this the best general match for the ambiguous user input 'HASH'.",
        "candidates_provided": [
            "FOODON:03307343",
            "FOODON:00001598",
            "FOODON:03310607",
            "FOODON:00002276",
            "FOODON:03311317",
            "FOODON:03302098",
            "FOODON:00002172",
            "FOODON:03400212",
            "FOODON:03311316",
            "FOODON:00001729",
            "FOODON:00001698",
            "FOODON:00002734",
            "FOODON:00001607",
            "FOODON:03311443",
            "oboInOwl:hasAlternativeId",
            "oboInOwl:hasOBONamespace",
            "oboInOwl:hasDbXref",
            "rdfs:label",
            "CHEBI:35155",
            "FOODON:03317415",
            "FOODON:03413705",
            "CHEBI:35115",
            "FOODON:03530221",
            "obo:chebi#is_conjugate_base_of",
            "FOODON:03411838",
            "ns1:hasXSDDuration",
            "CHEBI:82663",
            "FOODON:03414885",
            "CHEBI:33973",
            "FOODON:03530234"
        ]
    },
    {
        "query": "VANILLA",
        "chosen_curie": "FOODON:03541398",
        "true_curies": [
            "FOODON:03411355",
            "FOODON:03316764",
            "NCBITaxon:51238",
            "FOODON:00002328",
            "FOODON:03301660"
        ],
        "explanation": "While several terms mention \"vanilla,\" FOODON:03541398 encompasses the broadest range of vanilla forms as a spice derived from the fruit of the *Vanilla fragrans* or *Vanilla planifolia* plants.  It's the most encompassing term that explicitly includes various potential parts of vanilla such as vanilla bean, extract etc.  Other options are more specific to a particular form (extract, bean, etc.) or are plant-centric rather than food-centric.",
        "candidates_provided": [
            "FOODON:00002328",
            "NCBITaxon:51239",
            "FOODON:03316764",
            "FOODON:03302056",
            "FOODON:03411355",
            "NCBITaxon:117957",
            "FOODON:00002396",
            "FOODON:00003738",
            "FOODON:03316763",
            "FOODON:03415042",
            "FOODON:03316761",
            "FOODON:03305153",
            "FOODON:03541398",
            "FOODON:03541399",
            "FOODON:03541397",
            "FOODON:03544416",
            "FOODON:03541401",
            "FOODON:03544417",
            "FOODON:03544401",
            "NCBITaxon:51238",
            "FOODON:03307348",
            "FOODON:03305800",
            "FOODON:03304426",
            "FOODON:03305844",
            "FOODON:03301629",
            "FOODON:03303151",
            "FOODON:03307273",
            "NCBITaxon:669897",
            "FOODON:03309572",
            "FOODON:03302772",
            "FOODON:03305790",
            "FOODON:03310567",
            "FOODON:03305649",
            "FOODON:03310665",
            "FOODON:03305409",
            "FOODON:03316923",
            "FOODON:03310983",
            "FOODON:03302576",
            "FOODON:03304422",
            "FOODON:03311395"
        ]
    },
    {
        "query": "CAKE FLOUR",
        "chosen_curie": "FOODON:03304490",
        "true_curies": [
            "FOODON:03311511",
            "FOODON:03301116"
        ],
        "explanation": "The term 'cake flour (high ratio)' (FOODON:03304490) is the best match because it precisely matches the user's input \"CAKE FLOUR\". While FOODON:03311511 also has the label \"cake flour\", it lacks a definition, making FOODON:03304490 the more informative and preferable choice.",
        "candidates_provided": [
            "FOODON:03302142",
            "FOODON:03304488",
            "FOODON:03601071",
            "FOODON:00002515",
            "FOODON:00004512",
            "FOODON:00002553",
            "FOODON:03311459",
            "FOODON:03304490",
            "FOODON:00002207",
            "FOODON:00004506",
            "FOODON:00003355",
            "FOODON:00004721",
            "FOODON:00004104",
            "FOODON:00004510",
            "FOODON:00003605",
            "FOODON:00004507",
            "FOODON:00004511",
            "FOODON:03311511",
            "FOODON:03310697",
            "FOODON:03304487",
            "FOODON:00001279",
            "FOODON:03315237",
            "FOODON:03302766",
            "FOODON:03316903",
            "FOODON:03306713",
            "FOODON:03317068",
            "FOODON:03316640",
            "FOODON:03317195",
            "FOODON:00001965",
            "FOODON:03316486",
            "FOODON:03316248",
            "FOODON:03303342",
            "FOODON:03311199",
            "FOODON:03306616",
            "FOODON:03306884",
            "FOODON:03315584",
            "FOODON:03309365",
            "FOODON:03311390",
            "FOODON:03302840",
            "FOODON:03315400"
        ]
    },
    {
        "query": "PUDDING",
        "chosen_curie": "FOODON:03400285",
        "true_curies": [
            "NCIT:C45305",
            "CHEBI:60004",
            "FOODON:03301660"
        ],
        "explanation": "While many terms refer to specific types of pudding, FOODON:03400285, 'custard or pudding (us cfr)', is the broadest and most encompassing term that captures the general meaning of 'pudding'.  Other options specify particular ingredients or preparations, making them less suitable as a general 'pudding' term.",
        "candidates_provided": [
            "FOODON:03307094",
            "FOODON:03305135",
            "FOODON:03400285",
            "FOODON:00002557",
            "FOODON:03601039",
            "FOODON:03542939",
            "FOODON:03543981",
            "FOODON:03301660",
            "FOODON:03540307",
            "FOODON:03316578",
            "FOODON:03301612",
            "FOODON:03307102",
            "FOODON:03305044",
            "FOODON:03308693",
            "FOODON:03310796",
            "FOODON:03316146",
            "FOODON:03316264",
            "FOODON:03316145",
            "FOODON:03307100",
            "FOODON:03601055",
            "FOODON:03302751",
            "FOODON:03316440",
            "FOODON:03317080",
            "FOODON:03316969",
            "FOODON:03309502",
            "FOODON:03460182",
            "FOODON:03305012",
            "FOODON:03310350",
            "FOODON:03470181",
            "FOODON:03307537",
            "FOODON:03310869",
            "FOODON:03460268"
        ]
    },
    {
        "query": "EGG WHITE",
        "chosen_curie": "FOODON:02020155",
        "true_curies": [
            "UBERON:0008944",
            "FOODON:03304840",
            "HANCESTRO:0005",
            "PATO:0000323",
            "FOODON:03301304"
        ],
        "explanation": "While FOODON:02020001 (animal egg white) is a broader category,  FOODON:02020155 (chicken egg white) is a more precise and common understanding of \"EGG WHITE.\"  Chicken eggs are the most commonly consumed type of egg, making this the most appropriate choice. The other specific egg white types are less commonly referred to simply as \"egg white.\" ",
        "candidates_provided": [
            "FOODON:02020725",
            "FOODON:02020155",
            "FOODON:02020379",
            "FOODON:02020001",
            "FOODON:02020120",
            "FOODON:02020409",
            "FOODON:02020780",
            "FOODON:02020726",
            "FOODON:02020156",
            "FOODON:00004426",
            "FOODON:02020781",
            "FOODON:02020410",
            "FOODON:02020002",
            "FOODON:02020380",
            "FOODON:00004704",
            "FOODON:03316061",
            "FOODON:00004270",
            "FOODON:00004269",
            "FOODON:00002802",
            "FOODON:00002801",
            "FOODON:03315181",
            "FOODON:03310224",
            "FOODON:03310235",
            "FOODON:00002798",
            "FOODON:03304722",
            "FOODON:03310225",
            "FOODON:03311326",
            "FOODON:03310155",
            "FOODON:03305612",
            "FOODON:03304799",
            "FOODON:03315743",
            "FOODON:03304736",
            "FOODON:03315738",
            "FOODON:03302720",
            "FOODON:03420274",
            "FOODON:03309503",
            "FOODON:03316922",
            "FOODON:03304501"
        ]
    },
    {
        "query": "CARAMEL",
        "chosen_curie": "FOODON:03315100",
        "true_curies": [
            "FOODON:03311146",
            "FOODON:03317034"
        ],
        "explanation": "While several terms mention \"caramel\", FOODON:03315100, \"caramel mass\", is the most specific and appropriate.  It defines caramel in a semi-liquid form, encompassing a broader range of caramel types without being overly restrictive like the hard or soft caramel options.  Other options, such as caramel candy or caramel-coated products, are specific applications rather than the base ingredient.",
        "candidates_provided": [
            "FOODON:03315100",
            "FOODON:03543083",
            "FOODON:03543065",
            "FOODON:03544222",
            "FOODON:03401840",
            "FOODON:03317034",
            "FOODON:03302881",
            "FOODON:03316659",
            "FOODON:03413187",
            "FOODON:03412995",
            "FOODON:03316627",
            "FOODON:03301956",
            "FOODON:03303427",
            "FOODON:03400173",
            "FOODON:03413294",
            "FOODON:03310432",
            "FOODON:03413063",
            "FOODON:03316628",
            "FOODON:03311396",
            "FOODON:00001682",
            "FOODON:03302772",
            "FOODON:03316639",
            "FOODON:03311471",
            "FOODON:03316469",
            "FOODON:03316217",
            "FOODON:03305409",
            "FOODON:03310567",
            "FOODON:03316428",
            "FOODON:03316923",
            "FOODON:03305257",
            "FOODON:03316359",
            "FOODON:03316299",
            "FOODON:03460360"
        ]
    },
    {
        "query": "CHOCOLATE",
        "chosen_curie": "FOODON:03543033",
        "true_curies": [
            "FOODON:03311146",
            "FOODON:03307240",
            "NCBITaxon:3641"
        ],
        "explanation": "While several terms relate to chocolate, FOODON:03543033 ('chocolate and chocolate products (efsa foodex2)') offers the broadest and most encompassing definition, aligning best with the general, unspecific user input of 'CHOCOLATE'.  Other options are specific types of chocolate (e.g., milk chocolate bar, chocolate brownie), or processes (chocolate coating), not the overarching concept.",
        "candidates_provided": [
            "FOODON:03400839",
            "FOODON:00002562",
            "FOODON:00003879",
            "FOODON:00003875",
            "FOODON:03400272",
            "FOODON:03400288",
            "FOODON:03400978",
            "FOODON:03400158",
            "FOODON:03000294",
            "FOODON:03460355",
            "FOODON:03000289",
            "FOODON:03000290",
            "FOODON:03543045",
            "FOODON:03543033",
            "FOODON:03543035",
            "FOODON:03000468",
            "FOODON:00003187",
            "FOODON:03544149",
            "FOODON:03543042",
            "FOODON:03543071",
            "FOODON:03307240",
            "FOODON:00001733",
            "FOODON:03303596",
            "FOODON:03460231",
            "FOODON:03301007",
            "FOODON:03315302",
            "FOODON:00001734",
            "FOODON:03303785",
            "FOODON:03316706",
            "FOODON:03303611",
            "FOODON:03310448",
            "FOODON:00001280",
            "FOODON:03316218",
            "FOODON:03305368",
            "FOODON:03302823",
            "FOODON:03316038",
            "FOODON:03316705",
            "FOODON:03306719",
            "FOODON:03311728",
            "FOODON:03303767"
        ]
    },
    {
        "query": "WHITE CHOCOLATE",
        "chosen_curie": "FOODON:03543041",
        "true_curies": [
            "FOODON:03301329",
            "NCBITaxon:3641",
            "FOODON:03307240",
            "HANCESTRO:0005",
            "PATO:0000323"
        ],
        "explanation": "FOODON:03543041 ('30410 - white chocolate (efsa foodex2)') is the best match because its label precisely matches the user's entity and its definition provides a detailed description of white chocolate according to EU legislation, including its composition and minimum requirements for cocoa butter and dry milk solids.  Other terms, such as FOODON:03400839, are too general, encompassing a broader category of chocolate products.  FOODON:03302806 is a related term (milk chocolate) but not a precise match.",
        "candidates_provided": [
            "FOODON:03400839",
            "FOODON:00003873",
            "FOODON:00003762",
            "FOODON:00003783",
            "FOODON:03543041",
            "FOODON:00002562",
            "FOODON:00003879",
            "FOODON:00003757",
            "FOODON:02021978",
            "FOODON:00003552",
            "FOODON:02021973",
            "FOODON:02021976",
            "FOODON:02021974",
            "FOODON:00003875",
            "FOODON:03400272",
            "FOODON:03414533",
            "FOODON:02022088",
            "FOODON:00003559",
            "FOODON:03400288",
            "FOODON:02021972",
            "FOODON:03307240",
            "FOODON:03303596",
            "FOODON:03310448",
            "FOODON:03460231",
            "FOODON:03301007",
            "FOODON:00001733",
            "FOODON:03315302",
            "FOODON:03301329",
            "FOODON:03302806",
            "FOODON:03303785",
            "FOODON:03303615",
            "FOODON:03305368",
            "FOODON:00001734",
            "FOODON:03303611",
            "FOODON:03316706",
            "FOODON:00001280",
            "FOODON:03302821",
            "FOODON:03305848",
            "FOODON:03302823",
            "FOODON:03302882"
        ]
    },
    {
        "query": "WHITE CHOCOLATE",
        "chosen_curie": "FOODON:03543041",
        "true_curies": [
            "NCIT:C45305",
            "FOODON:03301329",
            "NCBITaxon:3641",
            "FOODON:03307240",
            "HANCESTRO:0005",
            "PATO:0000323",
            "CHEBI:60004"
        ],
        "explanation": "FOODON:03543041 ('30410 - white chocolate (efsa foodex2)') is the best match because its label exactly matches the user's entity ('WHITE CHOCOLATE'), and its definition explicitly describes white chocolate according to EU legislation, providing a precise and accurate specification.",
        "candidates_provided": [
            "FOODON:03400839",
            "FOODON:00003873",
            "FOODON:00003762",
            "FOODON:00003783",
            "FOODON:03543041",
            "FOODON:00002562",
            "FOODON:00003879",
            "FOODON:00003757",
            "FOODON:02021978",
            "FOODON:00003552",
            "FOODON:02021973",
            "FOODON:02021976",
            "FOODON:02021974",
            "FOODON:00003875",
            "FOODON:03400272",
            "FOODON:03414533",
            "FOODON:02022088",
            "FOODON:00003559",
            "FOODON:03400288",
            "FOODON:02021972",
            "FOODON:03307240",
            "FOODON:03303596",
            "FOODON:03310448",
            "FOODON:03460231",
            "FOODON:03301007",
            "FOODON:00001733",
            "FOODON:03315302",
            "FOODON:03301329",
            "FOODON:03302806",
            "FOODON:03303785",
            "FOODON:03303615",
            "FOODON:03305368",
            "FOODON:00001734",
            "FOODON:03303611",
            "FOODON:03316706",
            "FOODON:00001280",
            "FOODON:03302821",
            "FOODON:03305848",
            "FOODON:03302823",
            "FOODON:03302882"
        ]
    },
    {
        "query": "CHOCOLATE",
        "chosen_curie": "FOODON:03543033",
        "true_curies": [
            "NCIT:C45305",
            "FOODON:03307240",
            "CHEBI:60004",
            "NCBITaxon:3641"
        ],
        "explanation": "FOODON:03543033 ('30330 - chocolate and chocolate products (efsa foodex2)') is the most appropriate term because it encompasses the broadest range of chocolate forms without being overly specific to a particular type, such as milk chocolate or chocolate candy.  While other options like FOODON:03400272 are more precise regarding legal definitions, FOODON:03543033 best represents the general user intent of 'CHOCOLATE' as a food category.",
        "candidates_provided": [
            "FOODON:03400839",
            "FOODON:00002562",
            "FOODON:00003879",
            "FOODON:00003875",
            "FOODON:03400272",
            "FOODON:03400288",
            "FOODON:03400978",
            "FOODON:03400158",
            "FOODON:03000294",
            "FOODON:03460355",
            "FOODON:03000289",
            "FOODON:03000290",
            "FOODON:03543045",
            "FOODON:03543033",
            "FOODON:03543035",
            "FOODON:03000468",
            "FOODON:00003187",
            "FOODON:03544149",
            "FOODON:03543042",
            "FOODON:03543071",
            "FOODON:03307240",
            "FOODON:00001733",
            "FOODON:03303596",
            "FOODON:03460231",
            "FOODON:03301007",
            "FOODON:03315302",
            "FOODON:00001734",
            "FOODON:03303785",
            "FOODON:03316706",
            "FOODON:03303611",
            "FOODON:03310448",
            "FOODON:00001280",
            "FOODON:03316218",
            "FOODON:03305368",
            "FOODON:03302823",
            "FOODON:03316038",
            "FOODON:03316705",
            "FOODON:03306719",
            "FOODON:03311728",
            "FOODON:03303767"
        ]
    },
    {
        "query": "FRUIT COCKTAIL",
        "chosen_curie": "FOODON:03305148",
        "true_curies": [
            "obo:PO_0009001",
            "FOODON:03315597",
            "FOODON:03315855"
        ],
        "explanation": "While several options relate to fruit mixtures, FOODON:03305148 ('fruit salad') is the most appropriate general term for 'FRUIT COCKTAIL'.  Options like canned fruit cocktail are too specific.  'Fruit salad' encompasses the broader concept, making it the best fit.",
        "candidates_provided": [
            "FOODON:03541864",
            "FOODON:03315855",
            "FOODON:03400834",
            "FOODON:03305040",
            "FOODON:00002689",
            "FOODON:03544268",
            "FOODON:03315597",
            "FOODON:00002487",
            "FOODON:03543372",
            "FOODON:00003195",
            "FOODON:03304644",
            "FOODON:03400143",
            "FOODON:00003733",
            "FOODON:03303631",
            "FOODON:03302899",
            "FOODON:00003567",
            "FOODON:00004385",
            "FOODON:00003675",
            "FOODON:00003101",
            "obo:PO_0030094",
            "FOODON:03315289",
            "FOODON:03305222",
            "FOODON:03310674",
            "FOODON:03307283",
            "FOODON:03315792",
            "FOODON:03305314",
            "FOODON:00002043",
            "FOODON:03307168",
            "FOODON:03301540",
            "FOODON:03304505",
            "FOODON:00001882",
            "FOODON:03316527",
            "FOODON:03311527",
            "FOODON:03305148",
            "FOODON:03317463",
            "FOODON:03307080",
            "FOODON:03310481",
            "FOODON:03315791"
        ]
    },
    {
        "query": "FRUIT",
        "chosen_curie": "FOODON:03304644",
        "true_curies": [
            "FOODON:03315552",
            "obo:PO_0009001"
        ],
        "explanation": "While many options refer to fruit, FOODON:03304644, 'fruit (raw)', is the most general and encompassing term for the user's entity 'FRUIT'. Other options specify types of fruit or processed forms, making them less suitable as a general representation of 'FRUIT'.",
        "candidates_provided": [
            "FOODON:03305040",
            "FOODON:00002689",
            "FOODON:00002487",
            "FOODON:00003195",
            "FOODON:03304644",
            "FOODON:03400143",
            "FOODON:00003733",
            "FOODON:00003567",
            "FOODON:00004385",
            "FOODON:00003675",
            "FOODON:00003101",
            "obo:PO_0030094",
            "obo:PO_0030092",
            "FOODON:00004580",
            "FOODON:00004250",
            "FOODON:03301109",
            "FOODON:00004605",
            "FOODON:00004602",
            "obo:PO_0030093",
            "FOODON:00004742",
            "FOODON:03316531",
            "FOODON:03412030",
            "FOODON:03315615",
            "FOODON:03411634",
            "obo:FLOPO_0016496",
            "FOODON:03306688",
            "FOODON:00002481",
            "FOODON:03315289",
            "FOODON:03309507",
            "FOODON:00003040",
            "FOODON:03317622",
            "FOODON:03316521",
            "FOODON:03305224",
            "FOODON:03303121",
            "FOODON:03420138",
            "FOODON:03420137",
            "FOODON:03315020",
            "FOODON:03301540",
            "FOODON:03317424",
            "FOODON:00001640"
        ]
    },
    {
        "query": "PRUNE",
        "chosen_curie": "FOODON:00003537",
        "true_curies": [
            "FOODON:03301721"
        ],
        "explanation": "While several terms relate to prunes, FOODON:00003537, 'prune', is the most direct and general term.  Other options refer to specific types of prunes (e.g., Italian prune plum) or prepared forms (e.g., prune juice, prune puree). 'prune' encompasses all of these and therefore is the best singular match.",
        "candidates_provided": [
            "FOODON:00003537",
            "FOODON:03305334",
            "FOODON:00003813",
            "FOODON:03301721",
            "FOODON:03543193",
            "FOODON:03544354",
            "FOODON:03301412",
            "FOODON:03307089",
            "FOODON:03411207",
            "FOODON:03307093",
            "FOODON:00005489",
            "FOODON:03303632",
            "FOODON:03316789",
            "FOODON:03307090",
            "FOODON:03307091",
            "FOODON:03316905",
            "FOODON:00002176",
            "FOODON:03309603",
            "FOODON:03309501",
            "FOODON:03306152",
            "FOODON:03414280",
            "FOODON:03414287",
            "FOODON:03301282",
            "FOODON:03316942",
            "FOODON:03420198",
            "FOODON:03413478",
            "FOODON:03301281",
            "FOODON:03315656",
            "FOODON:03413813",
            "FOODON:03414878",
            "FOODON:03411989",
            "FOODON:03412176",
            "FOODON:03413494"
        ]
    },
    {
        "query": "LEMON",
        "chosen_curie": "FOODON:00003320",
        "true_curies": [
            "NCBITaxon:2708",
            "FOODON:03301441"
        ],
        "explanation": "While FOODON:03315104 has a matching label, FOODON:00003320, 'lemon (whole or pieces)', is more specific and encompasses various forms of a lemon, making it a better representation of the general term 'LEMON'.",
        "candidates_provided": [
            "FOODON:03315104",
            "FOODON:00005229",
            "FOODON:03414998",
            "FOODON:03301441",
            "FOODON:03412273",
            "FOODON:03412953",
            "FOODON:00005464",
            "FOODON:00003726",
            "FOODON:03414340",
            "FOODON:00004664",
            "FOODON:00003320",
            "FOODON:03411275",
            "FOODON:00005519",
            "FOODON:00003725",
            "FOODON:00003340",
            "FOODON:03401589",
            "FOODON:03401588",
            "FOODON:03544419",
            "FOODON:03543740",
            "FOODON:03543185",
            "FOODON:03307082",
            "FOODON:03306076",
            "FOODON:03302398",
            "FOODON:03306143",
            "FOODON:03303620",
            "FOODON:03316381",
            "FOODON:00001995",
            "FOODON:03305428",
            "FOODON:03305882",
            "FOODON:03305154",
            "FOODON:03412647",
            "FOODON:03307072",
            "FOODON:03301617",
            "FOODON:03301067",
            "FOODON:03306023",
            "FOODON:03302166",
            "FOODON:03302386",
            "FOODON:03305429",
            "FOODON:03301630"
        ]
    },
    {
        "query": "PRUNE",
        "chosen_curie": "FOODON:00003537",
        "true_curies": [
            "NCIT:C45305",
            "CHEBI:60004",
            "FOODON:03301721"
        ],
        "explanation": "While FOODON:03301721 (prune (dehydrated)) provides a more detailed description, FOODON:00003537 (prune) is a more general and widely accepted term for a prune.  The user input 'PRUNE' is a common term,  making the simpler, more general term the better fit.",
        "candidates_provided": [
            "FOODON:00003537",
            "FOODON:03305334",
            "FOODON:00003813",
            "FOODON:03301721",
            "FOODON:03543193",
            "FOODON:03544354",
            "FOODON:03301412",
            "FOODON:03307089",
            "FOODON:03411207",
            "FOODON:03307093",
            "FOODON:00005489",
            "FOODON:03303632",
            "FOODON:03316789",
            "FOODON:03307090",
            "FOODON:03307091",
            "FOODON:03316905",
            "FOODON:00002176",
            "FOODON:03309603",
            "FOODON:03309501",
            "FOODON:03306152",
            "FOODON:03414280",
            "FOODON:03414287",
            "FOODON:03301282",
            "FOODON:03316942",
            "FOODON:03420198",
            "FOODON:03413478",
            "FOODON:03301281",
            "FOODON:03315656",
            "FOODON:03413813",
            "FOODON:03414878",
            "FOODON:03411989",
            "FOODON:03412176",
            "FOODON:03413494"
        ]
    },
    {
        "query": "JELLY ROLL",
        "chosen_curie": "FOODON:03540257",
        "true_curies": [
            "FOODON:03305899"
        ],
        "explanation": "While FOODON:03305899 has the exact label 'jelly roll', its definition is missing. FOODON:03540257, 'sponge cake roll', is a specific type of jelly roll and provides a definition and links to relevant resources.  Given the lack of definition for the exact match, the more specific and informative option is preferred.",
        "candidates_provided": [
            "FOODON:00002743",
            "FOODON:02000212",
            "FOODON:02000053",
            "FOODON:00005331",
            "FOODON:03000216",
            "FOODON:03305899",
            "FOODON:02000055",
            "FOODON:02000220",
            "FOODON:03305875",
            "FOODON:02000054",
            "FOODON:02000206",
            "FOODON:03400255",
            "FOODON:03400256",
            "FOODON:03400146",
            "FOODON:03540257",
            "FOODON:03400209",
            "FOODON:03543950",
            "FOODON:03542980",
            "FOODON:02000052",
            "FOODON:02000058",
            "FOODON:03317023",
            "FOODON:03316472",
            "FOODON:03316217",
            "FOODON:03311202",
            "FOODON:03316493",
            "FOODON:03317031",
            "FOODON:03316576",
            "FOODON:03316265",
            "FOODON:03301811",
            "FOODON:03304850",
            "FOODON:03316064",
            "FOODON:03305872",
            "FOODON:03316483",
            "FOODON:00001978",
            "FOODON:03305955",
            "FOODON:00002251",
            "FOODON:03311470",
            "FOODON:03316359",
            "FOODON:03315982"
        ]
    },
    {
        "query": "FIGS",
        "chosen_curie": "FOODON:00001851",
        "true_curies": [
            "NCBITaxon:3493"
        ],
        "explanation": "While several FOODON IDs refer to figs, FOODON:00001851, 'fig food product', is the most encompassing term.  It avoids the specificity of fresh, dried, canned, etc., which are all types of fig products. The user entity 'FIGS' is broad, therefore the broadest relevant ontology term is the best fit.",
        "candidates_provided": [
            "FOODON:03541646",
            "FOODON:03541800",
            "FOODON:03541647",
            "FOODON:03401714",
            "FOODON:03544264",
            "FOODON:03401723",
            "NCBITaxon:3493",
            "FOODON:03305165",
            "FOODON:03540663",
            "FOODON:03541718",
            "FOODON:03414665",
            "FOODON:03301804",
            "FOODON:00005241",
            "FOODON:03316974",
            "FOODON:03411302",
            "FOODON:03305104",
            "FOODON:00003266",
            "FOODON:03316797",
            "FOODON:03316796",
            "FOODON:00001851",
            "FOODON:00001853",
            "FOODON:03304620",
            "NCBITaxon:3502",
            "FOODON:03306055",
            "NCBITaxon:91835",
            "NCBITaxon:72025",
            "FOODON:03305737",
            "FOODON:03301250"
        ]
    },
    {
        "query": "MARSHMALLOW",
        "chosen_curie": "FOODON:03543074",
        "true_curies": [
            "NCBITaxon:145745",
            "FOODON:03305639"
        ],
        "explanation": "While several terms mention \"marshmallow\", FOODON:03543074, 'marshmallow mass', is the most precise and directly relevant to the food entity 'marshmallow'.  Other options refer to the plant, infusions, or specific product combinations (e.g., candy bar), making them less suitable as a general ontology term for the confectionery item itself.",
        "candidates_provided": [
            "FOODON:03543074",
            "FOODON:03305639",
            "NCBITaxon:145745",
            "FOODON:03311471",
            "FOODON:03543645",
            "FOODON:03543522",
            "FOODON:03305115",
            "FOODON:03415077",
            "FOODON:03302797",
            "FOODON:03400141",
            "FOODON:03543051",
            "FOODON:03400979",
            "FOODON:03413414",
            "FOODON:03414284",
            "NCBITaxon:91836",
            "FOODON:03413464",
            "NCBITaxon:3749",
            "NCBITaxon:41944",
            "NCBITaxon:41938",
            "FOODON:03415060",
            "FOODON:03413428",
            "FOODON:03411742",
            "FOODON:03411609",
            "FOODON:03414283",
            "FOODON:03415076",
            "NCBITaxon:396790",
            "FOODON:03414223",
            "FOODON:03412067",
            "FOODON:03412584",
            "FOODON:03411097"
        ]
    },
    {
        "query": "VANILLA",
        "chosen_curie": "FOODON:03541398",
        "true_curies": [
            "FOODON:03411355",
            "FOODON:03316764",
            "NCBITaxon:51238",
            "FOODON:00002328",
            "FOODON:03420108"
        ],
        "explanation": "While several terms mention \"vanilla\", FOODON:03541398 encompasses the broadest definition of vanilla as a spice derived from *Vanilla fragrans* or *Vanilla planifolia*, aligning with the general use of the term \"VANILLA.\"  Other options are more specific (e.g., extract, bean), or refer to plant species rather than the food product itself.",
        "candidates_provided": [
            "FOODON:00002328",
            "NCBITaxon:51239",
            "FOODON:03316764",
            "FOODON:03302056",
            "FOODON:03411355",
            "NCBITaxon:117957",
            "FOODON:00002396",
            "FOODON:00003738",
            "FOODON:03316763",
            "FOODON:03415042",
            "FOODON:03316761",
            "FOODON:03305153",
            "FOODON:03541398",
            "FOODON:03541399",
            "FOODON:03541397",
            "FOODON:03544416",
            "FOODON:03541401",
            "FOODON:03544417",
            "FOODON:03544401",
            "NCBITaxon:51238",
            "FOODON:03307348",
            "FOODON:03305800",
            "FOODON:03304426",
            "FOODON:03305844",
            "FOODON:03301629",
            "FOODON:03303151",
            "FOODON:03307273",
            "NCBITaxon:669897",
            "FOODON:03309572",
            "FOODON:03302772",
            "FOODON:03305790",
            "FOODON:03310567",
            "FOODON:03305649",
            "FOODON:03310665",
            "FOODON:03305409",
            "FOODON:03316923",
            "FOODON:03310983",
            "FOODON:03302576",
            "FOODON:03304422",
            "FOODON:03311395"
        ]
    },
    {
        "query": "CAKE MIX",
        "chosen_curie": "FOODON:03530074",
        "true_curies": [
            "FOODON:03317068"
        ],
        "explanation": "While FOODON:03317068 has the exact label 'cake mix', its definition is missing.  FOODON:03530074 ('formulated mix') is a broader but well-defined category that explicitly includes 'cake mix' as an example. This makes it a more robust and informative choice than the undefined 'cake mix' term.",
        "candidates_provided": [
            "FOODON:00002515",
            "FOODON:03530074",
            "FOODON:00004177",
            "FOODON:03310697",
            "FOODON:00003054",
            "FOODON:03530090",
            "FOODON:03317068",
            "FOODON:03304937",
            "FOODON:03540265",
            "FOODON:03540258",
            "FOODON:03540256",
            "FOODON:03540262",
            "FOODON:03311884",
            "FOODON:00003276",
            "FOODON:03540257",
            "FOODON:03302835",
            "FOODON:03302535",
            "FOODON:03316646",
            "FOODON:03302884",
            "FOODON:03306712",
            "FOODON:03309365",
            "FOODON:03315400",
            "FOODON:03302840",
            "FOODON:03315404",
            "FOODON:03302837",
            "FOODON:03315076",
            "FOODON:03303593",
            "FOODON:03310655",
            "FOODON:00001279",
            "FOODON:03315073",
            "FOODON:03302637",
            "FOODON:03315237",
            "FOODON:03315742",
            "FOODON:03305203",
            "FOODON:03317195",
            "FOODON:03306713"
        ]
    },
    {
        "query": "CONDENSED MILK",
        "chosen_curie": "FOODON:03542722",
        "true_curies": [
            "FOODON:03301503",
            "UBERON:0001913"
        ],
        "explanation": "While FOODON:03301503 ('cow milk (concentrated)') is a close match, FOODON:03542722 ('condensed milk (sometimes with added sugars)') is a better fit because it explicitly includes the possibility of added sugar, which is a common characteristic of condensed milk.  The label is also a direct match to the user's entity. Other options are either too general (various milk types), too specific (e.g., skim condensed milk), or refer to different products altogether.",
        "candidates_provided": [
            "FOODON:03301503",
            "FOODON:03542722",
            "FOODON:03307455",
            "FOODON:03305408",
            "FOODON:03301484",
            "FOODON:00003879",
            "FOODON:03304199",
            "FOODON:03400779",
            "FOODON:03400148",
            "FOODON:03304384",
            "FOODON:03311037",
            "FOODON:03420113",
            "FOODON:00004495",
            "FOODON:00004496",
            "FOODON:00004497",
            "FOODON:00004498",
            "FOODON:03000289",
            "FOODON:00003157",
            "UBERON:0001913",
            "FOODON:00002815",
            "FOODON:00003006",
            "FOODON:03301505",
            "FOODON:03307486",
            "FOODON:03307456",
            "FOODON:00002032",
            "FOODON:03315633",
            "FOODON:03307459",
            "FOODON:03316152",
            "FOODON:00001257",
            "FOODON:03310381",
            "FOODON:03304389",
            "FOODON:03315634",
            "FOODON:03316270",
            "FOODON:00002034",
            "FOODON:03302672",
            "FOODON:03301498",
            "FOODON:03302779",
            "FOODON:03304399",
            "FOODON:03304703"
        ]
    },
    {
        "query": "WHITE RICE FLOUR",
        "chosen_curie": "FOODON:03307151",
        "true_curies": [
            "FOODON:03307541",
            "FOODON:03301116",
            "FOODON:00003787",
            "NCBITaxon:4530",
            "HANCESTRO:0005",
            "FOODON:03301641",
            "PATO:0000323"
        ],
        "explanation": "While FOODON:00002207 (rice flour) is a close match,  FOODON:03307151 (white rice flour (precooked)) is a more specific and accurate reflection of the user's entity, 'WHITE RICE FLOUR'.  The lack of definitions for many of the candidate terms makes definitive conclusions difficult, however, assuming that 'WHITE RICE FLOUR' refers to a pre-cooked form, this option is the best match.",
        "candidates_provided": [
            "FOODON:00002207",
            "FOODON:00003353",
            "FOODON:00004677",
            "FOODON:00003351",
            "FOODON:00004354",
            "FOODON:03000263",
            "FOODON:00005309",
            "FOODON:00003787",
            "FOODON:00004353",
            "FOODON:00003056",
            "FOODON:03301641",
            "FOODON:00004512",
            "FOODON:03302142",
            "FOODON:00004372",
            "FOODON:03000264",
            "FOODON:03000273",
            "FOODON:03304488",
            "FOODON:03311875",
            "FOODON:00002867",
            "FOODON:00005529",
            "FOODON:03307541",
            "FOODON:03311121",
            "FOODON:03307151",
            "FOODON:03312030",
            "FOODON:00004320",
            "FOODON:03304549",
            "FOODON:03302745",
            "FOODON:03306909",
            "FOODON:03307147",
            "FOODON:03304556",
            "FOODON:03310371",
            "FOODON:03310254",
            "FOODON:00001185",
            "FOODON:03310654",
            "FOODON:03311295",
            "FOODON:03305184",
            "FOODON:03304553",
            "FOODON:03304555",
            "FOODON:03307152",
            "FOODON:03307146"
        ]
    },
    {
        "query": "TEFF",
        "chosen_curie": "FOODON:03000255",
        "true_curies": [
            "NCBITaxon:110835",
            "FOODON:03301116"
        ],
        "explanation": "While FOODON:03540026 mentions teff grain, FOODON:03000255, 'teff kernel', is more precise and directly addresses the grain's morphology.  Other options refer to the plant itself or are unrelated.",
        "candidates_provided": [
            "FOODON:03000255",
            "FOODON:03000256",
            "FOODON:03540026",
            "NCBITaxon:110835",
            "FOODON:03412475",
            "FOODON:03414736",
            "CHEBI:53251",
            "obo:AfPO_0000091",
            "FOODON:03316415",
            "FOODON:03305067",
            "FOODON:03412276",
            "FOODON:03411906",
            "FOODON:03413402",
            "FOODON:03304871",
            "FOODON:03316938",
            "FOODON:03307867",
            "FOODON:03401206",
            "FOODON:03307802",
            "obo:chebi#is_tautomer_of",
            "FOODON:03307865",
            "CHEBI:35193"
        ]
    },
    {
        "query": "DATE",
        "chosen_curie": "FOODON:00003454",
        "true_curies": [
            "NCIT:C45305",
            "FOODON:03304506",
            "CHEBI:60004"
        ],
        "explanation": "While several terms relate to dates, the user entity 'DATE' is ambiguous.  Considering the context of food ontology,  FOODON:00003454, 'food packaging date', is the most likely interpretation of 'DATE' referring to a date associated with a food product.  Other date-related terms refer to the fruit itself or specific date types, which are less general than a date on packaging.",
        "candidates_provided": [
            "FOODON:03301246",
            "FOODON:00003764",
            "FOODON:00002866",
            "FOODON:00003453",
            "FOODON:00004924",
            "FOODON:00003451",
            "FOODON:00003452",
            "FOODON:00003446",
            "FOODON:00005195",
            "FOODON:03304506",
            "FOODON:00005194",
            "FOODON:00003454",
            "FOODON:00003455",
            "FOODON:03541011",
            "FOODON:03310752",
            "FOODON:03305151",
            "FOODON:03414151",
            "FOODON:03301247",
            "FOODON:03412837",
            "FOODON:03305006",
            "obo:UO_0000033",
            "obo:UO_0000036",
            "RO:0002222",
            "obo:UO_1000036",
            "obo:UO_1000033",
            "ns1:TemporalEntity",
            "obo:UO_0000035",
            "obo:UO_0000003",
            "obo:UO_1000035",
            "FOODON:03411209",
            "obo:UO_1000010",
            "IAO:0000416",
            "FOODON:03301248",
            "obo:OBI_0001619",
            "ns1:numericDuration",
            "obo:UO_0000034"
        ]
    },
    {
        "query": "RUM",
        "chosen_curie": "FOODON:03543382",
        "true_curies": [
            "FOODON:03301614"
        ],
        "explanation": "FOODON:03543382 ('rum') is the best match because its label exactly matches the user's entity and its definition accurately describes rum as a distilled spirit from fermented sugarcane by-products. Other options refer to rum flavorings or rum-containing foods, which are not direct matches for the broad term 'RUM'.",
        "candidates_provided": [
            "FOODON:03544420",
            "FOODON:03543382",
            "FOODON:03544366",
            "FOODON:03544367",
            "FOODON:03301614",
            "FOODON:03307100",
            "FOODON:03302526",
            "FOODON:03304050",
            "FOODON:03305114",
            "FOODON:03302773",
            "FOODON:03305109",
            "FOODON:03309502",
            "FOODON:03305728",
            "FOODON:03302953",
            "FOODON:03304642",
            "FOODON:03302615",
            "FOODON:03306066",
            "FOODON:03307227",
            "FOODON:03304645",
            "FOODON:03302774",
            "FOODON:03530145",
            "FOODON:03305972",
            "FOODON:03305644",
            "FOODON:03530170",
            "CHEBI:26543",
            "FOODON:03310770",
            "FOODON:03317365",
            "FOODON:03530166",
            "FOODON:03530165",
            "FOODON:03310661"
        ]
    },
    {
        "query": "CUSTARD",
        "chosen_curie": "FOODON:03302947",
        "true_curies": [
            "FOODON:03302946"
        ],
        "explanation": "While several terms mention 'custard,' FOODON:03302947 ('custard') is the most general and direct match for the user's entity.  Other options refer to specific types of custard (e.g., frozen custard, chocolate custard), or custard-containing dishes.  FOODON:03302947 provides the broadest coverage for the simple term 'custard'.",
        "candidates_provided": [
            "FOODON:00004809",
            "FOODON:00003660",
            "FOODON:00004811",
            "FOODON:00004813",
            "FOODON:00004810",
            "FOODON:00004812",
            "FOODON:00004808",
            "FOODON:03400285",
            "FOODON:03542938",
            "FOODON:03400165",
            "FOODON:00001281",
            "FOODON:03540259",
            "FOODON:03540260",
            "FOODON:03414972",
            "FOODON:03302946",
            "FOODON:03303341",
            "FOODON:03302923",
            "FOODON:03315315",
            "FOODON:03302947",
            "FOODON:03315400",
            "FOODON:03530136",
            "FOODON:03530129",
            "FOODON:03414626",
            "obo:COB_0000502",
            "FOODON:03413663",
            "FOODON:03530142",
            "FOODON:03530127",
            "IAO:0000600",
            "FOODON:03420310",
            "FOODON:03413474",
            "FOODON:03411903",
            "FOODON:03530131",
            "FOODON:03412387",
            "FOODON:03414280",
            "FOODON:03412660",
            "FOODON:03413370",
            "FOODON:03413914",
            "FOODON:00003342",
            "FOODON:03413884",
            "FOODON:03411682"
        ]
    },
    {
        "query": "SUGAR TOPPING",
        "chosen_curie": "FOODON:03316757",
        "true_curies": [
            "FOODON:03420108",
            "FOODON:03316039"
        ],
        "explanation": "While FOODON:03311801 has 'sugar' in its label, it refers to a specific type of pea. FOODON:03316757 is the only candidate whose label exactly matches the user's entity and is not highly specific.  Other options that include 'sugar' in their labels are either too broad or refer to processes or ingredients rather than a topping itself.",
        "candidates_provided": [
            "FOODON:00003444",
            "FOODON:03311801",
            "FOODON:03316757",
            "FOODON:03316039",
            "FOODON:00002847",
            "obo:CDNO_0200034",
            "FOODON:03420157",
            "FOODON:03470146",
            "FOODON:03316302",
            "FOODON:03420108",
            "FOODON:03307566",
            "FOODON:03400835",
            "FOODON:00003412",
            "FOODON:03301879",
            "FOODON:03302036",
            "FOODON:03460354",
            "FOODON:03480010",
            "FOODON:03420156",
            "CHEBI:28963",
            "FOODON:00003274",
            "FOODON:03310913",
            "FOODON:03316469",
            "FOODON:03316296",
            "FOODON:03460158",
            "FOODON:03307544",
            "FOODON:00001083",
            "FOODON:03530162",
            "FOODON:03307558",
            "FOODON:03315596",
            "FOODON:03460136",
            "FOODON:03315170",
            "FOODON:03315238",
            "FOODON:03460202",
            "FOODON:03317200",
            "FOODON:03316271",
            "FOODON:03304365",
            "FOODON:03307056",
            "FOODON:03316249",
            "FOODON:03414449"
        ]
    },
    {
        "query": "TUBE",
        "chosen_curie": "UBERON:0000117",
        "true_curies": [
            "FOODON:03490200"
        ],
        "explanation": "While several terms use \"tube\", UBERON:0000117, \"respiratory tube\", is the most specific and relevant option within the context of the provided candidates.  The user's entity \"TUBE\" is ambiguous without further context, and this option provides a reasonable biological interpretation in the absence of other clarifying information. Other 'tube' terms are either too general or relate to food packaging rather than a biological structure.",
        "candidates_provided": [
            "UBERON:0000117",
            "obo:FAO_0001051",
            "obo:FAO_0000059",
            "obo:FAO_0002008",
            "UBERON:0001555",
            "UBERON:0000025",
            "FOODON:03490200",
            "UBERON:0001052",
            "UBERON:0000993",
            "UBERON:0013522",
            "FOODON:03490167",
            "FOODON:03490168",
            "UBERON:0004111",
            "FOODON:03315121",
            "FOODON:03305884",
            "FOODON:03490102",
            "FOODON:03490112",
            "FOODON:03490109",
            "FOODON:03490127",
            "FOODON:03490111",
            "FOODON:03490139",
            "FOODON:03490169",
            "FOODON:03490170",
            "FOODON:03490138",
            "FOODON:03490171",
            "FOODON:03490110",
            "FOODON:03414611",
            "FOODON:03413938",
            "FOODON:03411240",
            "obo:PO_0025522"
        ]
    },
    {
        "query": "BUTTER",
        "chosen_curie": "FOODON:03543148",
        "true_curies": [
            "PATO:0000952",
            "FOODON:03310351"
        ],
        "explanation": "While several terms mention 'butter', FOODON:03543148, '31480 - butter (efsa foodex2)', provides the most comprehensive definition encompassing various types of butter obtained from dairy cream. Other 'butter' terms are often more specific (e.g., salted, whipped, clarified) or refer to products containing butter rather than butter itself. This option best represents the general concept of 'butter' as a food product.",
        "candidates_provided": [
            "FOODON:03302641",
            "FOODON:00003854",
            "FOODON:03400809",
            "FOODON:03000476",
            "FOODON:00005495",
            "FOODON:00004525",
            "FOODON:00003326",
            "FOODON:00004421",
            "FOODON:03307957",
            "FOODON:03000295",
            "FOODON:00005582",
            "FOODON:00003223",
            "FOODON:03307958",
            "FOODON:03543148",
            "FOODON:03543117",
            "FOODON:03400294",
            "FOODON:03543140",
            "FOODON:03544103",
            "FOODON:03540239",
            "FOODON:03543118",
            "FOODON:03302449",
            "FOODON:03304469",
            "FOODON:03303711",
            "FOODON:03302532",
            "FOODON:03306205",
            "FOODON:03307026",
            "FOODON:03302522",
            "FOODON:03316334",
            "FOODON:03302542",
            "FOODON:00001673",
            "FOODON:03302536",
            "FOODON:03310351",
            "FOODON:03306210",
            "FOODON:03302523",
            "FOODON:03311219",
            "FOODON:03302625",
            "FOODON:03302516",
            "FOODON:03315520",
            "FOODON:03302605",
            "FOODON:03303155"
        ]
    },
    {
        "query": "CORN",
        "chosen_curie": "FOODON:00001845",
        "true_curies": [
            "CHEBI:28017",
            "NCBITaxon:381124"
        ],
        "explanation": "While several terms refer to parts of corn (kernels, etc.), FOODON:00001845, 'field corn food product', encompasses the broadest range of corn uses and forms, aligning best with the general, unspecified term 'CORN'.",
        "candidates_provided": [
            "FOODON:00003782",
            "FOODON:00003783",
            "FOODON:00003562",
            "FOODON:00001845",
            "FOODON:00003785",
            "FOODON:00003781",
            "FOODON:00002845",
            "FOODON:03301422",
            "FOODON:00001572",
            "FOODON:00005021",
            "FOODON:00005024",
            "FOODON:00005030",
            "FOODON:00005027",
            "FOODON:00005447",
            "FOODON:03302904",
            "FOODON:03411379",
            "FOODON:00005498",
            "FOODON:00002722",
            "FOODON:00001849",
            "FOODON:00002514",
            "FOODON:03317387",
            "FOODON:03311001",
            "FOODON:03302733",
            "FOODON:03310986",
            "FOODON:03311288",
            "FOODON:03301604",
            "FOODON:03311721",
            "FOODON:03315799",
            "FOODON:03310640",
            "FOODON:03302731",
            "FOODON:00002330",
            "FOODON:03309833",
            "FOODON:03301388",
            "FOODON:03316588",
            "FOODON:03310807",
            "FOODON:03311145",
            "FOODON:03414942",
            "FOODON:03302665",
            "FOODON:03310559",
            "FOODON:03310945"
        ]
    },
    {
        "query": "JAM",
        "chosen_curie": "FOODON:03400837",
        "true_curies": [
            "FOODON:03309973"
        ],
        "explanation": "While many options specify a particular fruit, the user input 'JAM' is general.  FOODON:03400837, 'jam or marmalade (eurofir)', encompasses various fruit jams and is therefore the most appropriate general term for the provided entity.",
        "candidates_provided": [
            "FOODON:03541812",
            "FOODON:03541806",
            "FOODON:03541822",
            "FOODON:03541807",
            "FOODON:03541817",
            "FOODON:03541816",
            "FOODON:03541813",
            "FOODON:03541818",
            "FOODON:03541814",
            "FOODON:03541821",
            "FOODON:03541808",
            "FOODON:03541811",
            "FOODON:03400837",
            "FOODON:03541823",
            "FOODON:03541820",
            "FOODON:03541809",
            "FOODON:03541819",
            "FOODON:03541815",
            "FOODON:03541810",
            "FOODON:03400251",
            "FOODON:03315981",
            "FOODON:03316063",
            "FOODON:03307117",
            "FOODON:03309973",
            "FOODON:03305972",
            "FOODON:03316568",
            "FOODON:03305967",
            "FOODON:03317156",
            "FOODON:03316574",
            "FOODON:03309974",
            "FOODON:03317051",
            "FOODON:03301108",
            "FOODON:03317536",
            "FOODON:03316782",
            "FOODON:03305974",
            "FOODON:03316417",
            "FOODON:03304853",
            "FOODON:03305786",
            "FOODON:03316317",
            "FOODON:03305869"
        ]
    },
    {
        "query": "CHILLED",
        "chosen_curie": "FOODON:00004725",
        "true_curies": [
            "NCIT:C45305",
            "NCBITaxon:3983",
            "FOODON:03307663",
            "CHEBI:60004",
            "FOODON:00002642"
        ],
        "explanation": "FOODON:00004725 ('chilled') provides the most accurate and general definition of 'chilled' as a temperature characteristic, unlike other options that specify chilled states for particular foods.  While FOODON:00002642 ('food (chilled)') might seem appropriate, it is more specific and unnecessarily restricts the term to food.",
        "candidates_provided": [
            "FOODON:00002642",
            "FOODON:00004726",
            "FOODON:00004725",
            "FOODON:00004730",
            "FOODON:03317226",
            "FOODON:03305980",
            "FOODON:03317102",
            "FOODON:03317256",
            "FOODON:03317223",
            "FOODON:03317245",
            "FOODON:03315534",
            "FOODON:03311827",
            "FOODON:03305983",
            "FOODON:03311269",
            "PATO:0001985",
            "FOODON:00004727",
            "FOODON:00004729",
            "PATO:0001306",
            "obo:UO_0000005",
            "obo:UO_0000027",
            "FOODON:03470128",
            "FOODON:03470132",
            "obo:UO_1000027",
            "FOODON:00005179",
            "obo:UO_1000195",
            "FOODON:03305490",
            "FOODON:00004728",
            "FOODON:03470131",
            "obo:UO_0000195",
            "FOODON:03470142",
            "FOODON:03460241"
        ]
    },
    {
        "query": "LEMON",
        "chosen_curie": "FOODON:00003320",
        "true_curies": [
            "FOODON:00003661",
            "FOODON:03305086",
            "NCBITaxon:2708",
            "FOODON:03301441"
        ],
        "explanation": "While FOODON:03315104 ('lemon') is a good match, FOODON:00003320 ('lemon (whole or pieces)') is more specific and encompasses the various forms a lemon can be in when used as a food ingredient.  Other options refer to lemon-flavored items, parts of the lemon plant (peel, juice), or other plants entirely.",
        "candidates_provided": [
            "FOODON:03315104",
            "FOODON:00005229",
            "FOODON:03414998",
            "FOODON:03301441",
            "FOODON:03412273",
            "FOODON:03412953",
            "FOODON:00005464",
            "FOODON:00003726",
            "FOODON:03414340",
            "FOODON:00004664",
            "FOODON:00003320",
            "FOODON:03411275",
            "FOODON:00005519",
            "FOODON:00003725",
            "FOODON:00003340",
            "FOODON:03401589",
            "FOODON:03401588",
            "FOODON:03544419",
            "FOODON:03543740",
            "FOODON:03543185",
            "FOODON:03307082",
            "FOODON:03306076",
            "FOODON:03302398",
            "FOODON:03306143",
            "FOODON:03303620",
            "FOODON:03316381",
            "FOODON:00001995",
            "FOODON:03305428",
            "FOODON:03305882",
            "FOODON:03305154",
            "FOODON:03412647",
            "FOODON:03307072",
            "FOODON:03301617",
            "FOODON:03301067",
            "FOODON:03306023",
            "FOODON:03302166",
            "FOODON:03302386",
            "FOODON:03305429",
            "FOODON:03301630"
        ]
    },
    {
        "query": "WALNUT",
        "chosen_curie": "FOODON:03316466",
        "true_curies": [
            "FOODON:03301364",
            "FOODON:03315233"
        ],
        "explanation": "While several terms refer to walnuts, FOODON:03316466, 'walnut (whole or pieces)', offers the broadest coverage encompassing various forms of walnuts without specifying a particular variety (e.g., English walnut, black walnut).  The other options are more specific to a type, preparation method, or part of the walnut (e.g., meat, oil, shell). The user's input 'WALNUT' is best represented by this general term.",
        "candidates_provided": [
            "FOODON:03316466",
            "FOODON:00003611",
            "FOODON:03301364",
            "FOODON:00005234",
            "FOODON:03311411",
            "FOODON:00004148",
            "FOODON:03315233",
            "FOODON:03541168",
            "FOODON:03306516",
            "FOODON:03306518",
            "FOODON:03543111",
            "NCBITaxon:51240",
            "FOODON:03543551",
            "FOODON:03543553",
            "FOODON:03544403",
            "FOODON:03412616",
            "FOODON:03307235",
            "FOODON:03307229",
            "FOODON:03311689",
            "FOODON:00003218",
            "FOODON:00002338",
            "FOODON:03303110",
            "FOODON:00005348",
            "FOODON:03310876",
            "FOODON:00001833",
            "FOODON:03411290",
            "FOODON:00001652",
            "FOODON:03306520",
            "FOODON:03311323",
            "FOODON:03310998",
            "FOODON:00003564",
            "FOODON:03306050",
            "FOODON:00001722"
        ]
    },
    {
        "query": "BUTTER SAUCE",
        "chosen_curie": "FOODON:03400862",
        "true_curies": [
            "FOODON:03311146",
            "FOODON:03302627",
            "FOODON:03310351"
        ],
        "explanation": "While FOODON:03544103 also uses the label \"butter sauce\", its definition is too broad. FOODON:03400862, 'savory sauce', explicitly includes 'butter sauce' within its definition and provides better context for the term as a food product.  The other 'butter sauce' entry (FOODON:03302627) lacks a definition, making it unsuitable.",
        "candidates_provided": [
            "FOODON:00003259",
            "FOODON:03544103",
            "FOODON:03302641",
            "FOODON:03400862",
            "FOODON:00003854",
            "FOODON:03400809",
            "FOODON:03306786",
            "FOODON:00002526",
            "FOODON:00003232",
            "FOODON:03400863",
            "FOODON:00005513",
            "FOODON:03000476",
            "FOODON:00005495",
            "FOODON:03544100",
            "FOODON:03400263",
            "FOODON:00004525",
            "FOODON:00003326",
            "FOODON:00004421",
            "FOODON:03544095",
            "FOODON:03302627",
            "FOODON:03307026",
            "FOODON:03302612",
            "FOODON:03302605",
            "FOODON:03304469",
            "FOODON:03302442",
            "FOODON:03302522",
            "FOODON:03306205",
            "FOODON:03302449",
            "FOODON:03303711",
            "FOODON:03460271",
            "FOODON:03302532",
            "FOODON:03316516",
            "FOODON:03302516",
            "FOODON:03302542",
            "FOODON:03302772",
            "FOODON:03306210",
            "FOODON:03304756",
            "FOODON:03315234",
            "FOODON:03316249"
        ]
    },
    {
        "query": "VANILLA",
        "chosen_curie": "FOODON:03541398",
        "true_curies": [
            "FOODON:03411355",
            "FOODON:03317068",
            "FOODON:03316764",
            "NCBITaxon:51238",
            "FOODON:00002328"
        ],
        "explanation": "While several terms mention \"vanilla\", FOODON:03541398 encompasses various vanilla types and preparations, aligning best with the broad, unspecific nature of the user's input 'VANILLA'.  Other options are too specific (e.g., extract, bean, plant), while this option covers the broadest range of possible interpretations of 'VANILLA'.",
        "candidates_provided": [
            "FOODON:00002328",
            "NCBITaxon:51239",
            "FOODON:03316764",
            "FOODON:03302056",
            "FOODON:03411355",
            "NCBITaxon:117957",
            "FOODON:00002396",
            "FOODON:00003738",
            "FOODON:03316763",
            "FOODON:03415042",
            "FOODON:03316761",
            "FOODON:03305153",
            "FOODON:03541398",
            "FOODON:03541399",
            "FOODON:03541397",
            "FOODON:03544416",
            "FOODON:03541401",
            "FOODON:03544417",
            "FOODON:03544401",
            "NCBITaxon:51238",
            "FOODON:03307348",
            "FOODON:03305800",
            "FOODON:03304426",
            "FOODON:03305844",
            "FOODON:03301629",
            "FOODON:03303151",
            "FOODON:03307273",
            "NCBITaxon:669897",
            "FOODON:03309572",
            "FOODON:03302772",
            "FOODON:03305790",
            "FOODON:03310567",
            "FOODON:03305649",
            "FOODON:03310665",
            "FOODON:03305409",
            "FOODON:03316923",
            "FOODON:03310983",
            "FOODON:03302576",
            "FOODON:03304422",
            "FOODON:03311395"
        ]
    },
    {
        "query": "FOOD",
        "chosen_curie": "FOODON:00002403",
        "true_curies": [
            "CHEBI:33290"
        ],
        "explanation": "FOODON:00002403 ('food material') is the most appropriate choice because its definition encompasses the broadest definition of 'food',  including any substance consumed for nutritional or other purposes.  Other options are more specific types of food, processes applied to food, or related concepts (e.g., packaging).",
        "candidates_provided": [
            "FOODON:03601038",
            "FOODON:00002652",
            "FOODON:00004130",
            "FOODON:03490100",
            "FOODON:00002455",
            "FOODON:03601068",
            "FOODON:00003887",
            "FOODON:00002456",
            "FOODON:00003889",
            "FOODON:00003194",
            "FOODON:03412974",
            "FOODON:00001189",
            "FOODON:03530251",
            "FOODON:00001142",
            "FOODON:00004128",
            "FOODON:00002403",
            "FOODON:00003385",
            "FOODON:03309997",
            "CHEBI:33290",
            "FOODON:00005142",
            "FOODON:00005145",
            "FOODON:03316637",
            "FOODON:03311737",
            "FOODON:00002147",
            "FOODON:00001796",
            "FOODON:03316043",
            "FOODON:03310825",
            "FOODON:03311283",
            "FOODON:00001868",
            "FOODON:00001864",
            "FOODON:03316056",
            "FOODON:03317134",
            "FOODON:00001870",
            "FOODON:00002471",
            "FOODON:03309393",
            "FOODON:03317643",
            "FOODON:03317133",
            "FOODON:03311631",
            "FOODON:00003398",
            "FOODON:03450002"
        ]
    },
    {
        "query": "CHOCOLATE CAKE",
        "chosen_curie": "FOODON:03540272",
        "true_curies": [
            "FOODON:03307240",
            "FOODON:03301304",
            "FOODON:03305417",
            "NCBITaxon:3641"
        ],
        "explanation": "FOODON:03540272 ('chocolate cake') is the best match because it directly corresponds to the user's entity, 'CHOCOLATE CAKE'.  While other options mention chocolate cake as a component (e.g., chocolate cake with fruits), this option is the most general and directly representative of the user's input.",
        "candidates_provided": [
            "FOODON:03540272",
            "FOODON:03540273",
            "FOODON:03540274",
            "FOODON:00002515",
            "FOODON:03400839",
            "FOODON:00002562",
            "FOODON:00003276",
            "FOODON:00003879",
            "FOODON:00003875",
            "FOODON:03400272",
            "FOODON:03310697",
            "FOODON:03305417",
            "FOODON:03400288",
            "FOODON:03400978",
            "FOODON:03400158",
            "FOODON:03000294",
            "FOODON:03540265",
            "FOODON:03540258",
            "FOODON:03460355",
            "FOODON:03000289",
            "FOODON:03304226",
            "FOODON:03302884",
            "FOODON:03316640",
            "FOODON:03302823",
            "FOODON:00001279",
            "FOODON:03307240",
            "FOODON:03303593",
            "FOODON:03301664",
            "FOODON:03303595",
            "FOODON:03302882",
            "FOODON:03306719",
            "FOODON:03311854",
            "FOODON:03306711",
            "FOODON:03301687",
            "FOODON:03301007",
            "FOODON:00001733",
            "FOODON:03303341",
            "FOODON:03316706",
            "FOODON:03460231"
        ]
    },
    {
        "query": "SPICE",
        "chosen_curie": "FOODON:03301177",
        "true_curies": [
            "FOODON:03303380"
        ],
        "explanation": "While FOODON:00001242 ('spice or herb') is a reasonable option, it's too broad. FOODON:03301177 ('spice seed') is a more specific term and better reflects the diverse nature of spices, many of which are seeds.  The lack of definition does not preclude its use over other candidates that also lack definitions but it makes the choice based solely on the label.   Other options such as spice mixtures or spice blends are specific types of spice products, but 'spice' in general can encompass many things, and 'spice seed' is a more precise subset.",
        "candidates_provided": [
            "FOODON:03304292",
            "FOODON:00001242",
            "FOODON:00002876",
            "FOODON:03303380",
            "FOODON:00002500",
            "FOODON:00004307",
            "FOODON:03544065",
            "FOODON:00004176",
            "FOODON:03540304",
            "FOODON:03306052",
            "FOODON:03541365",
            "FOODON:03544378",
            "FOODON:03541364",
            "FOODON:03302699",
            "FOODON:03301177",
            "FOODON:03309941",
            "FOODON:03301686",
            "FOODON:03302698",
            "FOODON:03311449",
            "FOODON:00003793",
            "FOODON:03315168",
            "FOODON:03317238",
            "FOODON:03301184",
            "FOODON:03460227",
            "FOODON:03301548",
            "FOODON:03301189",
            "FOODON:00002268",
            "FOODON:03304288",
            "FOODON:00001955",
            "FOODON:03303617",
            "FOODON:03310079",
            "FOODON:00002109",
            "FOODON:03315708",
            "FOODON:03304006",
            "FOODON:03411179",
            "FOODON:03310148"
        ]
    },
    {
        "query": "PEPPERMINT",
        "chosen_curie": "FOODON:03540885",
        "true_curies": [
            "NCBITaxon:34256",
            "FOODON:03303920"
        ],
        "explanation": "FOODON:03540885 ('peppermint (efsa foodex2)') provides the most comprehensive and accurate definition for the user entity 'PEPPERMINT'. While other options mention 'peppermint', this term specifically references the plant *Mentha x piperita* and allows for specifying the part consumed, making it superior to more generic terms like 'peppermint' or 'peppermint leaf'.",
        "candidates_provided": [
            "FOODON:03401595",
            "FOODON:03540885",
            "FOODON:03543742",
            "FOODON:03544347",
            "FOODON:03303920",
            "FOODON:03311063",
            "FOODON:03304824",
            "NCBITaxon:34256",
            "FOODON:03305727",
            "FOODON:00002112",
            "FOODON:03309568",
            "FOODON:03411449",
            "FOODON:03302236",
            "NCBITaxon:260138",
            "FOODON:00002117",
            "FOODON:03301526",
            "FOODON:03301105",
            "FOODON:03310070",
            "FOODON:00002109",
            "FOODON:00001935",
            "FOODON:03413458",
            "FOODON:03315873",
            "FOODON:03301715",
            "FOODON:00001649",
            "FOODON:00001650",
            "FOODON:00002191",
            "FOODON:00002361",
            "FOODON:03310583",
            "FOODON:03306739",
            "FOODON:03316942"
        ]
    },
    {
        "query": "ORANGE",
        "chosen_curie": "FOODON:00003555",
        "true_curies": [
            "PATO:0000953",
            "NCIT:C45305",
            "FOODON:03315106",
            "CHEBI:60004"
        ],
        "explanation": "While several terms mention 'orange', FOODON:00003555, 'mandarin orange', is a specific type of orange.  However, the most appropriate term is FOODON:03309832, 'orange (raw)', because it represents the general concept of an orange fruit without specifying a particular variety.  Terms like 'blood orange' or 'navel orange' are subtypes, and the term 'orange' alone is too generic and may include processed forms.",
        "candidates_provided": [
            "FOODON:03309832",
            "FOODON:00004198",
            "FOODON:03411339",
            "FOODON:00003550",
            "FOODON:03315106",
            "FOODON:03411193",
            "PATO:0001944",
            "FOODON:03000144",
            "PATO:0001256",
            "PATO:0001278",
            "PATO:0001277",
            "PATO:0001255",
            "FOODON:03000145",
            "FOODON:00004199",
            "FOODON:00004386",
            "FOODON:00003555",
            "FOODON:00003579",
            "FOODON:00001277",
            "FOODON:00003619",
            "FOODON:03301101",
            "FOODON:03306028",
            "FOODON:03302385",
            "FOODON:00002071",
            "FOODON:03530289",
            "FOODON:03301103",
            "FOODON:03530290",
            "FOODON:03301102",
            "FOODON:03306016",
            "FOODON:03306689",
            "FOODON:03302220",
            "FOODON:03302219",
            "FOODON:03302203",
            "FOODON:03316385",
            "FOODON:03302210",
            "FOODON:03301100",
            "FOODON:03305389",
            "FOODON:03412328",
            "FOODON:03311067",
            "FOODON:03305778",
            "FOODON:03305980"
        ]
    },
    {
        "query": "HAZELNUTS",
        "chosen_curie": "FOODON:00002933",
        "true_curies": [
            "NCBITaxon:13450"
        ],
        "explanation": "FOODON:00002933 ('hazelnut') is the most appropriate term because its definition explicitly includes hazelnuts from the genus Corylus, specifically mentioning Corylus avellana, and it uses the common name, making it easily understandable. While other options like FOODON:03541142 are also related, they are either more specific to processed forms or less directly named as simply \"hazelnut\".",
        "candidates_provided": [
            "FOODON:03541141",
            "FOODON:03541142",
            "NCBITaxon:13450",
            "FOODON:00002932",
            "FOODON:00003220",
            "FOODON:00003418",
            "FOODON:03306520",
            "FOODON:00005201",
            "FOODON:00001836",
            "FOODON:00002933",
            "FOODON:03301349",
            "FOODON:03411533",
            "FOODON:03301367",
            "FOODON:03305224",
            "FOODON:03412035",
            "NCBITaxon:13451",
            "FOODON:00003564",
            "FOODON:00001722",
            "FOODON:03411634",
            "FOODON:03316049",
            "FOODON:03305829",
            "FOODON:03310810",
            "FOODON:03307106",
            "FOODON:03310671"
        ]
    },
    {
        "query": "MACADAMIA",
        "chosen_curie": "FOODON:00003003",
        "true_curies": [
            "FOODON:03306632",
            "NCBITaxon:4329",
            "FOODON:03306521"
        ],
        "explanation": "While several terms refer to macadamia, FOODON:00003003, 'macadamia nut', is the most appropriate because it directly names the entity and provides a clear definition.  Other options are either more specific (referring to raw macadamia nuts or specific species) or more general (referring to macadamia nut food products or the plant itself).",
        "candidates_provided": [
            "FOODON:00003003",
            "FOODON:00004093",
            "FOODON:03306521",
            "NCBITaxon:60698",
            "FOODON:03541148",
            "FOODON:03541147",
            "FOODON:03411451",
            "NCBITaxon:4329",
            "FOODON:03544305",
            "FOODON:00004094",
            "FOODON:03541145",
            "FOODON:03541146",
            "FOODON:03414685",
            "FOODON:03412872",
            "FOODON:03414876",
            "FOODON:03413993",
            "FOODON:03412490",
            "FOODON:03414939",
            "FOODON:03414870",
            "obo:AfPO_0000213",
            "FOODON:03411321",
            "FOODON:03411682",
            "FOODON:03412847",
            "FOODON:03411788",
            "FOODON:03413839",
            "FOODON:03413502",
            "FOODON:03411821",
            "FOODON:03411849"
        ]
    },
    {
        "query": "CARAMEL",
        "chosen_curie": "FOODON:03316628",
        "true_curies": [
            "FOODON:03317034",
            "PATO:0000014"
        ],
        "explanation": "While several terms mention 'caramel', FOODON:03316628, 'caramel coating food product', is the most encompassing and appropriate.  Many other options are specific types of caramel-containing products (e.g., candy, apples), while this term covers caramel used as a coating,  a common and broad application of caramel.",
        "candidates_provided": [
            "FOODON:03315100",
            "FOODON:03543083",
            "FOODON:03543065",
            "FOODON:03544222",
            "FOODON:03401840",
            "FOODON:03317034",
            "FOODON:03302881",
            "FOODON:03316659",
            "FOODON:03413187",
            "FOODON:03412995",
            "FOODON:03316627",
            "FOODON:03301956",
            "FOODON:03303427",
            "FOODON:03400173",
            "FOODON:03413294",
            "FOODON:03310432",
            "FOODON:03413063",
            "FOODON:03316628",
            "FOODON:03311396",
            "FOODON:00001682",
            "FOODON:03302772",
            "FOODON:03316639",
            "FOODON:03311471",
            "FOODON:03316469",
            "FOODON:03316217",
            "FOODON:03305409",
            "FOODON:03310567",
            "FOODON:03316428",
            "FOODON:03316923",
            "FOODON:03305257",
            "FOODON:03316359",
            "FOODON:03316299",
            "FOODON:03460360"
        ]
    },
    {
        "query": "PINEAPPLE",
        "chosen_curie": "FOODON:00003459",
        "true_curies": [
            "NCIT:C45305",
            "NCBITaxon:4615",
            "CHEBI:60004",
            "FOODON:03301831"
        ],
        "explanation": "While several terms mention 'pineapple', FOODON:00003459 provides the most general and accurate definition: 'A fruit multiple from a pineapple tree (Ananas comosus)'.  Other options specify preparations (e.g., raw, canned, juice) or varieties, making them less broadly applicable to the user's simple input of 'PINEAPPLE'.",
        "candidates_provided": [
            "FOODON:03301831",
            "FOODON:00003459",
            "FOODON:00005319",
            "FOODON:00005320",
            "FOODON:00003073",
            "FOODON:00004238",
            "FOODON:03543203",
            "FOODON:03543176",
            "FOODON:03543247",
            "FOODON:03544349",
            "FOODON:03541875",
            "FOODON:03543295",
            "FOODON:03543314",
            "FOODON:03541855",
            "FOODON:03541837",
            "FOODON:00003930",
            "FOODON:03306054",
            "FOODON:03306782",
            "FOODON:03303912",
            "FOODON:03306714",
            "FOODON:00002119",
            "FOODON:03303126",
            "FOODON:00002120",
            "obo:FLOPO_0016496",
            "FOODON:03316531",
            "FOODON:03309800",
            "FOODON:03301003",
            "FOODON:03420137",
            "FOODON:00002481",
            "FOODON:03306770",
            "FOODON:03315615",
            "FOODON:03304862",
            "FOODON:00004186",
            "FOODON:03317622",
            "FOODON:03420138",
            "FOODON:03306997"
        ]
    },
    {
        "query": "INFANT CEREAL",
        "chosen_curie": "FOODON:03315768",
        "true_curies": [
            "FOODON:03301336"
        ],
        "explanation": "While several terms relate to infant food or cereal, FOODON:03315768, 'cereal product (solid, infant)', is the most specific and directly addresses the user's entity.  Terms like 'infant cereal' lack definitions, making them less reliable.  Other options are too broad (e.g., general cereals) or specify additional components (e.g., fruit-containing infant cereal).",
        "candidates_provided": [
            "FOODON:00001709",
            "FOODON:00002520",
            "FOODON:03510266",
            "FOODON:03301336",
            "FOODON:03304223",
            "FOODON:03311075",
            "FOODON:00005505",
            "FOODON:03540095",
            "FOODON:00000073",
            "FOODON:00005506",
            "FOODON:00005553",
            "FOODON:03540003",
            "FOODON:03543750",
            "FOODON:03543755",
            "FOODON:03315768",
            "FOODON:00005559",
            "FOODON:00005565",
            "FOODON:00005564",
            "FOODON:00005558",
            "FOODON:00005574",
            "FOODON:03306448",
            "FOODON:03315508",
            "FOODON:03316895",
            "FOODON:03317185",
            "FOODON:03316896",
            "FOODON:03310925",
            "FOODON:03311476",
            "FOODON:03315509",
            "FOODON:03305633",
            "FOODON:03309947",
            "FOODON:03310608",
            "FOODON:03311475",
            "FOODON:03316237",
            "FOODON:03304218",
            "FOODON:03310918",
            "FOODON:03315466",
            "FOODON:03317094"
        ]
    },
    {
        "query": "LEMON",
        "chosen_curie": "FOODON:00003320",
        "true_curies": [
            "NCIT:C45305",
            "CHEBI:5291",
            "FOODON:03301831",
            "CHEBI:60004",
            "FOODON:03301441",
            "FOODON:03315552",
            "NCBITaxon:4615",
            "NCBITaxon:2708"
        ],
        "explanation": "While FOODON:03315104 ('lemon') is a good match, FOODON:00003320 ('lemon (whole or pieces)') is more specific and encompasses the various forms a lemon can take for culinary use.  Other options refer to lemon derivatives or related plants.",
        "candidates_provided": [
            "FOODON:03315104",
            "FOODON:00005229",
            "FOODON:03414998",
            "FOODON:03301441",
            "FOODON:03412273",
            "FOODON:03412953",
            "FOODON:00005464",
            "FOODON:00003726",
            "FOODON:03414340",
            "FOODON:00004664",
            "FOODON:00003320",
            "FOODON:03411275",
            "FOODON:00005519",
            "FOODON:00003725",
            "FOODON:00003340",
            "FOODON:03401589",
            "FOODON:03401588",
            "FOODON:03544419",
            "FOODON:03543740",
            "FOODON:03543185",
            "FOODON:03307082",
            "FOODON:03306076",
            "FOODON:03302398",
            "FOODON:03306143",
            "FOODON:03303620",
            "FOODON:03316381",
            "FOODON:00001995",
            "FOODON:03305428",
            "FOODON:03305882",
            "FOODON:03305154",
            "FOODON:03412647",
            "FOODON:03307072",
            "FOODON:03301617",
            "FOODON:03301067",
            "FOODON:03306023",
            "FOODON:03302166",
            "FOODON:03302386",
            "FOODON:03305429",
            "FOODON:03301630"
        ]
    },
    {
        "query": "GINGERBREAD",
        "chosen_curie": "FOODON:03540306",
        "true_curies": [
            "FOODON:03301912"
        ],
        "explanation": "FOODON:03540306 ('gingerbread') is the best match because it directly names the user's entity and provides a broad definition encompassing various types of gingerbread.  Other options like gingerbread dough (FOODON:03540229) are too specific, while terms like 'baked good' or 'sweet dish' are too general.  Options referring to the gingerbread tree or its fruit are irrelevant.",
        "candidates_provided": [
            "FOODON:03540306",
            "FOODON:03540229",
            "FOODON:03301912",
            "FOODON:03412829",
            "FOODON:03305175",
            "NCBITaxon:115479",
            "FOODON:03540305",
            "FOODON:03541645",
            "FOODON:03303422",
            "FOODON:03305327",
            "FOODON:00001279",
            "FOODON:03311631",
            "FOODON:03316299",
            "FOODON:03316903",
            "FOODON:00001965",
            "FOODON:03315073",
            "FOODON:03315237",
            "FOODON:00002058",
            "FOODON:00001906",
            "FOODON:03316248",
            "FOODON:03311455",
            "FOODON:03302766",
            "FOODON:03315400",
            "FOODON:03306884",
            "FOODON:03304724",
            "FOODON:03303212"
        ]
    },
    {
        "query": "CUSTARD",
        "chosen_curie": "FOODON:03302947",
        "true_curies": [
            "NCIT:C45305",
            "CHEBI:60004",
            "FOODON:03302946"
        ],
        "explanation": "While several terms mention 'custard,' FOODON:03302947 ('custard') is the most general and direct match for the user's entity, 'CUSTARD.'  Other options specify types of custard or relate to custard apples, which are distinct.",
        "candidates_provided": [
            "FOODON:00004809",
            "FOODON:00003660",
            "FOODON:00004811",
            "FOODON:00004813",
            "FOODON:00004810",
            "FOODON:00004812",
            "FOODON:00004808",
            "FOODON:03400285",
            "FOODON:03542938",
            "FOODON:03400165",
            "FOODON:00001281",
            "FOODON:03540259",
            "FOODON:03540260",
            "FOODON:03414972",
            "FOODON:03302946",
            "FOODON:03303341",
            "FOODON:03302923",
            "FOODON:03315315",
            "FOODON:03302947",
            "FOODON:03315400",
            "FOODON:03530136",
            "FOODON:03530129",
            "FOODON:03414626",
            "obo:COB_0000502",
            "FOODON:03413663",
            "FOODON:03530142",
            "FOODON:03530127",
            "IAO:0000600",
            "FOODON:03420310",
            "FOODON:03413474",
            "FOODON:03411903",
            "FOODON:03530131",
            "FOODON:03412387",
            "FOODON:03414280",
            "FOODON:03412660",
            "FOODON:03413370",
            "FOODON:03413914",
            "FOODON:00003342",
            "FOODON:03413884",
            "FOODON:03411682"
        ]
    },
    {
        "query": "SUGAR CANE",
        "chosen_curie": "FOODON:03401879",
        "true_curies": [
            "FOODON:03315552",
            "FOODON:00003444",
            "FOODON:03420108"
        ],
        "explanation": "FOODON:03401879 ('10006371 - sugar cane (gs1 gpc)') is the most appropriate term because it specifically refers to fresh, commercial sugar cane, grown from Saccharum officinarum, and explicitly excludes processed forms.  While other terms mention sugar cane, this one best captures the raw, unprocessed nature of the user's entity.  Terms referring to processed products (like refined or brown sugar) are less suitable.",
        "candidates_provided": [
            "FOODON:00003444",
            "FOODON:03301879",
            "FOODON:03542990",
            "FOODON:03542987",
            "FOODON:03543004",
            "FOODON:03401879",
            "FOODON:00002847",
            "FOODON:03420157",
            "FOODON:03311801",
            "FOODON:03541001",
            "FOODON:03400983",
            "FOODON:03301348",
            "FOODON:03316757",
            "obo:CDNO_0200034",
            "FOODON:03470146",
            "FOODON:03311346",
            "FOODON:03310068",
            "FOODON:03411378",
            "FOODON:03305100",
            "FOODON:03317363",
            "FOODON:00001026",
            "FOODON:03301847",
            "FOODON:03315111",
            "FOODON:00002291",
            "FOODON:03304559",
            "NCBITaxon:4547",
            "FOODON:03307571",
            "FOODON:03316271",
            "FOODON:03307582",
            "FOODON:03304315",
            "FOODON:03307345",
            "FOODON:00005514",
            "FOODON:03307056",
            "FOODON:00002290",
            "FOODON:03304299"
        ]
    },
    {
        "query": "CHILLED",
        "chosen_curie": "FOODON:00004725",
        "true_curies": [
            "FOODON:00002642"
        ],
        "explanation": "FOODON:00004725 ('chilled') provides the most accurate and general definition of 'chilled' as a temperature characteristic,  unlike other options which specify chilled food items or processes.  While FOODON:00002642 ('food (chilled)') is close, it unnecessarily restricts the term to food, whereas 'chilled' can apply to other materials.",
        "candidates_provided": [
            "FOODON:00002642",
            "FOODON:00004726",
            "FOODON:00004725",
            "FOODON:00004730",
            "FOODON:03317226",
            "FOODON:03305980",
            "FOODON:03317102",
            "FOODON:03317256",
            "FOODON:03317223",
            "FOODON:03317245",
            "FOODON:03315534",
            "FOODON:03311827",
            "FOODON:03305983",
            "FOODON:03311269",
            "PATO:0001985",
            "FOODON:00004727",
            "FOODON:00004729",
            "PATO:0001306",
            "obo:UO_0000005",
            "obo:UO_0000027",
            "FOODON:03470128",
            "FOODON:03470132",
            "obo:UO_1000027",
            "FOODON:00005179",
            "obo:UO_1000195",
            "FOODON:03305490",
            "FOODON:00004728",
            "FOODON:03470131",
            "obo:UO_0000195",
            "FOODON:03470142",
            "FOODON:03460241"
        ]
    },
    {
        "query": "TEQUILA",
        "chosen_curie": "FOODON:03543381",
        "true_curies": [
            "FOODON:03304704"
        ],
        "explanation": "FOODON:03543381 ('tequila and similar spirits') is the best match because it explicitly includes tequila in its label and definition.  While FOODON:03304704 has a label of 'tequila', it lacks a definition, making it less informative and reliable. Other options are too broad (e.g., alcoholic beverages) or refer to related but distinct entities (e.g., tequila flavor, agave plant).",
        "candidates_provided": [
            "FOODON:03543381",
            "FOODON:03544393",
            "FOODON:03304704",
            "FOODON:03411535",
            "FOODON:00001882",
            "FOODON:03317463",
            "FOODON:03305159",
            "FOODON:03301633",
            "FOODON:03317462",
            "FOODON:03303646",
            "FOODON:03317560",
            "FOODON:03310477",
            "FOODON:03307300",
            "FOODON:03310674",
            "FOODON:03530170",
            "FOODON:03307283",
            "FOODON:00001580",
            "FOODON:00001883",
            "FOODON:03317365",
            "FOODON:03530166",
            "FOODON:03316527",
            "FOODON:03530171",
            "FOODON:03302432"
        ]
    },
    {
        "query": "ORANGE",
        "chosen_curie": "FOODON:00003555",
        "true_curies": [
            "PATO:0000953",
            "FOODON:03315106",
            "FOODON:03301008"
        ],
        "explanation": "While several terms include \"orange\" in their label, FOODON:00003555, 'mandarin orange', is too specific.  FOODON:03309832, 'orange (raw)', is a good candidate, but lacks the specificity needed to distinguish it from other types of oranges.  FOODON:00003555 is more general and encompasses a broader category, which aligns better with the ambiguity of the user input \"ORANGE\" without further qualification.",
        "candidates_provided": [
            "FOODON:03309832",
            "FOODON:00004198",
            "FOODON:03411339",
            "FOODON:00003550",
            "FOODON:03315106",
            "FOODON:03411193",
            "PATO:0001944",
            "FOODON:03000144",
            "PATO:0001256",
            "PATO:0001278",
            "PATO:0001277",
            "PATO:0001255",
            "FOODON:03000145",
            "FOODON:00004199",
            "FOODON:00004386",
            "FOODON:00003555",
            "FOODON:00003579",
            "FOODON:00001277",
            "FOODON:00003619",
            "FOODON:03301101",
            "FOODON:03306028",
            "FOODON:03302385",
            "FOODON:00002071",
            "FOODON:03530289",
            "FOODON:03301103",
            "FOODON:03530290",
            "FOODON:03301102",
            "FOODON:03306016",
            "FOODON:03306689",
            "FOODON:03302220",
            "FOODON:03302219",
            "FOODON:03302203",
            "FOODON:03316385",
            "FOODON:03302210",
            "FOODON:03301100",
            "FOODON:03305389",
            "FOODON:03412328",
            "FOODON:03311067",
            "FOODON:03305778",
            "FOODON:03305980"
        ]
    },
    {
        "query": "COFFEE",
        "chosen_curie": "FOODON:00001244",
        "true_curies": [
            "FOODON:03301036",
            "FOODON:03301008",
            "NCBITaxon:13443"
        ],
        "explanation": "While several terms relate to coffee, FOODON:00001244, 'coffee beverage', is the most general and encompassing term that best represents the broad concept of 'COFFEE' without implying specific preparation methods (e.g., decaf, arabica/robusta), or the raw coffee bean itself.",
        "candidates_provided": [
            "FOODON:00003063",
            "FOODON:00003062",
            "FOODON:00003943",
            "FOODON:00001244",
            "FOODON:00004877",
            "FOODON:03301036",
            "FOODON:00004878",
            "FOODON:00003061",
            "FOODON:00003399",
            "FOODON:00001139",
            "FOODON:00004879",
            "FOODON:03303109",
            "FOODON:00003274",
            "FOODON:03543711",
            "FOODON:03400892",
            "FOODON:00005574",
            "FOODON:00003944",
            "FOODON:03401517",
            "FOODON:03543701",
            "FOODON:03400845",
            "FOODON:03315398",
            "FOODON:03301035",
            "FOODON:03317674",
            "FOODON:03316230",
            "FOODON:03311432",
            "FOODON:03316454",
            "FOODON:03302655",
            "FOODON:03304930",
            "FOODON:03301477",
            "FOODON:03301316",
            "FOODON:03312050",
            "FOODON:03303096",
            "FOODON:03307680",
            "FOODON:03310196",
            "FOODON:03303114",
            "FOODON:03317450",
            "FOODON:03305423",
            "FOODON:03301602",
            "FOODON:03303095"
        ]
    },
    {
        "query": "GIN",
        "chosen_curie": "FOODON:03543390",
        "true_curies": [
            "FOODON:03309491"
        ],
        "explanation": "While several terms relate to alcoholic beverages, FOODON:03543390, '33900 - gin (efsa foodex2)', provides the most comprehensive and accurate definition encompassing various types of gin.  Other options like 'jenever gin' are specific types of gin, and 'gin flavour' is an ingredient, not the beverage itself.  The EFSA Foodex2 reference adds credibility and context.",
        "candidates_provided": [
            "FOODON:03315752",
            "FOODON:03543390",
            "FOODON:03544272",
            "FOODON:03309491",
            "FOODON:03307196",
            "FOODON:03303119",
            "FOODON:03543389",
            "FOODON:03400926",
            "NCBITaxon:114937",
            "FOODON:03411377",
            "FOODON:03303646",
            "FOODON:03307130",
            "FOODON:03305644",
            "FOODON:03317365",
            "FOODON:03310770",
            "FOODON:03310661",
            "FOODON:03305191",
            "FOODON:03305195",
            "FOODON:03302420",
            "FOODON:03317463",
            "FOODON:03317462",
            "FOODON:03302293",
            "FOODON:00001580",
            "FOODON:03305972",
            "FOODON:03530166",
            "FOODON:00002025",
            "FOODON:03530170"
        ]
    },
    {
        "query": "BERRY",
        "chosen_curie": "FOODON:00003521",
        "true_curies": [
            "NCIT:C45305",
            "CHEBI:60004",
            "FOODON:00003477",
            "FOODON:03306893"
        ],
        "explanation": "FOODON:00003521 (berry) provides the most appropriate general definition of a berry, encompassing various types while avoiding the specificity of particular berry varieties.  Other options are either specific types of berries or refer to processed forms of berries, making them less suitable as a general match for the user's entity 'BERRY'.",
        "candidates_provided": [
            "FOODON:00003007",
            "FOODON:00003671",
            "FOODON:00003026",
            "FOODON:00003775",
            "FOODON:03306893",
            "FOODON:00003477",
            "FOODON:00003797",
            "FOODON:00004398",
            "FOODON:00003521",
            "FOODON:00004669",
            "FOODON:00004631",
            "FOODON:03310230",
            "FOODON:00004670",
            "FOODON:00004379",
            "FOODON:00004632",
            "FOODON:00003696",
            "FOODON:00004399",
            "FOODON:00004359",
            "FOODON:00004668",
            "FOODON:03411231",
            "FOODON:03315614",
            "FOODON:00001640",
            "FOODON:03301220",
            "FOODON:03316906",
            "FOODON:03302118",
            "FOODON:03316891",
            "FOODON:00003609",
            "FOODON:00001656",
            "FOODON:00002282",
            "FOODON:00003134",
            "FOODON:03316889",
            "FOODON:00003028",
            "FOODON:03411393",
            "FOODON:03305746",
            "FOODON:00001641",
            "FOODON:03317103",
            "FOODON:00001170",
            "FOODON:03305149"
        ]
    },
    {
        "query": "COFFEE MIXTURE",
        "chosen_curie": "FOODON:03315399",
        "true_curies": [
            "NCIT:C45305",
            "NCBITaxon:13443",
            "FOODON:03301036",
            "CHEBI:60004",
            "FOODON:03317674"
        ],
        "explanation": "While FOODON:03317674 has the exact label \"coffee mixture\", it lacks a definition. FOODON:03315399, \"beverage mix (coffee based)\", is a more specific and informative term, implying a mixture of ingredients centered around coffee, better reflecting the likely composition of a 'coffee mixture'.",
        "candidates_provided": [
            "FOODON:00003063",
            "FOODON:00003062",
            "FOODON:03317674",
            "FOODON:00003943",
            "FOODON:00001244",
            "FOODON:00004877",
            "CHEBI:60004",
            "FOODON:00004130",
            "FOODON:03301036",
            "FOODON:00004878",
            "FOODON:00003061",
            "FOODON:00003399",
            "FOODON:00001139",
            "FOODON:00004879",
            "FOODON:03303109",
            "FOODON:00003274",
            "FOODON:03304292",
            "FOODON:03544243",
            "FOODON:03543711",
            "FOODON:03400892",
            "FOODON:03301035",
            "FOODON:03315399",
            "FOODON:03302655",
            "FOODON:03304930",
            "FOODON:03315398",
            "FOODON:03303114",
            "FOODON:03310196",
            "FOODON:03307680",
            "FOODON:03303101",
            "FOODON:03303094",
            "FOODON:03307336",
            "FOODON:03309398",
            "FOODON:03315765",
            "FOODON:03316454",
            "FOODON:03316230",
            "FOODON:03311432",
            "FOODON:03312050",
            "FOODON:03301477"
        ]
    },
    {
        "query": "LEMON",
        "chosen_curie": "FOODON:00003320",
        "true_curies": [
            "FOODON:03305086",
            "FOODON:00003202",
            "FOODON:00003661",
            "FOODON:03301441",
            "NCBITaxon:2708"
        ],
        "explanation": "While FOODON:03315104 ('lemon') is a good match, FOODON:00003320 ('lemon (whole or pieces)') is more specific and encompasses various forms of the lemon fruit as a food item, making it a better fit for the general term 'LEMON'.",
        "candidates_provided": [
            "FOODON:03315104",
            "FOODON:00005229",
            "FOODON:03414998",
            "FOODON:03301441",
            "FOODON:03412273",
            "FOODON:03412953",
            "FOODON:00005464",
            "FOODON:00003726",
            "FOODON:03414340",
            "FOODON:00004664",
            "FOODON:00003320",
            "FOODON:03411275",
            "FOODON:00005519",
            "FOODON:00003725",
            "FOODON:00003340",
            "FOODON:03401589",
            "FOODON:03401588",
            "FOODON:03544419",
            "FOODON:03543740",
            "FOODON:03543185",
            "FOODON:03307082",
            "FOODON:03306076",
            "FOODON:03302398",
            "FOODON:03306143",
            "FOODON:03303620",
            "FOODON:03316381",
            "FOODON:00001995",
            "FOODON:03305428",
            "FOODON:03305882",
            "FOODON:03305154",
            "FOODON:03412647",
            "FOODON:03307072",
            "FOODON:03301617",
            "FOODON:03301067",
            "FOODON:03306023",
            "FOODON:03302166",
            "FOODON:03302386",
            "FOODON:03305429",
            "FOODON:03301630"
        ]
    },
    {
        "query": "ANISE",
        "chosen_curie": "FOODON:00003502",
        "true_curies": [
            "FOODON:03301840",
            "FOODON:03301008"
        ],
        "explanation": "While several terms relate to anise, FOODON:00003502, 'star anise', is the only one that is not ambiguous.  The user entity 'ANISE' is broad and could refer to the plant, seed, or even flavor.  However, given the options, star anise is a distinct and well-defined entity, and the other entries referring to 'anise' are either too general (the plant) or too specific (dried seeds, etc.).  'Star anise' is a common enough term to be a good match.",
        "candidates_provided": [
            "FOODON:03301840",
            "FOODON:00003502",
            "FOODON:03411296",
            "FOODON:00003791",
            "FOODON:00004648",
            "FOODON:00004650",
            "FOODON:00004649",
            "FOODON:00004647",
            "FOODON:03401566",
            "FOODON:03541291",
            "FOODON:03544185",
            "FOODON:03301213",
            "FOODON:00003094",
            "FOODON:03541382",
            "FOODON:03541292",
            "FOODON:03411464",
            "FOODON:03304519",
            "FOODON:03309784",
            "FOODON:00003229",
            "FOODON:03309411",
            "FOODON:03316232",
            "NCBITaxon:2068722",
            "FOODON:03413839",
            "FOODON:03530222",
            "FOODON:03413831",
            "FOODON:03413392",
            "NCBITaxon:13336",
            "NCBITaxon:1307775",
            "NCBITaxon:2068716",
            "FOODON:03315496",
            "obo:AfPO_0000095"
        ]
    },
    {
        "query": "CIDER",
        "chosen_curie": "FOODON:03400848",
        "true_curies": [
            "FOODON:00001276"
        ],
        "explanation": "While several options mention cider, FOODON:03400848, 'cider, perry or similar drink (eurofir)', is the most encompassing and neutral term.  It avoids specifying alcoholic or non-alcoholic varieties, which are ambiguous for the general term 'cider'.  Options like apple cider are more specific and therefore less suitable as a general representation of the entity 'CIDER'.",
        "candidates_provided": [
            "FOODON:00001276",
            "FOODON:03301129",
            "FOODON:03543357",
            "FOODON:03400848",
            "FOODON:03303060",
            "FOODON:03307916",
            "FOODON:03303055",
            "FOODON:03303066",
            "FOODON:03315686",
            "FOODON:03317552",
            "FOODON:03317566",
            "FOODON:03307920",
            "FOODON:03307919",
            "FOODON:03303062",
            "FOODON:03303058",
            "FOODON:03303064",
            "FOODON:00002391",
            "FOODON:03316910",
            "FOODON:03303056",
            "FOODON:03307376",
            "FOODON:03302749",
            "FOODON:03303067",
            "FOODON:03413066",
            "FOODON:03305951"
        ]
    },
    {
        "query": "GUMMY",
        "chosen_curie": "FOODON:03543054",
        "true_curies": [
            "FOODON:03430176",
            "NCBITaxon:8570"
        ],
        "explanation": "While several terms relate to 'gum' or 'candy', FOODON:03543054, 'jelly candies (efsa foodex2)', provides the most accurate and specific definition, explicitly including 'gummy bear' as an example within the broader category of gelatin-based candies.  This is superior to the generic 'gummy' or other candy types because it directly addresses the characteristic texture and composition associated with gummy candies.",
        "candidates_provided": [
            "FOODON:03430176",
            "FOODON:03304372",
            "FOODON:03413512",
            "FOODON:03543054",
            "NCBITaxon:7813",
            "FOODON:03316472",
            "FOODON:00001723",
            "FOODON:03310643",
            "FOODON:03305111",
            "FOODON:03317414",
            "FOODON:00002251",
            "FOODON:03301726",
            "FOODON:03304973",
            "FOODON:03309599",
            "FOODON:03310580",
            "FOODON:03304902",
            "FOODON:03305098",
            "FOODON:03303401",
            "FOODON:03303647",
            "obo:CDNO_0000031",
            "FOODON:03311418",
            "FOODON:03316471",
            "FOODON:03315386",
            "FOODON:03301051"
        ]
    },
    {
        "query": "CANADIAN",
        "chosen_curie": "GAZ:00002561",
        "true_curies": [
            "FOODON:03302775",
            "NCBITaxon:4550",
            "FOODON:00003734",
            "HANCESTRO:0354"
        ],
        "explanation": "While GAZ:00002560 (Canada) is a strong contender, GAZ:00002561 (Province (Canada)) is a more specific term, better representing the potential ambiguity in the user input 'CANADIAN' which could refer to a province within Canada, rather than the country itself.",
        "candidates_provided": [
            "FOODON:00003149",
            "HANCESTRO:0354",
            "FOODON:03303042",
            "FOODON:03309024",
            "FOODON:03303443",
            "HANCESTRO:0558",
            "FOODON:03414212",
            "FOODON:03309606",
            "GAZ:00002572",
            "FOODON:03307574",
            "FOODON:03414324",
            "GAZ:00001507",
            "FOODON:03414245",
            "FOODON:00004053",
            "GAZ:00004428",
            "HANCESTRO:0571",
            "GAZ:00004429",
            "GAZ:00002602",
            "FOODON:00002951",
            "GAZ:00002539",
            "GAZ:00002560",
            "FOODON:03414593",
            "GAZ:00002561",
            "HANCESTRO:0308",
            "FOODON:00004656",
            "GAZ:00000458",
            "FOODON:00004657",
            "FOODON:00004654",
            "FOODON:00004655",
            "obo:hancestro_0034",
            "FOODON:03413984"
        ]
    },
    {
        "query": "CHILLED",
        "chosen_curie": "FOODON:00004725",
        "true_curies": [
            "FOODON:03301671",
            "FOODON:03301723",
            "FOODON:03315552",
            "FOODON:00003657",
            "FOODON:00002642"
        ],
        "explanation": "FOODON:00004725 ('chilled') provides the most accurate and general definition of 'chilled' as a temperature characteristic, unlike other options that specify chilled *food* or specific chilled *food items*.  It avoids unnecessary specificity.",
        "candidates_provided": [
            "FOODON:00002642",
            "FOODON:00004726",
            "FOODON:00004725",
            "FOODON:00004730",
            "FOODON:03317226",
            "FOODON:03305980",
            "FOODON:03317102",
            "FOODON:03317256",
            "FOODON:03317223",
            "FOODON:03317245",
            "FOODON:03315534",
            "FOODON:03311827",
            "FOODON:03305983",
            "FOODON:03311269",
            "PATO:0001985",
            "FOODON:00004727",
            "FOODON:00004729",
            "PATO:0001306",
            "obo:UO_0000005",
            "obo:UO_0000027",
            "FOODON:03470128",
            "FOODON:03470132",
            "obo:UO_1000027",
            "FOODON:00005179",
            "obo:UO_1000195",
            "FOODON:03305490",
            "FOODON:00004728",
            "FOODON:03470131",
            "obo:UO_0000195",
            "FOODON:03470142",
            "FOODON:03460241"
        ]
    },
    {
        "query": "BUTTER FLAVORING",
        "chosen_curie": "FOODON:03302612",
        "true_curies": [
            "FOODON:03310351",
            "FOODON:03302532"
        ],
        "explanation": "While FOODON:03302532 (butter flavoring) is a closer label match, it lacks a definition. FOODON:03302612 (butter sauce seasoning mix) is more specific and implies a food product containing butter flavoring.  Other options like 'buttery seasoning' are too generic.",
        "candidates_provided": [
            "FOODON:03302641",
            "FOODON:00003854",
            "FOODON:03400809",
            "FOODON:03302532",
            "FOODON:03000476",
            "FOODON:00005495",
            "FOODON:00004525",
            "FOODON:00003326",
            "FOODON:00004421",
            "FOODON:03307957",
            "FOODON:03000295",
            "FOODON:00005582",
            "FOODON:00003223",
            "FOODON:03307958",
            "FOODON:03543148",
            "FOODON:03420260",
            "FOODON:03543117",
            "FOODON:03400294",
            "FOODON:03543140",
            "FOODON:03544103",
            "FOODON:03307026",
            "FOODON:03302605",
            "FOODON:03304469",
            "FOODON:03302449",
            "FOODON:03302522",
            "FOODON:03306205",
            "FOODON:03460271",
            "FOODON:03303711",
            "FOODON:03302620",
            "FOODON:03316516",
            "FOODON:03304756",
            "FOODON:03315520",
            "FOODON:03306210",
            "FOODON:03302612",
            "FOODON:03302517",
            "FOODON:03302523",
            "FOODON:03302539",
            "FOODON:03316334",
            "FOODON:00001673"
        ]
    },
    {
        "query": "CHOCOLATE",
        "chosen_curie": "FOODON:03543033",
        "true_curies": [
            "FOODON:03307240",
            "FOODON:03301008",
            "NCBITaxon:3641"
        ],
        "explanation": "FOODON:03543033 ('chocolate and chocolate products (efsa foodex2)') is the most appropriate term because it encompasses the broadest range of chocolate forms, aligning with the general, unspecified nature of the user's entity \"CHOCOLATE.\"  While other terms describe specific chocolate products (e.g., chocolate bar, chocolate candy), this term's definition explicitly includes \"any type of Chocolate,\" making it the most inclusive and suitable option.",
        "candidates_provided": [
            "FOODON:03400839",
            "FOODON:00002562",
            "FOODON:00003879",
            "FOODON:00003875",
            "FOODON:03400272",
            "FOODON:03400288",
            "FOODON:03400978",
            "FOODON:03400158",
            "FOODON:03000294",
            "FOODON:03460355",
            "FOODON:03000289",
            "FOODON:03000290",
            "FOODON:03543045",
            "FOODON:03543033",
            "FOODON:03543035",
            "FOODON:03000468",
            "FOODON:00003187",
            "FOODON:03544149",
            "FOODON:03543042",
            "FOODON:03543071",
            "FOODON:03307240",
            "FOODON:00001733",
            "FOODON:03303596",
            "FOODON:03460231",
            "FOODON:03301007",
            "FOODON:03315302",
            "FOODON:00001734",
            "FOODON:03303785",
            "FOODON:03316706",
            "FOODON:03303611",
            "FOODON:03310448",
            "FOODON:00001280",
            "FOODON:03316218",
            "FOODON:03305368",
            "FOODON:03302823",
            "FOODON:03316038",
            "FOODON:03316705",
            "FOODON:03306719",
            "FOODON:03311728",
            "FOODON:03303767"
        ]
    },
    {
        "query": "KIWI",
        "chosen_curie": "FOODON:00004387",
        "true_curies": [
            "FOODON:03414363"
        ],
        "explanation": "While several terms refer to kiwifruit, FOODON:00004387 is the most straightforward and unambiguous match for the user's entity \"KIWI,\" which is a common name for the fruit.  Other options are either more specific varieties (e.g., golden kiwifruit) or refer to the plant or different parts of it.  This term provides a good balance of specificity and general applicability.",
        "candidates_provided": [
            "FOODON:03414363",
            "FOODON:03541700",
            "FOODON:03544299",
            "FOODON:03541701",
            "FOODON:00002495",
            "FOODON:00004133",
            "NCBITaxon:64478",
            "FOODON:00003578",
            "FOODON:03303398",
            "FOODON:03541531",
            "FOODON:03414846",
            "HANCESTRO:0378",
            "FOODON:00004387",
            "FOODON:03412680",
            "HANCESTRO:0476",
            "HANCESTRO:0574",
            "GAZ:00000469",
            "HANCESTRO:0573",
            "FOODON:03415178",
            "FOODON:00004388",
            "FOODON:03308766",
            "FOODON:00004134",
            "FOODON:00001035",
            "FOODON:03309324",
            "FOODON:03520363",
            "FOODON:03412261",
            "FOODON:03411664",
            "FOODON:03413643"
        ]
    },
    {
        "query": "VANILLA",
        "chosen_curie": "FOODON:03541398",
        "true_curies": [
            "FOODON:03411355",
            "FOODON:03307445",
            "FOODON:03316764",
            "PATO:0001985",
            "NCBITaxon:51238",
            "FOODON:00002328",
            "FOODON:03302148"
        ],
        "explanation": "While several terms mention \"vanilla\", FOODON:03541398, '13980 - vanilla (efsa foodex2)', provides the broadest and most encompassing definition, encompassing various vanilla types and preparations as \"Spices from the fruits of the plant classified under the species Vanilla fragrans Ames or Vanilla planifolia Jacks. ex Andrews, commonly known as Vanilla.\"  It avoids the specificity of a processed product (like extract) or a plant part (like bean), making it the most suitable general term for the user's entity 'VANILLA'.",
        "candidates_provided": [
            "FOODON:00002328",
            "NCBITaxon:51239",
            "FOODON:03316764",
            "FOODON:03302056",
            "FOODON:03411355",
            "NCBITaxon:117957",
            "FOODON:00002396",
            "FOODON:00003738",
            "FOODON:03316763",
            "FOODON:03415042",
            "FOODON:03316761",
            "FOODON:03305153",
            "FOODON:03541398",
            "FOODON:03541399",
            "FOODON:03541397",
            "FOODON:03544416",
            "FOODON:03541401",
            "FOODON:03544417",
            "FOODON:03544401",
            "NCBITaxon:51238",
            "FOODON:03307348",
            "FOODON:03305800",
            "FOODON:03304426",
            "FOODON:03305844",
            "FOODON:03301629",
            "FOODON:03303151",
            "FOODON:03307273",
            "NCBITaxon:669897",
            "FOODON:03309572",
            "FOODON:03302772",
            "FOODON:03305790",
            "FOODON:03310567",
            "FOODON:03305649",
            "FOODON:03310665",
            "FOODON:03305409",
            "FOODON:03316923",
            "FOODON:03310983",
            "FOODON:03302576",
            "FOODON:03304422",
            "FOODON:03311395"
        ]
    },
    {
        "query": "BRANDY",
        "chosen_curie": "FOODON:03543387",
        "true_curies": [
            "FOODON:03301632"
        ],
        "explanation": "FOODON:03543387 is the best match because its label is 'brandy (efsa foodex2)' which directly matches the user input.  While other IDs refer to brandy-flavored items or brandy as an ingredient, this ID specifically targets brandy as a distilled spirit. The definition further clarifies that it encompasses various types of brandy, making it the most comprehensive and accurate representation.",
        "candidates_provided": [
            "FOODON:03543387",
            "FOODON:03544211",
            "FOODON:03544212",
            "FOODON:03301632",
            "FOODON:03305195",
            "FOODON:03304011",
            "FOODON:03311581",
            "FOODON:03301600",
            "FOODON:03303430",
            "FOODON:03310237",
            "FOODON:03307296",
            "FOODON:03305524",
            "FOODON:03302122",
            "FOODON:03316305",
            "FOODON:03305116",
            "FOODON:03400863",
            "FOODON:03303750",
            "FOODON:03400850",
            "FOODON:03400200",
            "FOODON:03400885",
            "FOODON:03315656",
            "FOODON:03411627",
            "FOODON:03412712",
            "FOODON:03414850",
            "FOODON:03412708",
            "rdfs:label",
            "obo:COB_0000502",
            "FOODON:03411682",
            "FOODON:03411763",
            "FOODON:03414979",
            "NCBITaxon:8852",
            "FOODON:03412387",
            "FOODON:03412871",
            "FOODON:03414009",
            "FOODON:03413370",
            "FOODON:03412872",
            "FOODON:03412464"
        ]
    },
    {
        "query": "GRAPE JUICE",
        "chosen_curie": "FOODON:03543183",
        "true_curies": [
            "FOODON:03315552",
            "FOODON:00003417",
            "FOODON:03301123",
            "FOODON:03301127"
        ],
        "explanation": "While FOODON:03301127 ('grape juice') is a good match, FOODON:03543183 ('31830 - juice, grape (efsa foodex2)') provides a broader definition encompassing various types of grape juice, including must, aligning with the general term 'grape juice' without specifying a specific processing method.  The additional detail within the definition makes it a more comprehensive choice than the simpler 'grape juice' option.",
        "candidates_provided": [
            "FOODON:00004045",
            "FOODON:00001059",
            "FOODON:00003417",
            "FOODON:03543183",
            "FOODON:03301127",
            "FOODON:03543162",
            "FOODON:00003580",
            "FOODON:03543170",
            "FOODON:00004044",
            "FOODON:03543238",
            "FOODON:00004039",
            "FOODON:00002608",
            "FOODON:03412122",
            "FOODON:00001071",
            "FOODON:00004067",
            "FOODON:00004066",
            "FOODON:00003638",
            "FOODON:03315552",
            "FOODON:00003637",
            "FOODON:00003299",
            "FOODON:00001926",
            "FOODON:03304276",
            "FOODON:03306158",
            "FOODON:03306154",
            "FOODON:03304462",
            "FOODON:03309762",
            "FOODON:03311268",
            "FOODON:03302424",
            "FOODON:03305766",
            "FOODON:03309404",
            "FOODON:03310883",
            "FOODON:03305767",
            "FOODON:03309763",
            "FOODON:03302750",
            "FOODON:03311245",
            "FOODON:03302428",
            "FOODON:03303416",
            "FOODON:03305954",
            "FOODON:03306159"
        ]
    },
    {
        "query": "CHOCOLATE",
        "chosen_curie": "FOODON:03543033",
        "true_curies": [
            "NCBITaxon:3641",
            "FOODON:03307240",
            "FOODON:03301008",
            "FOODON:03301638",
            "HANCESTRO:0383"
        ],
        "explanation": "FOODON:03543033 ('30330 - chocolate and chocolate products (efsa foodex2)') is the most appropriate term because it encompasses the broadest range of chocolate forms, aligning with the general and unspecific nature of the user input \"CHOCOLATE.\"  While other options specify chocolate types (e.g., milk chocolate bar, chocolate brownie), this term acts as a superior parent term, making it the best overall match for a general inquiry about 'CHOCOLATE'.",
        "candidates_provided": [
            "FOODON:03400839",
            "FOODON:00002562",
            "FOODON:00003879",
            "FOODON:00003875",
            "FOODON:03400272",
            "FOODON:03400288",
            "FOODON:03400978",
            "FOODON:03400158",
            "FOODON:03000294",
            "FOODON:03460355",
            "FOODON:03000289",
            "FOODON:03000290",
            "FOODON:03543045",
            "FOODON:03543033",
            "FOODON:03543035",
            "FOODON:03000468",
            "FOODON:00003187",
            "FOODON:03544149",
            "FOODON:03543042",
            "FOODON:03543071",
            "FOODON:03307240",
            "FOODON:00001733",
            "FOODON:03303596",
            "FOODON:03460231",
            "FOODON:03301007",
            "FOODON:03315302",
            "FOODON:00001734",
            "FOODON:03303785",
            "FOODON:03316706",
            "FOODON:03303611",
            "FOODON:03310448",
            "FOODON:00001280",
            "FOODON:03316218",
            "FOODON:03305368",
            "FOODON:03302823",
            "FOODON:03316038",
            "FOODON:03316705",
            "FOODON:03306719",
            "FOODON:03311728",
            "FOODON:03303767"
        ]
    },
    {
        "query": "CACAO",
        "chosen_curie": "FOODON:00001215",
        "true_curies": [
            "NCBITaxon:3641"
        ],
        "explanation": "While several terms relate to cacao, FOODON:00001215, 'cacao food product', is the most encompassing and appropriate.  It directly addresses the user's input 'CACAO' as a broad category encompassing various cacao-derived foods. Other options are too specific (e.g., cocoa bean, cacao nib) or refer to related but distinct entities (e.g., cacao plant, theobromine).",
        "candidates_provided": [
            "FOODON:00003613",
            "FOODON:00001215",
            "FOODON:03400272",
            "FOODON:03411318",
            "NCBITaxon:3641",
            "FOODON:03400158",
            "FOODON:03311325",
            "FOODON:00002503",
            "FOODON:03543402",
            "FOODON:00002286",
            "FOODON:03310742",
            "CHEBI:75621",
            "CHEBI:28946",
            "FOODON:03460206",
            "NCBITaxon:108881",
            "FOODON:03543435",
            "FOODON:03543673",
            "FOODON:03543044",
            "FOODON:03543430",
            "FOODON:03414282",
            "FOODON:03460231",
            "FOODON:03315099",
            "FOODON:03316038",
            "FOODON:03301007",
            "FOODON:03315302",
            "FOODON:03315114",
            "FOODON:03305232",
            "FOODON:03317115",
            "FOODON:03310448",
            "FOODON:00001733",
            "FOODON:03315968",
            "FOODON:03307240",
            "FOODON:03306719",
            "FOODON:03305697",
            "FOODON:03305726",
            "FOODON:03317057",
            "FOODON:03316703",
            "FOODON:00001734"
        ]
    },
    {
        "query": "LEMON",
        "chosen_curie": "FOODON:00003320",
        "true_curies": [
            "FOODON:03305518",
            "NCBITaxon:2708",
            "FOODON:03301441"
        ],
        "explanation": "While FOODON:03315104 also uses 'lemon' as its label, FOODON:00003320, 'lemon (whole or pieces)', is more specific and encompasses the whole fruit or its parts, making it a better representation of the user's entity 'LEMON' than the general term 'lemon'.",
        "candidates_provided": [
            "FOODON:03315104",
            "FOODON:00005229",
            "FOODON:03414998",
            "FOODON:03301441",
            "FOODON:03412273",
            "FOODON:03412953",
            "FOODON:00005464",
            "FOODON:00003726",
            "FOODON:03414340",
            "FOODON:00004664",
            "FOODON:00003320",
            "FOODON:03411275",
            "FOODON:00005519",
            "FOODON:00003725",
            "FOODON:00003340",
            "FOODON:03401589",
            "FOODON:03401588",
            "FOODON:03544419",
            "FOODON:03543740",
            "FOODON:03543185",
            "FOODON:03307082",
            "FOODON:03306076",
            "FOODON:03302398",
            "FOODON:03306143",
            "FOODON:03303620",
            "FOODON:03316381",
            "FOODON:00001995",
            "FOODON:03305428",
            "FOODON:03305882",
            "FOODON:03305154",
            "FOODON:03412647",
            "FOODON:03307072",
            "FOODON:03301617",
            "FOODON:03301067",
            "FOODON:03306023",
            "FOODON:03302166",
            "FOODON:03302386",
            "FOODON:03305429",
            "FOODON:03301630"
        ]
    },
    {
        "query": "VANILLA",
        "chosen_curie": "FOODON:03541398",
        "true_curies": [
            "FOODON:03411355",
            "FOODON:03303225",
            "FOODON:03316764",
            "NCBITaxon:51238",
            "FOODON:00002328"
        ],
        "explanation": "While several terms mention \"vanilla\", FOODON:03541398 encompasses various forms of vanilla as a spice, aligning with the broad interpretation of \"VANILLA\" as a flavoring agent.  Other options are too specific (e.g., extract, bean) or refer to the plant rather than the culinary ingredient.",
        "candidates_provided": [
            "FOODON:00002328",
            "NCBITaxon:51239",
            "FOODON:03316764",
            "FOODON:03302056",
            "FOODON:03411355",
            "NCBITaxon:117957",
            "FOODON:00002396",
            "FOODON:00003738",
            "FOODON:03316763",
            "FOODON:03415042",
            "FOODON:03316761",
            "FOODON:03305153",
            "FOODON:03541398",
            "FOODON:03541399",
            "FOODON:03541397",
            "FOODON:03544416",
            "FOODON:03541401",
            "FOODON:03544417",
            "FOODON:03544401",
            "NCBITaxon:51238",
            "FOODON:03307348",
            "FOODON:03305800",
            "FOODON:03304426",
            "FOODON:03305844",
            "FOODON:03301629",
            "FOODON:03303151",
            "FOODON:03307273",
            "NCBITaxon:669897",
            "FOODON:03309572",
            "FOODON:03302772",
            "FOODON:03305790",
            "FOODON:03310567",
            "FOODON:03305649",
            "FOODON:03310665",
            "FOODON:03305409",
            "FOODON:03316923",
            "FOODON:03310983",
            "FOODON:03302576",
            "FOODON:03304422",
            "FOODON:03311395"
        ]
    },
    {
        "query": "BANANA",
        "chosen_curie": "FOODON:00004184",
        "true_curies": [
            "FOODON:03311513",
            "FOODON:03316257",
            "NCBITaxon:4641",
            "FOODON:03301008"
        ],
        "explanation": "While FOODON:00004184 ('banana (raw)') and FOODON:00004183 ('banana') both represent the user entity, FOODON:00004184 is preferred due to its greater specificity.  The user provided 'BANANA' without specifying ripeness or processing; FOODON:00004184 is a more nuanced representation accounting for a common state of the fruit.",
        "candidates_provided": [
            "FOODON:03316257",
            "FOODON:03000126",
            "FOODON:00003771",
            "FOODON:00004183",
            "FOODON:00004184",
            "FOODON:03303705",
            "FOODON:00003608",
            "FOODON:00005197",
            "FOODON:00004796",
            "FOODON:00004798",
            "FOODON:03000127",
            "FOODON:00004797",
            "FOODON:00004801",
            "FOODON:00004799",
            "FOODON:03311513",
            "FOODON:00004180",
            "FOODON:00001628",
            "FOODON:03413722",
            "FOODON:00002793",
            "FOODON:03411568",
            "FOODON:00001629",
            "FOODON:00002159",
            "FOODON:00002794",
            "FOODON:03305869",
            "FOODON:03301964",
            "FOODON:03414270",
            "obo:FLOPO_0016496",
            "FOODON:03304221",
            "FOODON:03315615",
            "FOODON:03303591",
            "FOODON:03315614",
            "FOODON:00001640",
            "FOODON:03307587",
            "FOODON:00002481",
            "FOODON:03316531",
            "FOODON:03317424",
            "FOODON:03420138"
        ]
    },
    {
        "query": "POMEGRANATE",
        "chosen_curie": "FOODON:00003679",
        "true_curies": [
            "FOODON:03315552",
            "NCBITaxon:22663",
            "FOODON:00003066"
        ],
        "explanation": "FOODON:00003679 (pomegranate) is the most appropriate term because it directly names the whole fruit, unlike terms specifying parts (aril) or processed forms (juice, concentrate, etc.).  While some terms list 'pomegranate' as a synonym, this ID provides the most comprehensive and general representation of the user's entity.",
        "candidates_provided": [
            "FOODON:00004644",
            "FOODON:00003679",
            "FOODON:00005441",
            "FOODON:00004645",
            "FOODON:00003066",
            "FOODON:03543192",
            "FOODON:03543248",
            "FOODON:03544352",
            "FOODON:03543297",
            "FOODON:03310732",
            "NCBITaxon:22663",
            "FOODON:00003065",
            "FOODON:03411162",
            "FOODON:03307589",
            "FOODON:03541756",
            "FOODON:03541757",
            "FOODON:03540694",
            "FOODON:03414280",
            "FOODON:03414287",
            "FOODON:03316942",
            "FOODON:03420198",
            "FOODON:03412490",
            "FOODON:03420303",
            "FOODON:03412847",
            "FOODON:03413813",
            "FOODON:03412094",
            "FOODON:03411207",
            "FOODON:03411634",
            "FOODON:03413687",
            "FOODON:03411682",
            "FOODON:03413839",
            "FOODON:03412018",
            "FOODON:03414870"
        ]
    },
    {
        "query": "CARAMEL",
        "chosen_curie": "FOODON:03316659",
        "true_curies": [
            "FOODON:03317034",
            "FOODON:03303225"
        ],
        "explanation": "While several terms relate to caramel, FOODON:03316659 (caramel paste) is a more specific term than the generic 'caramel' (FOODON:03317034).  Other options refer to specific caramel *products* (e.g., candy, coated apples) rather than caramel as a substance.  The lack of definitions for many candidates reduces confidence; however, 'paste' is a reasonable descriptor for various forms of caramel.",
        "candidates_provided": [
            "FOODON:03315100",
            "FOODON:03543083",
            "FOODON:03543065",
            "FOODON:03544222",
            "FOODON:03401840",
            "FOODON:03317034",
            "FOODON:03302881",
            "FOODON:03316659",
            "FOODON:03413187",
            "FOODON:03412995",
            "FOODON:03316627",
            "FOODON:03301956",
            "FOODON:03303427",
            "FOODON:03400173",
            "FOODON:03413294",
            "FOODON:03310432",
            "FOODON:03413063",
            "FOODON:03316628",
            "FOODON:03311396",
            "FOODON:00001682",
            "FOODON:03302772",
            "FOODON:03316639",
            "FOODON:03311471",
            "FOODON:03316469",
            "FOODON:03316217",
            "FOODON:03305409",
            "FOODON:03310567",
            "FOODON:03316428",
            "FOODON:03316923",
            "FOODON:03305257",
            "FOODON:03316359",
            "FOODON:03316299",
            "FOODON:03460360"
        ]
    },
    {
        "query": "CHILE",
        "chosen_curie": "FOODON:00002994",
        "true_curies": [
            "GAZ:00002825"
        ],
        "explanation": "While 'Chile' (GAZ:00002825) is a perfect label match, it refers to the country, not the food.  FOODON:00002994, 'ancho pepper', is the most specific food-related term referring to a type of chile pepper.  Other options are chile pepper varieties or powders made from them, but 'ancho pepper' is a direct and unambiguous match for the entity 'CHILE' in the context of food.",
        "candidates_provided": [
            "GAZ:00002825",
            "FOODON:00002995",
            "FOODON:03412551",
            "FOODON:03415020",
            "FOODON:00002994",
            "FOODON:00002747",
            "FOODON:03412205",
            "FOODON:03412554",
            "FOODON:00003914",
            "FOODON:00002926",
            "FOODON:03412560",
            "HANCESTRO:0626",
            "HANCESTRO:0624",
            "NCBITaxon:33114",
            "FOODON:03412632",
            "FOODON:03414683",
            "HANCESTRO:0623",
            "FOODON:03412564",
            "GAZ:00002511",
            "FOODON:00002838",
            "HANCESTRO:0356",
            "FOODON:03412192",
            "FOODON:03413890",
            "FOODON:03308681",
            "FOODON:03411814",
            "FOODON:03412643",
            "HANCESTRO:0392",
            "FOODON:03415061",
            "FOODON:03308247",
            "FOODON:03411955",
            "FOODON:03308455",
            "FOODON:03309306",
            "FOODON:03413653",
            "FOODON:03413671",
            "FOODON:03413338",
            "HANCESTRO:0404",
            "NCBITaxon:173667",
            "FOODON:03309610"
        ]
    },
    {
        "query": "CACAO",
        "chosen_curie": "FOODON:00001215",
        "true_curies": [
            "FOODON:00002976",
            "NCBITaxon:3641"
        ],
        "explanation": "While several terms relate to cacao, FOODON:00001215, 'cacao food product', is the most encompassing and appropriate.  It directly addresses the user's input 'CACAO' by covering all food products derived from Theobroma cacao, encompassing various forms like cocoa and cocoa products. Other options are either too specific (e.g., cocoa bean) or relate to aspects beyond the primary sense of 'cacao' as a food (e.g., cacao plant).",
        "candidates_provided": [
            "FOODON:00003613",
            "FOODON:00001215",
            "FOODON:03400272",
            "FOODON:03411318",
            "NCBITaxon:3641",
            "FOODON:03400158",
            "FOODON:03311325",
            "FOODON:00002503",
            "FOODON:03543402",
            "FOODON:00002286",
            "FOODON:03310742",
            "CHEBI:75621",
            "CHEBI:28946",
            "FOODON:03460206",
            "NCBITaxon:108881",
            "FOODON:03543435",
            "FOODON:03543673",
            "FOODON:03543044",
            "FOODON:03543430",
            "FOODON:03414282",
            "FOODON:03460231",
            "FOODON:03315099",
            "FOODON:03316038",
            "FOODON:03301007",
            "FOODON:03315302",
            "FOODON:03315114",
            "FOODON:03305232",
            "FOODON:03317115",
            "FOODON:03310448",
            "FOODON:00001733",
            "FOODON:03315968",
            "FOODON:03307240",
            "FOODON:03306719",
            "FOODON:03305697",
            "FOODON:03305726",
            "FOODON:03317057",
            "FOODON:03316703",
            "FOODON:00001734"
        ]
    },
    {
        "query": "ROOT BEER",
        "chosen_curie": "FOODON:03543347",
        "true_curies": [
            "FOODON:03301047",
            "obo:PO_0009005"
        ],
        "explanation": "FOODON:03543347 is the best match because its label, 'root beer (efsa foodex2)', is an exact match for the user entity and its definition accurately describes root beer as a beverage.",
        "candidates_provided": [
            "FOODON:03543347",
            "FOODON:03400847",
            "FOODON:00003903",
            "FOODON:03000220",
            "FOODON:00003717",
            "FOODON:00003741",
            "obo:PO_0025476",
            "obo:PO_0005029",
            "FOODON:03543331",
            "FOODON:03301047",
            "FOODON:00005350",
            "FOODON:00003718",
            "obo:PO_0007520",
            "obo:PO_0020127",
            "FOODON:00003035",
            "obo:PO_0000045",
            "FOODON:00003752",
            "FOODON:03000086",
            "FOODON:00003753",
            "FOODON:03000104",
            "FOODON:03306198",
            "FOODON:03302434",
            "FOODON:03302106",
            "FOODON:03317539",
            "FOODON:03302110",
            "FOODON:00001020",
            "FOODON:03315616",
            "FOODON:03316982",
            "FOODON:03304546",
            "FOODON:00001064",
            "FOODON:03302109",
            "FOODON:03302113",
            "FOODON:03303555",
            "FOODON:03315977",
            "FOODON:03310882",
            "FOODON:03302108",
            "FOODON:00001021",
            "FOODON:03316535"
        ]
    },
    {
        "query": "SANGRIA",
        "chosen_curie": "FOODON:03543377",
        "true_curies": [
            "FOODON:03317455"
        ],
        "explanation": "FOODON:03543377 is the best match because its label is 'sangria (efsa foodex2)' which is an exact match for the user entity, and its definition explicitly describes sangria as a drink made from wine and fruits.",
        "candidates_provided": [
            "FOODON:03543377",
            "FOODON:03317455",
            "FOODON:03302396",
            "FOODON:03302395",
            "obo:AfPO_0000213",
            "NCBITaxon:49986",
            "FOODON:03412872",
            "FOODON:03414877",
            "FOODON:03413839",
            "FOODON:03414000",
            "GAZ:00005459",
            "FOODON:03413813",
            "NCBITaxon:1489904",
            "FOODON:03414009",
            "FOODON:03414870",
            "FOODON:03413687",
            "obo:AfPO_0000263",
            "NCBITaxon:43860",
            "FOODON:03316156",
            "NCBITaxon:70445",
            "NCBITaxon:8229",
            "NCBITaxon:57937",
            "NCBITaxon:252867"
        ]
    },
    {
        "query": "BERRY",
        "chosen_curie": "FOODON:00003521",
        "true_curies": [
            "FOODON:00003477",
            "FOODON:03306893"
        ],
        "explanation": "FOODON:00003521 (label: berry, definition: A juicy, rounded, brightly colored fruit without a stone or pit, though pips or seeds may be present.) is the best choice because it represents the general concept of a berry, encompassing various types while not being specific to one kind.  Other terms are too specific (e.g., saskatoon berry, miracle berry) or represent processed forms or plant parts.  This general term is the most appropriate for the broad user input 'BERRY'.",
        "candidates_provided": [
            "FOODON:00003007",
            "FOODON:00003671",
            "FOODON:00003026",
            "FOODON:00003775",
            "FOODON:03306893",
            "FOODON:00003477",
            "FOODON:00003797",
            "FOODON:00004398",
            "FOODON:00003521",
            "FOODON:00004669",
            "FOODON:00004631",
            "FOODON:03310230",
            "FOODON:00004670",
            "FOODON:00004379",
            "FOODON:00004632",
            "FOODON:00003696",
            "FOODON:00004399",
            "FOODON:00004359",
            "FOODON:00004668",
            "FOODON:03411231",
            "FOODON:03315614",
            "FOODON:00001640",
            "FOODON:03301220",
            "FOODON:03316906",
            "FOODON:03302118",
            "FOODON:03316891",
            "FOODON:00003609",
            "FOODON:00001656",
            "FOODON:00002282",
            "FOODON:00003134",
            "FOODON:03316889",
            "FOODON:00003028",
            "FOODON:03411393",
            "FOODON:03305746",
            "FOODON:00001641",
            "FOODON:03317103",
            "FOODON:00001170",
            "FOODON:03305149"
        ]
    },
    {
        "query": "WHISKY",
        "chosen_curie": "FOODON:03543384",
        "true_curies": [
            "FOODON:03307232"
        ],
        "explanation": "FOODON:03543384 ('whisky (efsa foodex2)') is the best match because it provides a broad definition encompassing various types of whisky, including whiskey and bourbon.  Other options are more specific types of whisky or whisky-containing products, making them less suitable as a general term for 'WHISKY'.",
        "candidates_provided": [
            "FOODON:03543384",
            "FOODON:03305868",
            "FOODON:03307232",
            "FOODON:03302775",
            "FOODON:03308809",
            "FOODON:03305050",
            "FOODON:03303623",
            "FOODON:03305092",
            "FOODON:03311125",
            "FOODON:03305956",
            "FOODON:03530170",
            "FOODON:03530166",
            "FOODON:03316011",
            "FOODON:03530171",
            "FOODON:03309410",
            "FOODON:03303782",
            "FOODON:03317365",
            "FOODON:03301640",
            "FOODON:03305518",
            "FOODON:03310770",
            "FOODON:03530165",
            "FOODON:03530169"
        ]
    },
    {
        "query": "MINT",
        "chosen_curie": "FOODON:03000237",
        "true_curies": [
            "FOODON:03307240",
            "NCBITaxon:3641",
            "FOODON:00002432"
        ],
        "explanation": "While several terms relate to mint, FOODON:03000237, 'mint (whole or pieces)', offers the broadest and most appropriate coverage.  It encompasses whole mint and processed forms, aligning best with the general and unspecified nature of the user's input 'MINT'.",
        "candidates_provided": [
            "FOODON:03000237",
            "FOODON:00002432",
            "FOODON:03000121",
            "FOODON:03000175",
            "FOODON:03000238",
            "FOODON:00003160",
            "FOODON:00003161",
            "FOODON:03303919",
            "FOODON:03305875",
            "FOODON:03306233",
            "FOODON:00004312",
            "FOODON:03544125",
            "FOODON:03401567",
            "FOODON:03540899",
            "FOODON:03540881",
            "NCBITaxon:38860",
            "FOODON:03544322",
            "FOODON:03411267",
            "FOODON:03544181",
            "NCBITaxon:190902",
            "BFO:0000024",
            "FOODON:03413821",
            "CHEBI:33973",
            "CHEBI:30475",
            "CHEBI:33352",
            "CHEBI:35115",
            "CHEBI:35155",
            "FOODON:03303760",
            "BFO:0000141",
            "obo:UO_0000031",
            "FOODON:03412713",
            "CHEBI:49867",
            "FOODON:03414562",
            "ENVO:01001069",
            "CHEBI:16793",
            "FOODON:03412513",
            "CHEBI:82663",
            "FOODON:03430117",
            "CHEBI:18291"
        ]
    },
    {
        "query": "WHITE",
        "chosen_curie": "FOODON:02021978",
        "true_curies": [
            "FOODON:03301671",
            "FOODON:03301723",
            "HANCESTRO:0005",
            "PATO:0000323",
            "FOODON:03315552",
            "FOODON:00003657"
        ],
        "explanation": "While several terms include \"white\" in their label, FOODON:02021978, 'white sucker fillet', is preferred because it is a specific food item rather than a color or a general descriptor like 'white' (FOODON:0000323).  The other 'white' terms are all specific foods, but 'fillet' implies a more refined and identifiable food product compared to a whole fish or other less processed food.",
        "candidates_provided": [
            "FOODON:00003873",
            "FOODON:00003762",
            "FOODON:00003783",
            "FOODON:00003757",
            "FOODON:02021978",
            "FOODON:00003552",
            "FOODON:02021973",
            "FOODON:02021976",
            "FOODON:02021974",
            "FOODON:03414533",
            "FOODON:02022088",
            "FOODON:00003559",
            "FOODON:02021972",
            "FOODON:00003462",
            "FOODON:03309415",
            "FOODON:03301232",
            "FOODON:00003777",
            "FOODON:00003518",
            "FOODON:02020725",
            "FOODON:02020155",
            "PATO:0000323",
            "FOODON:03308307",
            "FOODON:03309088",
            "FOODON:03530274",
            "FOODON:03530283",
            "FOODON:03309329",
            "FOODON:03306978",
            "FOODON:03315070",
            "FOODON:03311609",
            "FOODON:03412894",
            "FOODON:03303181",
            "FOODON:03304162",
            "FOODON:03316167",
            "FOODON:03510096",
            "FOODON:03412402",
            "FOODON:03309213",
            "FOODON:00002363",
            "FOODON:03302338",
            "FOODON:03301055",
            "FOODON:03308684"
        ]
    },
    {
        "query": "MARASCHINO",
        "chosen_curie": "FOODON:03301256",
        "true_curies": [
            "FOODON:03317453"
        ],
        "explanation": "While several terms relate to maraschino cherries, FOODON:03301256, 'maraschino cherry', is the most general and direct match for the ambiguous user input 'MARASCHINO'.  Other options refer to specific preparations (e.g., in syrup) or flavors, making them less suitable as a primary representation of the term 'MARASCHINO'.",
        "candidates_provided": [
            "FOODON:03317453",
            "FOODON:03544311",
            "FOODON:03301256",
            "FOODON:03305146",
            "FOODON:03303125",
            "FOODON:03306227",
            "FOODON:03302951",
            "FOODON:03302950",
            "FOODON:03306382",
            "NCBITaxon:2982316",
            "FOODON:03412872",
            "obo:AfPO_0000213",
            "FOODON:03304763",
            "FOODON:03306301",
            "FOODON:03413392",
            "FOODON:03305186",
            "NCBITaxon:181124",
            "FOODON:03316819",
            "FOODON:03530134",
            "FOODON:03303925",
            "FOODON:03306346"
        ]
    },
    {
        "query": "STEAMED",
        "chosen_curie": "FOODON:03450023",
        "true_curies": [
            "UBERON:0001913",
            "FOODON:00002657"
        ],
        "explanation": "While 'food (steamed)' (FOODON:00002657) is tempting due to the synonym, it's too general.  Many of the other options are specific foods prepared by steaming. FOODON:03450023, 'steaming without pressure,' is the most appropriate as it describes the cooking method itself, rather than a specific food item prepared using that method.",
        "candidates_provided": [
            "FOODON:00002657",
            "FOODON:03308047",
            "FOODON:03307615",
            "FOODON:03304585",
            "FOODON:03311814",
            "FOODON:03310885",
            "FOODON:03310902",
            "FOODON:03307023",
            "FOODON:03601051",
            "FOODON:03414724",
            "FOODON:00005532",
            "FOODON:00002809",
            "FOODON:00003884",
            "FOODON:00001310",
            "FOODON:03450043",
            "FOODON:00002394",
            "FOODON:03307110",
            "FOODON:03415088",
            "FOODON:03304758",
            "FOODON:03540196",
            "FOODON:03440014",
            "FOODON:03450021",
            "FOODON:03450023",
            "FOODON:03440018",
            "FOODON:03440022",
            "FOODON:00004091",
            "FOODON:03450022",
            "FOODON:03450039",
            "FOODON:03440023",
            "FOODON:03450041",
            "FOODON:03450031",
            "FOODON:03440003",
            "FOODON:03450012",
            "FOODON:03450017",
            "FOODON:03470158",
            "FOODON:03470159",
            "FOODON:00005152",
            "FOODON:03450040",
            "FOODON:03470135",
            "FOODON:03450018"
        ]
    },
    {
        "query": "CHUCK",
        "chosen_curie": "FOODON:02000045",
        "true_curies": [
            "FOODON:03530021"
        ],
        "explanation": "While several terms relate to chuck (e.g., ground chuck, various chuck steaks and roasts), FOODON:02000045, 'beef chuck', is the most appropriate because it represents the primal cut of beef from which all the other options are derived.  It provides the most encompassing and accurate description without unnecessary specificity.",
        "candidates_provided": [
            "FOODON:02000105",
            "FOODON:02000103",
            "FOODON:02000056",
            "FOODON:00002929",
            "FOODON:02000454",
            "FOODON:03310939",
            "FOODON:02000058",
            "FOODON:02000062",
            "FOODON:02000104",
            "FOODON:02000106",
            "FOODON:02000048",
            "FOODON:02000047",
            "FOODON:02000050",
            "FOODON:02000053",
            "FOODON:02000094",
            "FOODON:02000090",
            "FOODON:02000100",
            "FOODON:02000110",
            "FOODON:02000057",
            "FOODON:02000096",
            "FOODON:03530021",
            "FOODON:03411576",
            "FOODON:03414116",
            "FOODON:03412143",
            "FOODON:02000453",
            "FOODON:02000045",
            "FOODON:03413475",
            "FOODON:02000052",
            "FOODON:00004284",
            "FOODON:02000093",
            "FOODON:03303376",
            "FOODON:02000054",
            "FOODON:03411147",
            "FOODON:03412119"
        ]
    },
    {
        "query": "ROSEMARY",
        "chosen_curie": "FOODON:03540863",
        "true_curies": [
            "NCIT:C45305",
            "NCBITaxon:39367",
            "CHEBI:60004",
            "FOODON:00002212"
        ],
        "explanation": "While several terms mention 'rosemary', FOODON:03540863 is the most comprehensive and unambiguous. It specifically defines rosemary as an aromatic fresh herb from *Rosmarinus officinalis* and addresses the issue of unspecified parts consumed, making it superior to others lacking such detail.",
        "candidates_provided": [
            "FOODON:00003809",
            "FOODON:03401598",
            "FOODON:03540862",
            "FOODON:03540863",
            "FOODON:03541273",
            "FOODON:03544365",
            "NCBITaxon:39367",
            "FOODON:03305866",
            "FOODON:03414392",
            "FOODON:03411495",
            "FOODON:03301209",
            "FOODON:00002212",
            "FOODON:03311170",
            "FOODON:03414915",
            "FOODON:03414342",
            "CHEBI:65585",
            "NCBITaxon:49170",
            "FOODON:03411691",
            "FOODON:03414961",
            "FOODON:03414521",
            "NCBITaxon:3764",
            "NCBITaxon:3744",
            "FOODON:03414520",
            "NCBITaxon:171638",
            "NCBITaxon:3745",
            "FOODON:03414974",
            "NCBITaxon:71275",
            "FOODON:03415132",
            "FOODON:00002211",
            "PATO:0001425",
            "NCBITaxon:1176516",
            "FOODON:03305862",
            "FOODON:03414962"
        ]
    },
    {
        "query": "THIGH",
        "chosen_curie": "FOODON:02010123",
        "true_curies": [
            "UBERON:0000376"
        ],
        "explanation": "While more specific terms like \"chicken thigh\" exist, the user input \"THIGH\" is too general to warrant a choice beyond the most general term available that accurately describes the entity.  \"animal thigh\" encompasses all other options and avoids unwarranted specificity.",
        "candidates_provided": [
            "FOODON:02010123",
            "FOODON:03530160",
            "FOODON:02020671",
            "FOODON:02020741",
            "FOODON:00003325",
            "FOODON:02020219",
            "FOODON:02010157",
            "FOODON:00003329",
            "FOODON:00003331",
            "FOODON:02020675",
            "FOODON:02020249",
            "FOODON:02020744",
            "FOODON:02010153",
            "FOODON:02020513",
            "obo:GENEPIO_0002752",
            "FOODON:02010155",
            "FOODON:00003330",
            "FOODON:00003328",
            "FOODON:02010274",
            "FOODON:02020338",
            "FOODON:02010156",
            "FOODON:02010298",
            "FOODON:02010154",
            "FOODON:02010281",
            "FOODON:02020012",
            "FOODON:02020013",
            "FOODON:02010195",
            "FOODON:02010290",
            "FOODON:02010302",
            "FOODON:02010197",
            "FOODON:02010138",
            "FOODON:02020014",
            "FOODON:02010164",
            "FOODON:02010294"
        ]
    },
    {
        "query": "BIRD",
        "chosen_curie": "FOODON:03602002",
        "true_curies": [
            "FOODON:00002616"
        ],
        "explanation": "While many options refer to specific types of birds, \"game bird\" (FOODON:03602002) is the most appropriate general term for 'BIRD' within a food ontology context.  It encompasses various wild birds hunted for consumption, aligning best with a broad interpretation of the user's input.",
        "candidates_provided": [
            "FOODON:00003853",
            "FOODON:00004505",
            "FOODON:00002736",
            "FOODON:03411236",
            "FOODON:03544523",
            "FOODON:03307069",
            "FOODON:00004299",
            "FOODON:03602002",
            "FOODON:03302205",
            "FOODON:00003282",
            "FOODON:03420194",
            "FOODON:03411563",
            "FOODON:03510030",
            "FOODON:03412564",
            "FOODON:00001131",
            "FOODON:00004504",
            "FOODON:03414731",
            "FOODON:03308499",
            "NCBITaxon:67771",
            "NCBITaxon:46478",
            "FOODON:03411382",
            "FOODON:02020051",
            "FOODON:03413504",
            "FOODON:03411251",
            "FOODON:03411304",
            "FOODON:03413503",
            "FOODON:03412697",
            "NCBITaxon:46474",
            "FOODON:03414367",
            "NCBITaxon:56259",
            "FOODON:03414618",
            "FOODON:03414523",
            "FOODON:02020081",
            "NCBITaxon:13217",
            "NCBITaxon:8968",
            "NCBITaxon:8930"
        ]
    },
    {
        "query": "TANDOORI",
        "chosen_curie": "FOODON:03544064",
        "true_curies": [
            "FOODON:03317543"
        ],
        "explanation": "While FOODON:03317543 has the label 'tandoori', FOODON:03544064 ('indian spice mixes and similar (other than curry powder) (efsa foodex2)') provides a more informative and contextual definition.  Tandoori is a type of cooking method, but more importantly, it uses a specific blend of spices.  Therefore, the spice mix category is a more accurate representation of the culinary term 'Tandoori' than simply using 'tandoori' as a label without context.",
        "candidates_provided": [
            "FOODON:03317543",
            "FOODON:03544389",
            "FOODON:03544064",
            "obo:AfPO_0000334",
            "FOODON:03412305",
            "obo:AfPO_0000483",
            "FOODON:03311542",
            "GAZ:00002472",
            "obo:AfPO_0000472",
            "obo:AfPO_0000495",
            "FOODON:03315368",
            "FOODON:03411910",
            "obo:AfPO_0000531",
            "FOODON:03520361",
            "FOODON:03315284",
            "FOODON:03315108",
            "obo:AfPO_0000091",
            "HANCESTRO:0487",
            "FOODON:03305510",
            "FOODON:00002309",
            "obo:AfPO_0000148"
        ]
    },
    {
        "query": "TURKEY",
        "chosen_curie": "FOODON:02020418",
        "true_curies": [
            "NCBITaxon:9103",
            "NCIT:C45305",
            "FOODON:03414166",
            "FOODON:00002805",
            "FOODON:03411236",
            "CHEBI:60004",
            "GAZ:00000558"
        ],
        "explanation": "While several terms mention 'turkey', FOODON:02020418 is the most appropriate because its definition explicitly states 'A whole turkey', directly corresponding to the user's simple input 'TURKEY'. Other options specify parts of a turkey (breast, fillet, etc.) or processed forms (ground turkey, turkey frankfurter, etc.).  This choice prioritizes the most comprehensive and direct representation of the user's entity.",
        "candidates_provided": [
            "FOODON:03310934",
            "FOODON:02020416",
            "FOODON:02020450",
            "FOODON:02020409",
            "FOODON:00002805",
            "FOODON:03411236",
            "FOODON:00004551",
            "FOODON:02020463",
            "FOODON:02020570",
            "FOODON:00002690",
            "FOODON:02020420",
            "FOODON:00002802",
            "FOODON:02020443",
            "FOODON:00002714",
            "FOODON:02020464",
            "FOODON:02020469",
            "FOODON:02020457",
            "FOODON:02020418",
            "FOODON:03414166",
            "FOODON:02020634",
            "HANCESTRO:0451",
            "GAZ:00000558",
            "FOODON:03310573",
            "FOODON:03304545",
            "FOODON:00002979",
            "FOODON:03307578",
            "FOODON:03311516",
            "FOODON:03309735",
            "FOODON:03414167",
            "FOODON:03307078",
            "FOODON:03311109",
            "FOODON:03307205",
            "FOODON:03413547",
            "FOODON:02020403",
            "FOODON:02020430",
            "FOODON:03307580",
            "FOODON:03311736",
            "FOODON:02020569"
        ]
    },
    {
        "query": "CELERY",
        "chosen_curie": "FOODON:00003636",
        "true_curies": [
            "CHEBI:60004",
            "NCIT:C45305",
            "NCBITaxon:117781",
            "FOODON:03301727"
        ],
        "explanation": "While several terms relate to celery, FOODON:00003636, 'celery bunch', is the most appropriate.  'Celery' is most commonly understood as a bunch of stalks, making this term the most encompassing and relevant to a typical user's understanding of the entity. Other options refer to specific parts (stalk, leaf, root, heart), processed forms (soup), or are too generic (food product).",
        "candidates_provided": [
            "FOODON:00004121",
            "FOODON:00003589",
            "FOODON:00003636",
            "FOODON:03000036",
            "FOODON:00003635",
            "FOODON:00003411",
            "FOODON:03310560",
            "FOODON:00001705",
            "FOODON:00001704",
            "FOODON:03301727",
            "FOODON:03411729",
            "FOODON:03401857",
            "FOODON:03401574",
            "FOODON:03543210",
            "FOODON:03540832",
            "FOODON:03541296",
            "FOODON:03541266",
            "FOODON:03541297",
            "FOODON:00003034",
            "FOODON:03540833",
            "FOODON:00004123",
            "FOODON:03303374",
            "FOODON:03311578",
            "FOODON:03411634",
            "FOODON:03412030",
            "FOODON:03315875",
            "FOODON:03305224",
            "FOODON:03411282",
            "FOODON:03301862",
            "FOODON:03316493",
            "FOODON:03315289",
            "FOODON:00003040",
            "FOODON:03301221",
            "FOODON:03315615",
            "FOODON:03420138",
            "FOODON:03316531",
            "FOODON:03302922",
            "FOODON:03316217",
            "FOODON:03315176"
        ]
    },
    {
        "query": "FILLET",
        "chosen_curie": "FOODON:02021802",
        "true_curies": [
            "FOODON:00003342"
        ],
        "explanation": "While many options refer to specific fish fillets, 'animal fillet (skinless)' (FOODON:02021802) is the most appropriate choice because the user input 'FILLET' is a general term.  Other options are too specific (e.g., herring fillet, tuna fillet), while obsolete or unrelated terms are excluded.  The skinless specification is a secondary detail which does not invalidate its superior generality as a match to the user's unspecific input.",
        "candidates_provided": [
            "FOODON:00002715",
            "FOODON:00002669",
            "FOODON:00002731",
            "FOODON:00002742",
            "FOODON:02021830",
            "FOODON:02022006",
            "FOODON:02021802",
            "FOODON:02022019",
            "FOODON:02021902",
            "FOODON:02021915",
            "FOODON:02022032",
            "FOODON:02022620",
            "FOODON:02021928",
            "FOODON:02022031",
            "FOODON:02022008",
            "FOODON:02021914",
            "FOODON:02010017",
            "FOODON:02020162",
            "FOODON:02021829",
            "FOODON:02021805",
            "FOODON:00003342",
            "FOODON:03315257",
            "FOODON:03530143",
            "rdfs:label",
            "FOODON:03301120",
            "FOODON:03530138",
            "FOODON:03400408",
            "FOODON:03316970",
            "FOODON:03420220",
            "FOODON:03460795",
            "IAO:0000116",
            "FOODON:03301404",
            "FOODON:03413663",
            "FOODON:00001868",
            "IAO:0000600",
            "FOODON:03411903",
            "FOODON:03411880",
            "FOODON:03316942",
            "FOODON:03420198",
            "FOODON:03530140"
        ]
    },
    {
        "query": "SPAGHETTI",
        "chosen_curie": "FOODON:03304237",
        "true_curies": [
            "NCIT:C45305",
            "FOODON:03301005",
            "CHEBI:60004"
        ],
        "explanation": "While several options mention \"spaghetti,\" FOODON:03304237, \"spaghetti and meatballs,\" is the most specific.  Other options are either more general (like plain pasta) or refer to variations or preparations of spaghetti.",
        "candidates_provided": [
            "FOODON:03301005",
            "FOODON:03000078",
            "FOODON:03000077",
            "FOODON:03412508",
            "FOODON:03540771",
            "FOODON:03316808",
            "FOODON:03304192",
            "FOODON:03316826",
            "FOODON:03305711",
            "FOODON:03304237",
            "FOODON:03303886",
            "FOODON:03305712",
            "FOODON:03316817",
            "FOODON:03317305",
            "FOODON:03316823",
            "FOODON:03309560",
            "FOODON:03316833",
            "FOODON:03316811",
            "FOODON:03304262",
            "FOODON:03304014",
            "FOODON:03317419",
            "FOODON:03306347",
            "FOODON:03306288",
            "FOODON:03303438",
            "FOODON:03306311",
            "FOODON:03306338",
            "FOODON:03304267",
            "FOODON:03306339",
            "FOODON:03310772",
            "FOODON:03306312",
            "FOODON:03303883"
        ]
    },
    {
        "query": "MEAT SAUCE",
        "chosen_curie": "FOODON:03304206",
        "true_curies": [
            "FOODON:03311146",
            "FOODON:03304132"
        ],
        "explanation": "While FOODON:03544129 has the label 'meat sauce', its definition is broad and relies on external links. FOODON:03304206 is more specific, providing a clear definition, even though it refers to a specific type of meat sauce.  The user query 'Meat Sauce' is a very general term, and given the lack of specificity in other 'meat sauce' options, FOODON:03304206 offers more clarity despite its specificity.",
        "candidates_provided": [
            "FOODON:00003232",
            "FOODON:00002526",
            "FOODON:00003259",
            "FOODON:03306786",
            "FOODON:03304206",
            "FOODON:03544129",
            "FOODON:00003235",
            "FOODON:03309475",
            "FOODON:03400863",
            "FOODON:00005513",
            "FOODON:03400862",
            "FOODON:02020077",
            "FOODON:02021450",
            "FOODON:02022502",
            "FOODON:02020667",
            "FOODON:02021339",
            "FOODON:02022028",
            "FOODON:02020042",
            "FOODON:02020398",
            "FOODON:02020827",
            "FOODON:03309559",
            "FOODON:03309454",
            "FOODON:03304132",
            "FOODON:03306430",
            "FOODON:03304014",
            "FOODON:03302062",
            "FOODON:03316286",
            "FOODON:03316331",
            "FOODON:03317284",
            "FOODON:03317328",
            "FOODON:03309560",
            "FOODON:03307971",
            "FOODON:03306443",
            "FOODON:03311314",
            "FOODON:03317376",
            "FOODON:03315420",
            "FOODON:03316231",
            "FOODON:03316720",
            "FOODON:03310240",
            "FOODON:03309854"
        ]
    },
    {
        "query": "MEATLOAF",
        "chosen_curie": "FOODON:03543852",
        "true_curies": [
            "FOODON:03315662"
        ],
        "explanation": "While FOODON:03315662 has the exact label \"meatloaf\", FOODON:03543852 (\"meat loaf (efsa foodex2)\") provides a more comprehensive definition, explicitly stating that it includes composite dishes made from ground meat and other ingredients formed into a loaf shape.  This aligns better with the general understanding of meatloaf, encompassing various types and ingredient combinations.",
        "candidates_provided": [
            "FOODON:03315662",
            "FOODON:03304749",
            "FOODON:03310803",
            "FOODON:03306444",
            "FOODON:03543855",
            "FOODON:03543854",
            "FOODON:03543853",
            "FOODON:03543852",
            "FOODON:03315661",
            "FOODON:03317284",
            "FOODON:03303567",
            "FOODON:03309854",
            "FOODON:03311860",
            "FOODON:03303566",
            "FOODON:03317286",
            "FOODON:03307760",
            "FOODON:00002028",
            "FOODON:03311662",
            "FOODON:03303431",
            "FOODON:03317328",
            "FOODON:03310240",
            "FOODON:03310959",
            "FOODON:00003288",
            "FOODON:03310840"
        ]
    },
    {
        "query": "CELERY SEED",
        "chosen_curie": "FOODON:03541297",
        "true_curies": [
            "obo:PO_0009010",
            "FOODON:03301862",
            "NCBITaxon:117781",
            "FOODON:03301727",
            "FOODON:03420155"
        ],
        "explanation": "FOODON:03541297 ('celery seed (efsa foodex2)') is the best match because its label and definition explicitly refer to 'celery seed' and specify its origin as the seeds of *Apium graveolens* L.  While FOODON:03541296 mentions 'celery seed and similar',  FOODON:03541297 is more precise and directly addresses the user's entity.",
        "candidates_provided": [
            "FOODON:03541296",
            "FOODON:00004121",
            "FOODON:00003836",
            "FOODON:00003589",
            "FOODON:00003832",
            "FOODON:00003636",
            "FOODON:03541297",
            "FOODON:03000036",
            "FOODON:03000224",
            "FOODON:03000241",
            "FOODON:00002961",
            "FOODON:00003635",
            "FOODON:00003411",
            "FOODON:00003581",
            "FOODON:03301840",
            "FOODON:03000119",
            "FOODON:03310560",
            "FOODON:00003899",
            "FOODON:00001705",
            "FOODON:00003905",
            "FOODON:03301862",
            "obo:FLOPO_0012953",
            "FOODON:00003565",
            "FOODON:03420249",
            "FOODON:03420134",
            "FOODON:03303374",
            "FOODON:03420135",
            "obo:FLOPO_0003948",
            "FOODON:03311578",
            "FOODON:03420182",
            "FOODON:00004123",
            "FOODON:03304497",
            "FOODON:03420178",
            "obo:FLOPO_0014628",
            "FOODON:03301398",
            "FOODON:03304313",
            "FOODON:03310170",
            "FOODON:03301177",
            "FOODON:00001173",
            "FOODON:03460177"
        ]
    },
    {
        "query": "RICE WINE",
        "chosen_curie": "FOODON:00002393",
        "true_curies": [
            "FOODON:03301641",
            "FOODON:03307312",
            "NCBITaxon:4530"
        ],
        "explanation": "While 'FOODON:03307312' has the exact label match, it lacks a definition.  'FOODON:00002393', 'unrefined chinese wine', is a better choice because, although not an exact match, it describes a category of rice wine and provides a definition, giving more context than the label-only match.",
        "candidates_provided": [
            "FOODON:03301641",
            "FOODON:00002609",
            "FOODON:00002607",
            "FOODON:00002639",
            "FOODON:03311875",
            "FOODON:00002881",
            "FOODON:03411322",
            "FOODON:00002849",
            "FOODON:00004676",
            "FOODON:00003438",
            "FOODON:00002393",
            "FOODON:00002867",
            "FOODON:00004720",
            "FOODON:00004327",
            "FOODON:03311123",
            "FOODON:03600010",
            "FOODON:00003786",
            "FOODON:00002584",
            "FOODON:00001332",
            "FOODON:00002614",
            "FOODON:03307312",
            "FOODON:03307370",
            "FOODON:00002203",
            "FOODON:03310386",
            "FOODON:03310254",
            "FOODON:03305707",
            "FOODON:03305184",
            "FOODON:00001185",
            "FOODON:00004320",
            "FOODON:03307152",
            "FOODON:03311392",
            "FOODON:03302745",
            "FOODON:03301754",
            "FOODON:03310371",
            "FOODON:03306909",
            "FOODON:03303222",
            "FOODON:00001051",
            "FOODON:03306043",
            "FOODON:03311295",
            "FOODON:03304451"
        ]
    },
    {
        "query": "OIL",
        "chosen_curie": "FOODON:03316687",
        "true_curies": [
            "FOODON:03315552",
            "NCIT:C45305",
            "FOODON:03310387",
            "CHEBI:60004"
        ],
        "explanation": "While 'oil' (FOODON:03310387) is a possible match, it's too general.  The user query 'OIL' is likely referring to a specific type of oil.  Among the more specific options, several seed oils and other oils are listed. However, none of the labels or synonyms exactly match the user input 'OIL'.  The most appropriate choice is 'grape seed oil (edible)' because the user input is a very general term, whereas 'grape seed oil (edible)' is specific and likely the most commonly encountered oil.",
        "candidates_provided": [
            "FOODON:03309857",
            "FOODON:00003216",
            "FOODON:00003219",
            "FOODON:00002884",
            "FOODON:03309704",
            "FOODON:00001088",
            "FOODON:03316687",
            "FOODON:03306633",
            "FOODON:03420307",
            "FOODON:00002808",
            "FOODON:00003220",
            "FOODON:03420301",
            "FOODON:00005460",
            "FOODON:03420297",
            "FOODON:00005454",
            "FOODON:00005458",
            "FOODON:03000465",
            "FOODON:03000464",
            "FOODON:03310486",
            "FOODON:00003218",
            "FOODON:03530173",
            "FOODON:03310387",
            "FOODON:03530175",
            "FOODON:03315287",
            "FOODON:03530174",
            "FOODON:03316692",
            "FOODON:03316660",
            "FOODON:03530172",
            "FOODON:03316044",
            "FOODON:03306641",
            "FOODON:03315239",
            "FOODON:03306557",
            "FOODON:03306550",
            "FOODON:03306634",
            "FOODON:03310326",
            "FOODON:03302653",
            "FOODON:03316684",
            "FOODON:03301826",
            "FOODON:03306658",
            "FOODON:03315889"
        ]
    },
    {
        "query": "OIL",
        "chosen_curie": "FOODON:03316687",
        "true_curies": [
            "NCIT:C45305",
            "FOODON:03310387",
            "CHEBI:60004"
        ],
        "explanation": "While 'OIL' is a very general term,  FOODON:03316687 (grape seed oil (edible)) is the only candidate that includes 'oil' in its label, and is specific enough to be a reasonable interpretation of the user's input, which lacks further details.",
        "candidates_provided": [
            "FOODON:03309857",
            "FOODON:00003216",
            "FOODON:00003219",
            "FOODON:00002884",
            "FOODON:03309704",
            "FOODON:00001088",
            "FOODON:03316687",
            "FOODON:03306633",
            "FOODON:03420307",
            "FOODON:00002808",
            "FOODON:00003220",
            "FOODON:03420301",
            "FOODON:00005460",
            "FOODON:03420297",
            "FOODON:00005454",
            "FOODON:00005458",
            "FOODON:03000465",
            "FOODON:03000464",
            "FOODON:03310486",
            "FOODON:00003218",
            "FOODON:03530173",
            "FOODON:03310387",
            "FOODON:03530175",
            "FOODON:03315287",
            "FOODON:03530174",
            "FOODON:03316692",
            "FOODON:03316660",
            "FOODON:03530172",
            "FOODON:03316044",
            "FOODON:03306641",
            "FOODON:03315239",
            "FOODON:03306557",
            "FOODON:03306550",
            "FOODON:03306634",
            "FOODON:03310326",
            "FOODON:03302653",
            "FOODON:03316684",
            "FOODON:03301826",
            "FOODON:03306658",
            "FOODON:03315889"
        ]
    },
    {
        "query": "SCALLOPS",
        "chosen_curie": "FOODON:03542538",
        "true_curies": [
            "NCBITaxon:6566"
        ],
        "explanation": "While several terms relate to scallops, FOODON:03542538 is the most comprehensive. It encompasses various scallop types under the ISSCAAP group, acknowledging the broad usage of 'scallops'.  Other options like FOODON:03414603 are specific species, while FOODON:02020813 is too specific (pieces of scallops), and NCBITaxon:6566 is a taxonomic classification, not a food item.",
        "candidates_provided": [
            "FOODON:03542538",
            "FOODON:02020813",
            "NCBITaxon:6566",
            "FOODON:03414603",
            "FOODON:00002582",
            "FOODON:03542539",
            "FOODON:03412113",
            "FOODON:03411489",
            "FOODON:03412399",
            "FOODON:03412887",
            "FOODON:03414626",
            "FOODON:03420276",
            "FOODON:02022202",
            "FOODON:03411446",
            "FOODON:03413663",
            "FOODON:02022102",
            "FOODON:03412292",
            "FOODON:03414147",
            "FOODON:03411903",
            "FOODON:03413959",
            "FOODON:03412660",
            "FOODON:02022103",
            "FOODON:03412715",
            "FOODON:03414009",
            "FOODON:03412654",
            "FOODON:03411880",
            "FOODON:03412459"
        ]
    },
    {
        "query": "LEMON",
        "chosen_curie": "FOODON:00003320",
        "true_curies": [
            "FOODON:03301441",
            "FOODON:00003013",
            "FOODON:03309928",
            "FOODON:00003520",
            "FOODON:00001649",
            "NCBITaxon:2708"
        ],
        "explanation": "While FOODON:03315104 (lemon) is a good match, FOODON:00003320 (lemon (whole or pieces)) is more specific and encompasses the various forms a lemon might take when used as a food ingredient, making it a better fit than the general term 'lemon'.",
        "candidates_provided": [
            "FOODON:03315104",
            "FOODON:00005229",
            "FOODON:03414998",
            "FOODON:03301441",
            "FOODON:03412273",
            "FOODON:03412953",
            "FOODON:00005464",
            "FOODON:00003726",
            "FOODON:03414340",
            "FOODON:00004664",
            "FOODON:00003320",
            "FOODON:03411275",
            "FOODON:00005519",
            "FOODON:00003725",
            "FOODON:00003340",
            "FOODON:03401589",
            "FOODON:03401588",
            "FOODON:03544419",
            "FOODON:03543740",
            "FOODON:03543185",
            "FOODON:03307082",
            "FOODON:03306076",
            "FOODON:03302398",
            "FOODON:03306143",
            "FOODON:03303620",
            "FOODON:03316381",
            "FOODON:00001995",
            "FOODON:03305428",
            "FOODON:03305882",
            "FOODON:03305154",
            "FOODON:03412647",
            "FOODON:03307072",
            "FOODON:03301617",
            "FOODON:03301067",
            "FOODON:03306023",
            "FOODON:03302166",
            "FOODON:03302386",
            "FOODON:03305429",
            "FOODON:03301630"
        ]
    },
    {
        "query": "CHICKEN THIGH",
        "chosen_curie": "FOODON:02020219",
        "true_curies": [
            "UBERON:0000376",
            "obo:GENEPIO_0002752",
            "FOODON:03411457",
            "NCBITaxon:9031"
        ],
        "explanation": "This term, 'chicken thigh', is the most accurate and general representation of the user's entity.  While other options offer more specific details (e.g., skinless, boneless, raw), the user entity simply states 'CHICKEN THIGH', making FOODON:02020219 the best fit.  The obsolete term (FOODON:obo:GENEPIO_0002752) is explicitly marked as obsolete and should not be used.  'Poultry thigh' (FOODON:03530160) is too general; it doesn't specify chicken.",
        "candidates_provided": [
            "FOODON:02020219",
            "FOODON:00003331",
            "FOODON:02020249",
            "obo:GENEPIO_0002752",
            "FOODON:00003330",
            "FOODON:02020338",
            "FOODON:00003358",
            "FOODON:03310166",
            "FOODON:02020256",
            "FOODON:02020287",
            "FOODON:02020228",
            "FOODON:02020226",
            "FOODON:02020230",
            "FOODON:02020285",
            "FOODON:00003359",
            "FOODON:02020345",
            "FOODON:02020227",
            "FOODON:00003363",
            "FOODON:02020352",
            "FOODON:02020229",
            "FOODON:00003362",
            "FOODON:03310222",
            "FOODON:03310169",
            "FOODON:03310167",
            "FOODON:03530160",
            "FOODON:02020360"
        ]
    },
    {
        "query": "WHITE",
        "chosen_curie": "FOODON:02021978",
        "true_curies": [
            "PATO:0000323",
            "FOODON:03301705",
            "HANCESTRO:0005"
        ],
        "explanation": "While several options describe foods with \"white\" in their name, FOODON:02021978, \"white sucker fillet\", is the most specific and unambiguous match.  Other options like \"white potato\" or \"white mushroom\" are common foods and too general considering the context. The term \"white\" by itself is too broad, lacking the specificity needed.",
        "candidates_provided": [
            "FOODON:00003873",
            "FOODON:00003762",
            "FOODON:00003783",
            "FOODON:00003757",
            "FOODON:02021978",
            "FOODON:00003552",
            "FOODON:02021973",
            "FOODON:02021976",
            "FOODON:02021974",
            "FOODON:03414533",
            "FOODON:02022088",
            "FOODON:00003559",
            "FOODON:02021972",
            "FOODON:00003462",
            "FOODON:03309415",
            "FOODON:03301232",
            "FOODON:00003777",
            "FOODON:00003518",
            "FOODON:02020725",
            "FOODON:02020155",
            "PATO:0000323",
            "FOODON:03308307",
            "FOODON:03309088",
            "FOODON:03530274",
            "FOODON:03530283",
            "FOODON:03309329",
            "FOODON:03306978",
            "FOODON:03315070",
            "FOODON:03311609",
            "FOODON:03412894",
            "FOODON:03303181",
            "FOODON:03304162",
            "FOODON:03316167",
            "FOODON:03510096",
            "FOODON:03412402",
            "FOODON:03309213",
            "FOODON:00002363",
            "FOODON:03302338",
            "FOODON:03301055",
            "FOODON:03308684"
        ]
    },
    {
        "query": "FLOUR",
        "chosen_curie": "FOODON:00004512",
        "true_curies": [
            "FOODON:03307668",
            "FOODON:03301116"
        ],
        "explanation": "While FOODON:00004510 is a more general term for 'flour', FOODON:00004512, '00 white wheat flour', is a specific type of flour.  Given the lack of further specification by the user,  a specific type of flour is preferable to the general term 'flour' itself.",
        "candidates_provided": [
            "FOODON:03302142",
            "FOODON:03304488",
            "FOODON:03601071",
            "FOODON:00004512",
            "FOODON:00002553",
            "FOODON:03311459",
            "FOODON:00002207",
            "FOODON:00004506",
            "FOODON:00003355",
            "FOODON:00004721",
            "FOODON:00004104",
            "FOODON:00004510",
            "FOODON:00003605",
            "FOODON:00004507",
            "FOODON:00004511",
            "FOODON:03304487",
            "FOODON:00005500",
            "FOODON:00001056",
            "FOODON:00003353",
            "FOODON:00003317",
            "FOODON:00003342",
            "FOODON:03530140",
            "FOODON:03315176",
            "FOODON:03530143",
            "FOODON:00002140",
            "FOODON:03530138",
            "FOODON:03301120",
            "FOODON:03309292",
            "FOODON:03304022",
            "FOODON:03305224",
            "FOODON:03411634",
            "FOODON:03412030",
            "FOODON:03412421",
            "FOODON:03530142",
            "FOODON:03317665",
            "FOODON:03412043",
            "FOODON:03315289",
            "FOODON:03303387",
            "FOODON:03414361",
            "FOODON:03411446"
        ]
    },
    {
        "query": "LEMON",
        "chosen_curie": "FOODON:00003320",
        "true_curies": [
            "FOODON:00002732",
            "FOODON:03301189",
            "FOODON:00003042",
            "FOODON:03301441",
            "NCBITaxon:2708"
        ],
        "explanation": "While FOODON:03315104 ('lemon') is a good match, FOODON:00003320 ('lemon (whole or pieces)') is more specific and encompasses the various ways a lemon might be used or presented.  Other options refer to parts of the lemon (peel, juice), related plants, or processed products derived from the lemon.",
        "candidates_provided": [
            "FOODON:03315104",
            "FOODON:00005229",
            "FOODON:03414998",
            "FOODON:03301441",
            "FOODON:03412273",
            "FOODON:03412953",
            "FOODON:00005464",
            "FOODON:00003726",
            "FOODON:03414340",
            "FOODON:00004664",
            "FOODON:00003320",
            "FOODON:03411275",
            "FOODON:00005519",
            "FOODON:00003725",
            "FOODON:00003340",
            "FOODON:03401589",
            "FOODON:03401588",
            "FOODON:03544419",
            "FOODON:03543740",
            "FOODON:03543185",
            "FOODON:03307082",
            "FOODON:03306076",
            "FOODON:03302398",
            "FOODON:03306143",
            "FOODON:03303620",
            "FOODON:03316381",
            "FOODON:00001995",
            "FOODON:03305428",
            "FOODON:03305882",
            "FOODON:03305154",
            "FOODON:03412647",
            "FOODON:03307072",
            "FOODON:03301617",
            "FOODON:03301067",
            "FOODON:03306023",
            "FOODON:03302166",
            "FOODON:03302386",
            "FOODON:03305429",
            "FOODON:03301630"
        ]
    },
    {
        "query": "CHOPPED",
        "chosen_curie": "FOODON:00002777",
        "true_curies": [
            "FOODON:03430125",
            "PATO:0000320"
        ],
        "explanation": "While many terms describe chopped specific food items, FOODON:00002777, 'food (chopped)', is the most general and appropriate term encompassing the broad concept of 'CHOPPED'.  Other options are too specific (e.g., chopped liver, chopped meat) unless further context is given.",
        "candidates_provided": [
            "FOODON:00004279",
            "FOODON:00002777",
            "FOODON:00004119",
            "FOODON:03301881",
            "FOODON:03430125",
            "FOODON:03317335",
            "FOODON:03316399",
            "FOODON:03301880",
            "FOODON:03316397",
            "FOODON:03306437",
            "FOODON:03307082",
            "FOODON:03311056",
            "FOODON:00005592",
            "FOODON:00004696",
            "FOODON:03307353",
            "FOODON:03311272",
            "FOODON:03306490",
            "FOODON:03305812",
            "FOODON:03311688",
            "FOODON:03311083",
            "FOODON:03430145",
            "FOODON:03430137",
            "FOODON:03430115",
            "FOODON:03430124",
            "FOODON:03430111",
            "FOODON:03430141",
            "FOODON:03430107",
            "FOODON:03530106",
            "FOODON:03530040",
            "FOODON:03530104",
            "FOODON:03530105",
            "FOODON:03530252",
            "FOODON:03530047",
            "FOODON:03530048",
            "FOODON:03430122",
            "FOODON:03304169",
            "FOODON:03430136",
            "FOODON:03530139",
            "FOODON:03413958"
        ]
    },
    {
        "query": "CHOPPED",
        "chosen_curie": "FOODON:00002777",
        "true_curies": [
            "FOODON:03430125",
            "PATO:0000320",
            "FOODON:00003697"
        ],
        "explanation": "While many terms describe chopped food items, FOODON:00002777, 'food (chopped)', is the most general and appropriate term.  It encompasses the action of chopping applied to a wide variety of food materials, unlike the more specific terms which refer to particular food items like 'meat (chopped)' or 'liver (chopped)'.",
        "candidates_provided": [
            "FOODON:00004279",
            "FOODON:00002777",
            "FOODON:00004119",
            "FOODON:03301881",
            "FOODON:03430125",
            "FOODON:03317335",
            "FOODON:03316399",
            "FOODON:03301880",
            "FOODON:03316397",
            "FOODON:03306437",
            "FOODON:03307082",
            "FOODON:03311056",
            "FOODON:00005592",
            "FOODON:00004696",
            "FOODON:03307353",
            "FOODON:03311272",
            "FOODON:03306490",
            "FOODON:03305812",
            "FOODON:03311688",
            "FOODON:03311083",
            "FOODON:03430145",
            "FOODON:03430137",
            "FOODON:03430115",
            "FOODON:03430124",
            "FOODON:03430111",
            "FOODON:03430141",
            "FOODON:03430107",
            "FOODON:03530106",
            "FOODON:03530040",
            "FOODON:03530104",
            "FOODON:03530105",
            "FOODON:03530252",
            "FOODON:03530047",
            "FOODON:03530048",
            "FOODON:03430122",
            "FOODON:03304169",
            "FOODON:03430136",
            "FOODON:03530139",
            "FOODON:03413958"
        ]
    },
    {
        "query": "CHOPPED",
        "chosen_curie": "FOODON:00002777",
        "true_curies": [
            "FOODON:03430125",
            "NCBITaxon:4679",
            "PATO:0000320",
            "FOODON:03301704"
        ],
        "explanation": "FOODON:00002777 ('food (chopped)') is the most appropriate term because it is a general term encompassing various types of chopped food. While other options describe specific chopped ingredients (e.g., meat, liver, garlic), 'chopped' itself is not specific to any one food and 'food (chopped)' directly reflects that.",
        "candidates_provided": [
            "FOODON:00004279",
            "FOODON:00002777",
            "FOODON:00004119",
            "FOODON:03301881",
            "FOODON:03430125",
            "FOODON:03317335",
            "FOODON:03316399",
            "FOODON:03301880",
            "FOODON:03316397",
            "FOODON:03306437",
            "FOODON:03307082",
            "FOODON:03311056",
            "FOODON:00005592",
            "FOODON:00004696",
            "FOODON:03307353",
            "FOODON:03311272",
            "FOODON:03306490",
            "FOODON:03305812",
            "FOODON:03311688",
            "FOODON:03311083",
            "FOODON:03430145",
            "FOODON:03430137",
            "FOODON:03430115",
            "FOODON:03430124",
            "FOODON:03430111",
            "FOODON:03430141",
            "FOODON:03430107",
            "FOODON:03530106",
            "FOODON:03530040",
            "FOODON:03530104",
            "FOODON:03530105",
            "FOODON:03530252",
            "FOODON:03530047",
            "FOODON:03530048",
            "FOODON:03430122",
            "FOODON:03304169",
            "FOODON:03430136",
            "FOODON:03530139",
            "FOODON:03413958"
        ]
    },
    {
        "query": "SALMON",
        "chosen_curie": "FOODON:02022071",
        "true_curies": [
            "FOODON:00003342",
            "FOODON:00003473"
        ],
        "explanation": "While 'salmon' (FOODON:00003473) is a good match, it's too general.  Many terms specify 'atlantic salmon', but FOODON:02022071, 'atlantic salmon carcass (raw)', is preferable in the absence of further information, as it is a more specific and complete description.  The user's entity could refer to the whole animal, which this ID explicitly covers. The 'raw' specification is a bonus detail that enhances the specificity, but 'raw' is not crucial enough to select, for example, FOODON:00002075 over FOODON:02022071",
        "candidates_provided": [
            "FOODON:02021854",
            "FOODON:02022075",
            "FOODON:02021852",
            "FOODON:02022073",
            "FOODON:02022070",
            "FOODON:02021849",
            "FOODON:02022071",
            "FOODON:02021850",
            "FOODON:00002883",
            "FOODON:02022067",
            "FOODON:02021848",
            "FOODON:02022069",
            "FOODON:02022072",
            "FOODON:02021851",
            "FOODON:02021847",
            "FOODON:02022068",
            "FOODON:03307996",
            "FOODON:02021856",
            "FOODON:02022077",
            "FOODON:02021855",
            "FOODON:00003473",
            "NCBITaxon:8028",
            "FOODON:00002220",
            "FOODON:03411258",
            "FOODON:00004178",
            "FOODON:03411126",
            "FOODON:03411592",
            "FOODON:03309273",
            "FOODON:00001249",
            "FOODON:03309296",
            "FOODON:03315936",
            "FOODON:03411128",
            "FOODON:03309109",
            "FOODON:03308212",
            "FOODON:03411115",
            "FOODON:03411117",
            "FOODON:03411132",
            "FOODON:03308559",
            "FOODON:00002075",
            "FOODON:03309631"
        ]
    },
    {
        "query": "CHOPPED",
        "chosen_curie": "FOODON:00002777",
        "true_curies": [
            "NCBITaxon:40922",
            "FOODON:03430125",
            "FOODON:00001811"
        ],
        "explanation": "While many terms describe chopped food items, FOODON:00002777, 'food (chopped)', is the most general and appropriate term.  It encompasses the broad concept of chopping food without specifying a particular ingredient. Other options are more specific, relating to particular foods (e.g., meat, liver, garlic), thus making 'food (chopped)' the best overarching term for the entity 'CHOPPED'.",
        "candidates_provided": [
            "FOODON:00004279",
            "FOODON:00002777",
            "FOODON:00004119",
            "FOODON:03301881",
            "FOODON:03430125",
            "FOODON:03317335",
            "FOODON:03316399",
            "FOODON:03301880",
            "FOODON:03316397",
            "FOODON:03306437",
            "FOODON:03307082",
            "FOODON:03311056",
            "FOODON:00005592",
            "FOODON:00004696",
            "FOODON:03307353",
            "FOODON:03311272",
            "FOODON:03306490",
            "FOODON:03305812",
            "FOODON:03311688",
            "FOODON:03311083",
            "FOODON:03430145",
            "FOODON:03430137",
            "FOODON:03430115",
            "FOODON:03430124",
            "FOODON:03430111",
            "FOODON:03430141",
            "FOODON:03430107",
            "FOODON:03530106",
            "FOODON:03530040",
            "FOODON:03530104",
            "FOODON:03530105",
            "FOODON:03530252",
            "FOODON:03530047",
            "FOODON:03530048",
            "FOODON:03430122",
            "FOODON:03304169",
            "FOODON:03430136",
            "FOODON:03530139",
            "FOODON:03413958"
        ]
    },
    {
        "query": "LIVER",
        "chosen_curie": "FOODON:02010079",
        "true_curies": [
            "UBERON:0002107",
            "FOODON:03309772"
        ],
        "explanation": "While FOODON:03309772 (liver (raw)) and FOODON:03000441 (liver powder supplement) are also relevant,  FOODON:02010079 (piece of animal liver) offers the best balance of specificity and generality. The user provided simply 'LIVER', which is a very general term.  This term covers a broad range of liver types without specifying the animal source or processing method. Other options are too specific (e.g., types of liver, liver preparations) or inappropriate (liver paste, liver oil).",
        "candidates_provided": [
            "FOODON:03309772",
            "FOODON:02021667",
            "FOODON:02020913",
            "FOODON:02020932",
            "FOODON:02021690",
            "FOODON:03301178",
            "FOODON:03302734",
            "FOODON:02020955",
            "FOODON:02021732",
            "FOODON:03000441",
            "FOODON:02020943",
            "FOODON:02021701",
            "FOODON:02020967",
            "FOODON:02021744",
            "FOODON:03420301",
            "FOODON:03000442",
            "FOODON:00005572",
            "FOODON:02021151",
            "FOODON:02021273",
            "FOODON:00004119",
            "FOODON:03317604",
            "FOODON:03310987",
            "FOODON:02010246",
            "FOODON:02010079",
            "FOODON:02010262",
            "UBERON:0034944",
            "FOODON:02010045",
            "FOODON:02010095",
            "FOODON:02010062",
            "UBERON:0002107",
            "FOODON:03303695",
            "FOODON:00001008",
            "FOODON:02021219",
            "FOODON:02021357",
            "FOODON:02022342"
        ]
    },
    {
        "query": "OYSTER SAUCE",
        "chosen_curie": "FOODON:03544112",
        "true_curies": [
            "NCBITaxon:94324",
            "NCBITaxon:29159",
            "FOODON:00004003",
            "NCBITaxon:37623",
            "NCBITaxon:6565",
            "NCBITaxon:558553",
            "FOODON:03317654",
            "FOODON:00004004",
            "NCBITaxon:102399",
            "FOODON:03311146",
            "NCBITaxon:74445",
            "NCBITaxon:74433",
            "FOODON:03411224",
            "NCBITaxon:36930",
            "NCBITaxon:627230"
        ],
        "explanation": "FOODON:03544112 ('oyster sauce') is the best match because its label exactly matches the user's entity and its definition explicitly describes oyster sauce as a food product made from oyster extracts.  Other 'oyster' terms refer to the shellfish itself or other sauces, not the specific sauce requested.",
        "candidates_provided": [
            "FOODON:03544112",
            "FOODON:02000379",
            "FOODON:02022511",
            "FOODON:00003259",
            "FOODON:02000380",
            "FOODON:02000386",
            "FOODON:02022512",
            "FOODON:00004929",
            "FOODON:02022510",
            "FOODON:03306786",
            "FOODON:02022513",
            "FOODON:00005379",
            "FOODON:00002526",
            "NCBITaxon:29159",
            "FOODON:00003232",
            "FOODON:03400863",
            "FOODON:00005513",
            "FOODON:00004930",
            "FOODON:00003522",
            "FOODON:03400862",
            "FOODON:03317654",
            "FOODON:03307060",
            "FOODON:03309671",
            "FOODON:03308680",
            "FOODON:03301703",
            "FOODON:03317008",
            "FOODON:00001292",
            "FOODON:03304198",
            "FOODON:03304240",
            "FOODON:03308309",
            "FOODON:03301835",
            "FOODON:03307403",
            "FOODON:03301834",
            "FOODON:03308159",
            "FOODON:03308694",
            "FOODON:03308147",
            "FOODON:03307391",
            "FOODON:03308755",
            "FOODON:03308155",
            "FOODON:03308021"
        ]
    },
    {
        "query": "TERIYAKI SAUCE",
        "chosen_curie": "FOODON:03544113",
        "true_curies": [
            "FOODON:03311146",
            "FOODON:03306566"
        ],
        "explanation": "FOODON:03544113 ('41130 - teriyaki sauce (efsa foodex2)') is the best match because its label explicitly mentions \"teriyaki sauce\" and its definition clearly states it includes any type of teriyaki sauce.  Other options, such as FOODON:00003912, refer to the cooking method, not the sauce itself.",
        "candidates_provided": [
            "FOODON:03544113",
            "FOODON:00003912",
            "FOODON:00003259",
            "FOODON:03306566",
            "FOODON:03306786",
            "FOODON:00002526",
            "FOODON:00003232",
            "FOODON:03400863",
            "FOODON:00005513",
            "FOODON:03400862",
            "FOODON:03400263",
            "FOODON:03304206",
            "FOODON:03304888",
            "FOODON:03480034",
            "FOODON:00003236",
            "FOODON:00004312",
            "FOODON:03544116",
            "FOODON:03400286",
            "FOODON:00003295",
            "FOODON:03544125",
            "FOODON:03309556",
            "FOODON:03315454",
            "FOODON:03304988",
            "FOODON:03311704",
            "FOODON:03301115",
            "FOODON:03304111",
            "FOODON:03309677",
            "FOODON:03301839",
            "FOODON:03306962",
            "FOODON:03307673",
            "FOODON:03309559",
            "FOODON:03316286",
            "FOODON:03311463",
            "FOODON:03315487",
            "FOODON:03317197",
            "FOODON:03310092",
            "FOODON:03311480"
        ]
    },
    {
        "query": "CHICKEN SKIN",
        "chosen_curie": "FOODON:02020321",
        "true_curies": [
            "FOODON:00002673",
            "FOODON:03411457",
            "NCBITaxon:9031"
        ],
        "explanation": "While several options mention chicken skin, FOODON:02020321, 'piece(s) of chicken skin', is the most appropriate because it directly addresses the user's entity without specifying the chicken part or whether it is raw.  Other options specifying parts of the chicken or 'raw' are too specific.  FOODON:00002673 ('piece of chicken skin') is a close second, but the plural form is more accurate since chicken skin generally comes in multiple pieces.",
        "candidates_provided": [
            "FOODON:00002673",
            "FOODON:00003330",
            "FOODON:02020243",
            "FOODON:02020172",
            "FOODON:02020233",
            "FOODON:02020239",
            "FOODON:02020247",
            "FOODON:02020321",
            "FOODON:03303009",
            "FOODON:02020277",
            "FOODON:02020248",
            "FOODON:02020281",
            "FOODON:02020230",
            "FOODON:02020234",
            "FOODON:02020267",
            "FOODON:02020209",
            "FOODON:02020240",
            "FOODON:02020273",
            "FOODON:02020244",
            "FOODON:02020174",
            "FOODON:02020330",
            "FOODON:02020306",
            "FOODON:02020309",
            "FOODON:02020210",
            "FOODON:00003332",
            "FOODON:02020301",
            "FOODON:02020307",
            "FOODON:02020302",
            "FOODON:03310628",
            "FOODON:03310822",
            "FOODON:00004237",
            "FOODON:02020173",
            "FOODON:03305356",
            "FOODON:03311101",
            "FOODON:02020207"
        ]
    },
    {
        "query": "CHOPPED",
        "chosen_curie": "FOODON:00002777",
        "true_curies": [
            "FOODON:03430125",
            "NCBITaxon:39352",
            "FOODON:03301482"
        ],
        "explanation": "While many terms include 'chopped' in their label, FOODON:00002777, 'food (chopped)', is the most general and appropriate term.  Other options specify a particular food item, while 'chopped' is a preparation method applicable to a wide range of foods.",
        "candidates_provided": [
            "FOODON:00004279",
            "FOODON:00002777",
            "FOODON:00004119",
            "FOODON:03301881",
            "FOODON:03430125",
            "FOODON:03317335",
            "FOODON:03316399",
            "FOODON:03301880",
            "FOODON:03316397",
            "FOODON:03306437",
            "FOODON:03307082",
            "FOODON:03311056",
            "FOODON:00005592",
            "FOODON:00004696",
            "FOODON:03307353",
            "FOODON:03311272",
            "FOODON:03306490",
            "FOODON:03305812",
            "FOODON:03311688",
            "FOODON:03311083",
            "FOODON:03430145",
            "FOODON:03430137",
            "FOODON:03430115",
            "FOODON:03430124",
            "FOODON:03430111",
            "FOODON:03430141",
            "FOODON:03430107",
            "FOODON:03530106",
            "FOODON:03530040",
            "FOODON:03530104",
            "FOODON:03530105",
            "FOODON:03530252",
            "FOODON:03530047",
            "FOODON:03530048",
            "FOODON:03430122",
            "FOODON:03304169",
            "FOODON:03430136",
            "FOODON:03530139",
            "FOODON:03413958"
        ]
    },
    {
        "query": "HALIBUT",
        "chosen_curie": "FOODON:03542333",
        "true_curies": [
            "NCBITaxon:8267",
            "NCBITaxon:195615",
            "FOODON:03411532"
        ],
        "explanation": "While several terms mention \"halibut\", FOODON:03542333 is the most comprehensive and accurate.  It encompasses all three main halibut species (Hippoglossus hippoglossus, Hippoglossus stenolepis, and Reinhardtius hippoglossoides) without specifying a preparation method or geographical origin, aligning best with the unspecific user input \"HALIBUT\".",
        "candidates_provided": [
            "FOODON:03542333",
            "FOODON:03542621",
            "FOODON:03542334",
            "FOODON:03542336",
            "FOODON:03542335",
            "FOODON:03309646",
            "FOODON:03411532",
            "FOODON:03309085",
            "FOODON:03305505",
            "FOODON:03308069",
            "FOODON:03309084",
            "FOODON:03411589",
            "FOODON:03411876",
            "FOODON:03308060",
            "FOODON:03309083",
            "FOODON:03305460",
            "FOODON:03309097",
            "FOODON:03309096",
            "FOODON:03304230",
            "FOODON:03411882",
            "FOODON:03411910",
            "FOODON:03413894",
            "FOODON:03414877",
            "obo:AfPO_0000084",
            "CHEBI:18140",
            "CHEBI:192501",
            "obo:AfPO_0000214",
            "FOODON:03414850",
            "FOODON:03412421",
            "FOODON:03411838",
            "FOODON:03412237",
            "CHEBI:24583",
            "FOODON:03414851",
            "FOODON:03414885",
            "FOODON:03414056",
            "FOODON:03317415",
            "obo:AfPO_0000123"
        ]
    },
    {
        "query": "TEQUILA",
        "chosen_curie": "FOODON:03543381",
        "true_curies": [
            "FOODON:03305086",
            "FOODON:00003661",
            "FOODON:03304704"
        ],
        "explanation": "FOODON:03543381 ('tequila and similar spirits') is the most appropriate term because it explicitly includes tequila in its label and definition, providing a more specific and accurate representation than other broader terms like 'alcoholic beverage' or 'fruit based distilled spirit'.",
        "candidates_provided": [
            "FOODON:03543381",
            "FOODON:03544393",
            "FOODON:03304704",
            "FOODON:03411535",
            "FOODON:00001882",
            "FOODON:03317463",
            "FOODON:03305159",
            "FOODON:03301633",
            "FOODON:03317462",
            "FOODON:03303646",
            "FOODON:03317560",
            "FOODON:03310477",
            "FOODON:03307300",
            "FOODON:03310674",
            "FOODON:03530170",
            "FOODON:03307283",
            "FOODON:00001580",
            "FOODON:00001883",
            "FOODON:03317365",
            "FOODON:03530166",
            "FOODON:03316527",
            "FOODON:03530171",
            "FOODON:03302432"
        ]
    },
    {
        "query": "DICED",
        "chosen_curie": "FOODON:03430117",
        "true_curies": [
            "FOODON:00002502",
            "FOODON:03430115"
        ],
        "explanation": "While FOODON:00004549 'food (diced)' is a tempting choice, it's too general.  FOODON:03430115 'divided into pieces, thickness 0.3-1.5 cm.' uses 'diced' as a synonym, making it a better fit than the overly general option. However,  'divided into pieces' is too vague. FOODON:03430117 'medium ground' provides more specificity than other options regarding the size of the pieces and has similar meaning as diced. Therefore, FOODON:03430117 is the most appropriate choice among the provided options.",
        "candidates_provided": [
            "FOODON:00004549",
            "FOODON:03303374",
            "FOODON:03310846",
            "FOODON:03304885",
            "FOODON:03307350",
            "FOODON:03315074",
            "FOODON:03430115",
            "FOODON:03308714",
            "FOODON:03317505",
            "FOODON:03401668",
            "FOODON:03401665",
            "FOODON:03401660",
            "FOODON:03401683",
            "FOODON:03401661",
            "FOODON:03401666",
            "FOODON:03401679",
            "FOODON:03401542",
            "FOODON:03401685",
            "FOODON:03401674",
            "FOODON:03401663",
            "FOODON:03413821",
            "FOODON:03317415",
            "FOODON:03430106",
            "FOODON:03430122",
            "FOODON:03430136",
            "FOODON:03440014",
            "FOODON:03310752",
            "FOODON:03301404",
            "FOODON:03460154",
            "FOODON:00003342",
            "FOODON:03413958",
            "FOODON:00005241",
            "FOODON:03411860",
            "FOODON:03301247",
            "FOODON:03460188",
            "FOODON:03310889",
            "FOODON:03412411",
            "FOODON:03414615",
            "FOODON:03430117",
            "FOODON:03315686"
        ]
    },
    {
        "query": "STEAMED",
        "chosen_curie": "FOODON:03450023",
        "true_curies": [
            "NCBITaxon:4071",
            "FOODON:00002657"
        ],
        "explanation": "While several terms describe foods that are steamed, FOODON:03450023, 'steaming without pressure', is the most appropriate as it describes the cooking *method* directly, rather than specific food items that may be prepared using that method.  Other options mention steaming as a characteristic of a specific food, but 'steaming without pressure' most accurately reflects the provided user entity, 'STEAMED'.",
        "candidates_provided": [
            "FOODON:00002657",
            "FOODON:03308047",
            "FOODON:03307615",
            "FOODON:03304585",
            "FOODON:03311814",
            "FOODON:03310885",
            "FOODON:03310902",
            "FOODON:03307023",
            "FOODON:03601051",
            "FOODON:03414724",
            "FOODON:00005532",
            "FOODON:00002809",
            "FOODON:00003884",
            "FOODON:00001310",
            "FOODON:03450043",
            "FOODON:00002394",
            "FOODON:03307110",
            "FOODON:03415088",
            "FOODON:03304758",
            "FOODON:03540196",
            "FOODON:03440014",
            "FOODON:03450021",
            "FOODON:03450023",
            "FOODON:03440018",
            "FOODON:03440022",
            "FOODON:00004091",
            "FOODON:03450022",
            "FOODON:03450039",
            "FOODON:03440023",
            "FOODON:03450041",
            "FOODON:03450031",
            "FOODON:03440003",
            "FOODON:03450012",
            "FOODON:03450017",
            "FOODON:03470158",
            "FOODON:03470159",
            "FOODON:00005152",
            "FOODON:03450040",
            "FOODON:03470135",
            "FOODON:03450018"
        ]
    },
    {
        "query": "TENDERLOIN",
        "chosen_curie": "FOODON:00003302",
        "true_curies": [
            "FOODON:03530217"
        ],
        "explanation": "While several options mention \"tenderloin,\" FOODON:00003302, \"beef tenderloin,\" is the most appropriate because it's the most general and encompasses the various cuts and preparations (roast, steak, raw, etc.) listed for other beef tenderloin entries.  It avoids unnecessary specificity and accurately reflects the user's likely intent which is likely to encompass multiple beef tenderloin preparations.",
        "candidates_provided": [
            "FOODON:02000141",
            "FOODON:02000402",
            "FOODON:02000434",
            "FOODON:02000306",
            "FOODON:02000280",
            "FOODON:00005430",
            "FOODON:02000143",
            "FOODON:03309967",
            "FOODON:02000144",
            "FOODON:02000142",
            "FOODON:02000137",
            "FOODON:02000140",
            "FOODON:02000136",
            "FOODON:02000138",
            "FOODON:02000279",
            "FOODON:03530217",
            "FOODON:00005423",
            "FOODON:02000433",
            "FOODON:00005429",
            "FOODON:00003302",
            "FOODON:03411906",
            "FOODON:03414009",
            "FOODON:03412276",
            "FOODON:03412654",
            "obo:chebi#is_tautomer_of",
            "FOODON:03412387",
            "FOODON:03530142",
            "FOODON:03411384",
            "FOODON:03415149",
            "FOODON:03414361",
            "FOODON:03412369",
            "FOODON:03315108",
            "FOODON:03411903",
            "FOODON:03414049",
            "FOODON:00003342",
            "FOODON:03412144",
            "FOODON:03301120",
            "FOODON:03411978",
            "FOODON:03530138"
        ]
    },
    {
        "query": "WILD RICE",
        "chosen_curie": "FOODON:03301754",
        "true_curies": [
            "FOODON:03301641",
            "NCBITaxon:15949",
            "NCBITaxon:4530"
        ],
        "explanation": "While several terms relate to rice, FOODON:03301754, 'wild rice food product', is the most appropriate because it directly addresses the user's entity, 'WILD RICE', as a food product.  Other options, such as 'wild rice kernel' are too specific (referring to a part of the plant), while 'wild rice plant' is too general (referring to the plant itself, not the food).",
        "candidates_provided": [
            "FOODON:03000252",
            "FOODON:03000253",
            "FOODON:03301641",
            "FOODON:00004286",
            "FOODON:03411375",
            "FOODON:03311875",
            "FOODON:00002881",
            "FOODON:00002910",
            "FOODON:03411322",
            "FOODON:02021638",
            "FOODON:02021644",
            "FOODON:00002849",
            "FOODON:00004676",
            "FOODON:02021639",
            "FOODON:02021646",
            "FOODON:00003438",
            "FOODON:00002867",
            "FOODON:00004720",
            "FOODON:03400814",
            "FOODON:00004327",
            "FOODON:03301754",
            "FOODON:03311295",
            "FOODON:00004326",
            "FOODON:03311121",
            "FOODON:03305184",
            "FOODON:00004320",
            "FOODON:03306909",
            "FOODON:03302745",
            "FOODON:03307152",
            "FOODON:03307146",
            "FOODON:03310654",
            "FOODON:03304555",
            "FOODON:03307150",
            "FOODON:03304556",
            "FOODON:03304585",
            "FOODON:03304549",
            "FOODON:03304560",
            "FOODON:03312030"
        ]
    },
    {
        "query": "LEMON",
        "chosen_curie": "FOODON:00003320",
        "true_curies": [
            "NCBITaxon:65558",
            "FOODON:03311146",
            "FOODON:03301441",
            "NCBITaxon:2708",
            "FOODON:00001681"
        ],
        "explanation": "While several terms mention 'lemon', FOODON:00003320, 'lemon (whole or pieces)', is the most comprehensive and appropriate. It encompasses various forms of the fruit suitable for eating or processing, making it a more accurate representation than the overly general 'lemon' or other specific forms like 'lemon juice' or 'lemon peel'.",
        "candidates_provided": [
            "FOODON:03315104",
            "FOODON:00005229",
            "FOODON:03414998",
            "FOODON:03301441",
            "FOODON:03412273",
            "FOODON:03412953",
            "FOODON:00005464",
            "FOODON:00003726",
            "FOODON:03414340",
            "FOODON:00004664",
            "FOODON:00003320",
            "FOODON:03411275",
            "FOODON:00005519",
            "FOODON:00003725",
            "FOODON:00003340",
            "FOODON:03401589",
            "FOODON:03401588",
            "FOODON:03544419",
            "FOODON:03543740",
            "FOODON:03543185",
            "FOODON:03307082",
            "FOODON:03306076",
            "FOODON:03302398",
            "FOODON:03306143",
            "FOODON:03303620",
            "FOODON:03316381",
            "FOODON:00001995",
            "FOODON:03305428",
            "FOODON:03305882",
            "FOODON:03305154",
            "FOODON:03412647",
            "FOODON:03307072",
            "FOODON:03301617",
            "FOODON:03301067",
            "FOODON:03306023",
            "FOODON:03302166",
            "FOODON:03302386",
            "FOODON:03305429",
            "FOODON:03301630"
        ]
    },
    {
        "query": "CHOPPED",
        "chosen_curie": "FOODON:00002777",
        "true_curies": [
            "NCBITaxon:29780",
            "FOODON:00003538",
            "FOODON:03430125",
            "FOODON:03301813"
        ],
        "explanation": "FOODON:00002777 ('food (chopped)') is the most appropriate term because it is the most general and encompasses all other specific examples. While other options specify the type of food that is chopped, the user entity simply states 'CHOPPED', which is a preparation method, not a specific food item.",
        "candidates_provided": [
            "FOODON:00004279",
            "FOODON:00002777",
            "FOODON:00004119",
            "FOODON:03301881",
            "FOODON:03430125",
            "FOODON:03317335",
            "FOODON:03316399",
            "FOODON:03301880",
            "FOODON:03316397",
            "FOODON:03306437",
            "FOODON:03307082",
            "FOODON:03311056",
            "FOODON:00005592",
            "FOODON:00004696",
            "FOODON:03307353",
            "FOODON:03311272",
            "FOODON:03306490",
            "FOODON:03305812",
            "FOODON:03311688",
            "FOODON:03311083",
            "FOODON:03430145",
            "FOODON:03430137",
            "FOODON:03430115",
            "FOODON:03430124",
            "FOODON:03430111",
            "FOODON:03430141",
            "FOODON:03430107",
            "FOODON:03530106",
            "FOODON:03530040",
            "FOODON:03530104",
            "FOODON:03530105",
            "FOODON:03530252",
            "FOODON:03530047",
            "FOODON:03530048",
            "FOODON:03430122",
            "FOODON:03304169",
            "FOODON:03430136",
            "FOODON:03530139",
            "FOODON:03413958"
        ]
    },
    {
        "query": "KIDNEY",
        "chosen_curie": "FOODON:02010044",
        "true_curies": [
            "UBERON:0002113",
            "FOODON:03310898"
        ],
        "explanation": "While several options mention 'kidney',  FOODON:02010044, 'animal kidney', is the most appropriate because it encompasses all types of animal kidneys without specifying a particular species.  The user query 'KIDNEY' is a broad term, and the general term is the best fit compared to species-specific options. More specific terms would be preferable if the user's intent was to specify a species, but there is no such specification here.",
        "candidates_provided": [
            "FOODON:03310898",
            "FOODON:02021666",
            "FOODON:02020912",
            "FOODON:03309779",
            "FOODON:03311506",
            "FOODON:02020931",
            "FOODON:02021678",
            "FOODON:03310590",
            "FOODON:02020954",
            "FOODON:02021731",
            "FOODON:03309415",
            "FOODON:02020942",
            "FOODON:02021700",
            "FOODON:02021743",
            "FOODON:02020966",
            "FOODON:00002761",
            "FOODON:02021272",
            "FOODON:02010044",
            "FOODON:02020439",
            "FOODON:02021150",
            "FOODON:03301880",
            "UBERON:0002113",
            "FOODON:02010245",
            "FOODON:02010078",
            "FOODON:00002821",
            "UBERON:0034944",
            "FOODON:02010261",
            "UBERON:0013522",
            "FOODON:02010094",
            "FOODON:02010061",
            "FOODON:03317130",
            "FOODON:02020192",
            "FOODON:02020324",
            "FOODON:03420145",
            "FOODON:02020591",
            "FOODON:02020452",
            "FOODON:03414605"
        ]
    },
    {
        "query": "FLOUR",
        "chosen_curie": "FOODON:00004512",
        "true_curies": [
            "FOODON:03303012",
            "FOODON:03301116",
            "FOODON:00002703",
            "NCBITaxon:9031",
            "FOODON:03411457"
        ],
        "explanation": "While FOODON:00004510 'flour' is a more general term, FOODON:00004512 '00 white wheat flour' provides a specific type of flour.  The user entity 'FLOUR' is ambiguous and requires a specific example which this ID provides. Other specific flour types are equally valid if the user intended a different type of flour, but without further details, a specific example is preferable to a general term.",
        "candidates_provided": [
            "FOODON:03302142",
            "FOODON:03304488",
            "FOODON:03601071",
            "FOODON:00004512",
            "FOODON:00002553",
            "FOODON:03311459",
            "FOODON:00002207",
            "FOODON:00004506",
            "FOODON:00003355",
            "FOODON:00004721",
            "FOODON:00004104",
            "FOODON:00004510",
            "FOODON:00003605",
            "FOODON:00004507",
            "FOODON:00004511",
            "FOODON:03304487",
            "FOODON:00005500",
            "FOODON:00001056",
            "FOODON:00003353",
            "FOODON:00003317",
            "FOODON:00003342",
            "FOODON:03530140",
            "FOODON:03315176",
            "FOODON:03530143",
            "FOODON:00002140",
            "FOODON:03530138",
            "FOODON:03301120",
            "FOODON:03309292",
            "FOODON:03304022",
            "FOODON:03305224",
            "FOODON:03411634",
            "FOODON:03412030",
            "FOODON:03412421",
            "FOODON:03530142",
            "FOODON:03317665",
            "FOODON:03412043",
            "FOODON:03315289",
            "FOODON:03303387",
            "FOODON:03414361",
            "FOODON:03411446"
        ]
    },
    {
        "query": "MUSHROOM",
        "chosen_curie": "FOODON:00005329",
        "true_curies": [
            "NCIT:C45305",
            "obo:FAO_0000012",
            "FOODON:00003528",
            "FOODON:03301303",
            "CHEBI:60004"
        ],
        "explanation": "While many terms mention 'mushroom', FOODON:00005329, 'piece(s) of mushroom fruitbody', is the most appropriate because it is the most general and encompasses all types of mushrooms, including raw, cooked, and processed forms.  Other specific mushroom types are too narrow, and general terms like 'mushroom fruitbody' lack the specificity needed.",
        "candidates_provided": [
            "FOODON:00003462",
            "FOODON:00003464",
            "FOODON:00003463",
            "FOODON:03413452",
            "FOODON:00004258",
            "FOODON:00004254",
            "FOODON:00004255",
            "FOODON:00004257",
            "FOODON:00005332",
            "FOODON:00003465",
            "FOODON:03306536",
            "FOODON:00004929",
            "FOODON:00005329",
            "FOODON:00005334",
            "FOODON:00004709",
            "FOODON:00004930",
            "FOODON:03301303",
            "FOODON:03543957",
            "FOODON:00003528",
            "FOODON:03310082",
            "FOODON:00001287",
            "FOODON:03412937",
            "FOODON:03310677",
            "FOODON:00002050",
            "FOODON:03316179",
            "FOODON:03309555",
            "FOODON:03316904",
            "FOODON:03309654",
            "FOODON:03308510",
            "FOODON:00004253",
            "FOODON:03414174",
            "FOODON:03306535",
            "FOODON:03306490",
            "FOODON:03412521",
            "FOODON:03304727",
            "FOODON:03315123",
            "FOODON:03306538",
            "FOODON:03311148",
            "FOODON:03304472"
        ]
    },
    {
        "query": "PORK",
        "chosen_curie": "FOODON:02021710",
        "true_curies": [
            "FOODON:03530217",
            "FOODON:00001038"
        ],
        "explanation": "While several terms mention 'pork', FOODON:02021710, 'piece of pork meat (raw)', offers the best balance of specificity and generality.  It's not too narrow (like 'pork chop' or 'pork sirloin'), and it's less vague than the unspecific 'pork' terms with no further detail about preparation or cut.  It is also preferred over the plural form because the user only used the singular 'PORK'.",
        "candidates_provided": [
            "FOODON:00004095",
            "FOODON:02021688",
            "FOODON:02021709",
            "FOODON:02021757",
            "FOODON:02021713",
            "FOODON:02021676",
            "FOODON:02000326",
            "FOODON:02000302",
            "FOODON:02000330",
            "FOODON:00002729",
            "FOODON:00003848",
            "FOODON:02000338",
            "FOODON:00004490",
            "FOODON:02021698",
            "FOODON:02021710",
            "FOODON:02021795",
            "FOODON:00004527",
            "FOODON:00005510",
            "FOODON:02021664",
            "FOODON:00005450",
            "FOODON:03302735",
            "FOODON:03311610",
            "FOODON:03310804",
            "FOODON:03317324",
            "FOODON:03311587",
            "FOODON:03306416",
            "FOODON:03310575",
            "FOODON:03310801",
            "FOODON:03311005",
            "FOODON:03317316",
            "FOODON:03317377",
            "FOODON:03306445",
            "FOODON:03311467",
            "FOODON:03317263",
            "FOODON:03309969",
            "FOODON:03310623",
            "FOODON:00001077",
            "FOODON:02021714",
            "FOODON:02021715"
        ]
    },
    {
        "query": "LOIN",
        "chosen_curie": "FOODON:02000277",
        "true_curies": [
            "FOODON:03530031"
        ],
        "explanation": "While several options refer to specific animal loins (beef, lamb, pork, etc.), FOODON:02000277, 'lamb loin', provides the most general and accurate representation of 'loin' without specifying the animal source.  The definition also accurately describes the anatomical location of the loin cut.",
        "candidates_provided": [
            "FOODON:02000353",
            "FOODON:02000278",
            "FOODON:02000117",
            "FOODON:00005399",
            "FOODON:02000289",
            "FOODON:00005400",
            "FOODON:02000292",
            "FOODON:02000290",
            "FOODON:00005406",
            "FOODON:02000315",
            "FOODON:00005420",
            "FOODON:02000119",
            "FOODON:00005398",
            "FOODON:02000277",
            "FOODON:02000124",
            "FOODON:02000316",
            "FOODON:02000293",
            "FOODON:02000291",
            "FOODON:02000122",
            "FOODON:02000296",
            "FOODON:03412144",
            "FOODON:00003342",
            "FOODON:03411384",
            "FOODON:03414280",
            "FOODON:03413370",
            "FOODON:03412292",
            "FOODON:03412654",
            "FOODON:03411906",
            "FOODON:03411880",
            "FOODON:03411745",
            "FOODON:03412302",
            "FOODON:03411628",
            "FOODON:03413478",
            "FOODON:03414121",
            "FOODON:03411903",
            "FOODON:03412647",
            "FOODON:03414615",
            "FOODON:03412276",
            "FOODON:03301120",
            "FOODON:03412369"
        ]
    },
    {
        "query": "CHOPPED",
        "chosen_curie": "FOODON:00002777",
        "true_curies": [
            "FOODON:03430125",
            "FOODON:00003013",
            "FOODON:03309928",
            "FOODON:00003520",
            "FOODON:00001649"
        ],
        "explanation": "FOODON:00002777 ('food (chopped)') is the most appropriate term because it is the most general and encompasses all the other options.  While other options mention specific chopped foods, 'chopped' by itself is not specific enough to warrant choosing a more specialized term. The term 'food (chopped)' accurately reflects the user's input of simply 'CHOPPED'.",
        "candidates_provided": [
            "FOODON:00004279",
            "FOODON:00002777",
            "FOODON:00004119",
            "FOODON:03301881",
            "FOODON:03430125",
            "FOODON:03317335",
            "FOODON:03316399",
            "FOODON:03301880",
            "FOODON:03316397",
            "FOODON:03306437",
            "FOODON:03307082",
            "FOODON:03311056",
            "FOODON:00005592",
            "FOODON:00004696",
            "FOODON:03307353",
            "FOODON:03311272",
            "FOODON:03306490",
            "FOODON:03305812",
            "FOODON:03311688",
            "FOODON:03311083",
            "FOODON:03430145",
            "FOODON:03430137",
            "FOODON:03430115",
            "FOODON:03430124",
            "FOODON:03430111",
            "FOODON:03430141",
            "FOODON:03430107",
            "FOODON:03530106",
            "FOODON:03530040",
            "FOODON:03530104",
            "FOODON:03530105",
            "FOODON:03530252",
            "FOODON:03530047",
            "FOODON:03530048",
            "FOODON:03430122",
            "FOODON:03304169",
            "FOODON:03430136",
            "FOODON:03530139",
            "FOODON:03413958"
        ]
    },
    {
        "query": "APRICOT JAM",
        "chosen_curie": "FOODON:03541816",
        "true_curies": [
            "FOODON:00003476",
            "NCBITaxon:36596",
            "FOODON:03301701",
            "FOODON:03305781",
            "FOODON:03309973"
        ],
        "explanation": "While FOODON:03305781 has the exact label 'apricot jam', its definition is missing. FOODON:03541816 ('18160 - jam, apricots (efsa foodex2)') provides a definition and specifies that it includes any type of jam obtained from apricots, making it a more informative and complete match.",
        "candidates_provided": [
            "FOODON:03301701",
            "FOODON:00003219",
            "FOODON:00003476",
            "FOODON:03305781",
            "FOODON:03305877",
            "FOODON:03307189",
            "FOODON:03412791",
            "FOODON:03543196",
            "FOODON:03543174",
            "FOODON:03541812",
            "FOODON:03541806",
            "FOODON:03541822",
            "FOODON:03541807",
            "FOODON:03541817",
            "FOODON:03541816",
            "FOODON:03541813",
            "FOODON:03541818",
            "FOODON:03541814",
            "FOODON:03541821",
            "FOODON:03541808",
            "FOODON:03306398",
            "FOODON:03316063",
            "FOODON:03301108",
            "FOODON:03305972",
            "FOODON:03307117",
            "FOODON:03309973",
            "FOODON:03311886",
            "FOODON:03304853",
            "FOODON:03315981",
            "FOODON:00001616",
            "FOODON:03315672",
            "FOODON:03305967",
            "FOODON:03306384",
            "FOODON:03306399",
            "FOODON:03301287",
            "FOODON:03316417",
            "FOODON:03301295"
        ]
    },
    {
        "query": "BUTTER",
        "chosen_curie": "FOODON:03543148",
        "true_curies": [
            "FOODON:03310351",
            "FOODON:03301672"
        ],
        "explanation": "While several terms relate to butter, FOODON:03543148 ('31480 - butter (efsa foodex2)') provides the most comprehensive definition encompassing various forms of butter obtained from dairy cream.  Other options are more specific types of butter or products containing butter, making this the most suitable general term for 'BUTTER'.",
        "candidates_provided": [
            "FOODON:03302641",
            "FOODON:00003854",
            "FOODON:03400809",
            "FOODON:03000476",
            "FOODON:00005495",
            "FOODON:00004525",
            "FOODON:00003326",
            "FOODON:00004421",
            "FOODON:03307957",
            "FOODON:03000295",
            "FOODON:00005582",
            "FOODON:00003223",
            "FOODON:03307958",
            "FOODON:03543148",
            "FOODON:03543117",
            "FOODON:03400294",
            "FOODON:03543140",
            "FOODON:03544103",
            "FOODON:03540239",
            "FOODON:03543118",
            "FOODON:03302449",
            "FOODON:03304469",
            "FOODON:03303711",
            "FOODON:03302532",
            "FOODON:03306205",
            "FOODON:03307026",
            "FOODON:03302522",
            "FOODON:03316334",
            "FOODON:03302542",
            "FOODON:00001673",
            "FOODON:03302536",
            "FOODON:03310351",
            "FOODON:03306210",
            "FOODON:03302523",
            "FOODON:03311219",
            "FOODON:03302625",
            "FOODON:03302516",
            "FOODON:03315520",
            "FOODON:03302605",
            "FOODON:03303155"
        ]
    },
    {
        "query": "TILAPIA",
        "chosen_curie": "FOODON:03542240",
        "true_curies": [
            "NCBITaxon:8128",
            "FOODON:03412434",
            "NCBITaxon:8126",
            "NCBITaxon:47969"
        ],
        "explanation": "While several options mention \"tilapia\", FOODON:03542240 specifically identifies \"nile tilapia\", aligning with the common understanding of \"tilapia\" as a food.  Other options are either more specific cuts or preparations (requiring additional information), or refer to other tilapia species. This option is a suitable general term encompassing various forms of Nile Tilapia.",
        "candidates_provided": [
            "FOODON:02021841",
            "FOODON:02021839",
            "FOODON:02021836",
            "FOODON:02021837",
            "FOODON:02022066",
            "FOODON:02021835",
            "FOODON:02021838",
            "FOODON:02021834",
            "FOODON:02021843",
            "FOODON:02021842",
            "FOODON:02021845",
            "FOODON:02021844",
            "FOODON:02021846",
            "FOODON:02021840",
            "FOODON:03542241",
            "FOODON:03542239",
            "FOODON:03542240",
            "NCBITaxon:8126",
            "FOODON:03412434",
            "FOODON:03309384",
            "FOODON:03309216",
            "FOODON:03411834",
            "FOODON:03411833",
            "FOODON:03411832",
            "FOODON:03411923",
            "FOODON:03310037",
            "FOODON:00001249",
            "FOODON:03411846",
            "FOODON:00001581",
            "FOODON:00001737",
            "FOODON:03412586",
            "FOODON:00001826",
            "FOODON:03411264",
            "FOODON:00001684",
            "FOODON:03411520",
            "FOODON:03411893"
        ]
    },
    {
        "query": "BRISKET",
        "chosen_curie": "FOODON:02000189",
        "true_curies": [
            "FOODON:03530020"
        ],
        "explanation": "While several terms refer to brisket, FOODON:02000189 ('beef brisket') offers the most comprehensive and accurate definition, specifying its location on the animal and encompassing various cuts (flat, point, etc.).  Other terms specify additional characteristics (e.g., raw, boneless) which are not inherent to the user's entity 'BRISKET'.",
        "candidates_provided": [
            "FOODON:02000191",
            "FOODON:02000190",
            "FOODON:02000341",
            "FOODON:02000196",
            "FOODON:02000192",
            "FOODON:02000193",
            "FOODON:02000195",
            "FOODON:02000194",
            "FOODON:03530020",
            "FOODON:02000189",
            "FOODON:02000340",
            "FOODON:00005507",
            "FOODON:02000093",
            "FOODON:00005382",
            "FOODON:02000358",
            "FOODON:03303432",
            "FOODON:00003884",
            "FOODON:03430137",
            "FOODON:03301257",
            "FOODON:03315614",
            "FOODON:03301385",
            "FOODON:03302118",
            "FOODON:03316889",
            "FOODON:03530102",
            "FOODON:03305149",
            "FOODON:03430124",
            "FOODON:00002190",
            "FOODON:00003234",
            "FOODON:03316891",
            "FOODON:00001664",
            "FOODON:03306994",
            "FOODON:03530071",
            "FOODON:00003028",
            "FOODON:00001656",
            "FOODON:03420132",
            "FOODON:03302756"
        ]
    },
    {
        "query": "ROSEMARY",
        "chosen_curie": "FOODON:00003809",
        "true_curies": [
            "obo:FAO_0000006",
            "obo:PO_0009047",
            "NCBITaxon:39367",
            "FOODON:00002212"
        ],
        "explanation": "While several terms refer to rosemary, FOODON:00003809, 'rosemary leaf', is the most specific and directly addresses the common culinary usage of rosemary.  Other terms encompass processed forms, mixtures, or the plant itself, which are less precise matches for the user input 'ROSEMARY'.",
        "candidates_provided": [
            "FOODON:00003809",
            "FOODON:03401598",
            "FOODON:03540862",
            "FOODON:03540863",
            "FOODON:03541273",
            "FOODON:03544365",
            "NCBITaxon:39367",
            "FOODON:03305866",
            "FOODON:03414392",
            "FOODON:03411495",
            "FOODON:03301209",
            "FOODON:00002212",
            "FOODON:03311170",
            "FOODON:03414915",
            "FOODON:03414342",
            "CHEBI:65585",
            "NCBITaxon:49170",
            "FOODON:03411691",
            "FOODON:03414961",
            "FOODON:03414521",
            "NCBITaxon:3764",
            "NCBITaxon:3744",
            "FOODON:03414520",
            "NCBITaxon:171638",
            "NCBITaxon:3745",
            "FOODON:03414974",
            "NCBITaxon:71275",
            "FOODON:03415132",
            "FOODON:00002211",
            "PATO:0001425",
            "NCBITaxon:1176516",
            "FOODON:03305862",
            "FOODON:03414962"
        ]
    },
    {
        "query": "CHOPPED",
        "chosen_curie": "FOODON:00002777",
        "true_curies": [
            "FOODON:03430125",
            "FOODON:00002502"
        ],
        "explanation": "While many terms describe chopped *specific* food items, FOODON:00002777, 'food (chopped)', is the most appropriate as it is a general term encompassing the concept of 'chopped' applied to any food material, making it the most accurate and broadly applicable choice.  Other options specify the type of food chopped which is not provided by the user entity.",
        "candidates_provided": [
            "FOODON:00004279",
            "FOODON:00002777",
            "FOODON:00004119",
            "FOODON:03301881",
            "FOODON:03430125",
            "FOODON:03317335",
            "FOODON:03316399",
            "FOODON:03301880",
            "FOODON:03316397",
            "FOODON:03306437",
            "FOODON:03307082",
            "FOODON:03311056",
            "FOODON:00005592",
            "FOODON:00004696",
            "FOODON:03307353",
            "FOODON:03311272",
            "FOODON:03306490",
            "FOODON:03305812",
            "FOODON:03311688",
            "FOODON:03311083",
            "FOODON:03430145",
            "FOODON:03430137",
            "FOODON:03430115",
            "FOODON:03430124",
            "FOODON:03430111",
            "FOODON:03430141",
            "FOODON:03430107",
            "FOODON:03530106",
            "FOODON:03530040",
            "FOODON:03530104",
            "FOODON:03530105",
            "FOODON:03530252",
            "FOODON:03530047",
            "FOODON:03530048",
            "FOODON:03430122",
            "FOODON:03304169",
            "FOODON:03430136",
            "FOODON:03530139",
            "FOODON:03413958"
        ]
    },
    {
        "query": "GORGONZOLA CHEESE",
        "chosen_curie": "FOODON:00001031",
        "true_curies": [
            "FOODON:00001013",
            "FOODON:03303502"
        ],
        "explanation": "While several terms mention \"gorgonzola cheese\", FOODON:00001031 ('gorgonzola cheese food product') provides a more detailed definition than FOODON:03542914 ('cheese, gorgonzola (efsa foodex2)') or the less descriptive FOODON:03303502 ('gorgonzola cheese').  The other options are either different cheeses or cheese analogs.",
        "candidates_provided": [
            "FOODON:03542914",
            "FOODON:00002421",
            "FOODON:00001031",
            "FOODON:00003868",
            "FOODON:00003865",
            "FOODON:00003867",
            "FOODON:00001013",
            "FOODON:03306275",
            "FOODON:00001033",
            "FOODON:00002960",
            "FOODON:03303675",
            "FOODON:03303502",
            "FOODON:00002425",
            "FOODON:00003933",
            "FOODON:00003863",
            "FOODON:03400115",
            "FOODON:00003860",
            "FOODON:00003841",
            "FOODON:00002542",
            "FOODON:03000479",
            "FOODON:03310353",
            "FOODON:03303578",
            "FOODON:03309493",
            "FOODON:03303548",
            "FOODON:00001945",
            "FOODON:03302980",
            "FOODON:03310935",
            "FOODON:03303544",
            "FOODON:03303853",
            "FOODON:03303869",
            "FOODON:03303514",
            "FOODON:03316584",
            "FOODON:03306791",
            "FOODON:03309371",
            "FOODON:00001712",
            "FOODON:03315679",
            "FOODON:03301732",
            "FOODON:03305272"
        ]
    },
    {
        "query": "CHOPPED",
        "chosen_curie": "FOODON:00002777",
        "true_curies": [
            "FOODON:00002942",
            "FOODON:03430125",
            "NCBITaxon:4043"
        ],
        "explanation": "While many terms describe chopped food items, FOODON:00002777, 'food (chopped)', is the most general and appropriate term to represent the action of chopping applied to food, rather than only a specific food type.",
        "candidates_provided": [
            "FOODON:00004279",
            "FOODON:00002777",
            "FOODON:00004119",
            "FOODON:03301881",
            "FOODON:03430125",
            "FOODON:03317335",
            "FOODON:03316399",
            "FOODON:03301880",
            "FOODON:03316397",
            "FOODON:03306437",
            "FOODON:03307082",
            "FOODON:03311056",
            "FOODON:00005592",
            "FOODON:00004696",
            "FOODON:03307353",
            "FOODON:03311272",
            "FOODON:03306490",
            "FOODON:03305812",
            "FOODON:03311688",
            "FOODON:03311083",
            "FOODON:03430145",
            "FOODON:03430137",
            "FOODON:03430115",
            "FOODON:03430124",
            "FOODON:03430111",
            "FOODON:03430141",
            "FOODON:03430107",
            "FOODON:03530106",
            "FOODON:03530040",
            "FOODON:03530104",
            "FOODON:03530105",
            "FOODON:03530252",
            "FOODON:03530047",
            "FOODON:03530048",
            "FOODON:03430122",
            "FOODON:03304169",
            "FOODON:03430136",
            "FOODON:03530139",
            "FOODON:03413958"
        ]
    },
    {
        "query": "COUSCOUS",
        "chosen_curie": "FOODON:00005532",
        "true_curies": [
            "FOODON:03303207"
        ],
        "explanation": "While several options mention couscous, FOODON:00005532 provides a concise and accurate definition of couscous as a dish made from durum wheat semolina, without unnecessary qualifiers about cooking method or ready-to-eat status.  Other options are either too general (e.g., including couscous as one of many items), too specific (e.g., dried couscous), or describe related but distinct concepts (e.g., dishes containing couscous).",
        "candidates_provided": [
            "FOODON:03540196",
            "FOODON:00005532",
            "FOODON:03303207",
            "FOODON:03400822",
            "FOODON:03303411",
            "FOODON:03401091",
            "FOODON:00003242",
            "FOODON:03400963",
            "FOODON:03400964",
            "FOODON:03401090",
            "FOODON:03401094",
            "FOODON:03401092",
            "FOODON:03401093",
            "FOODON:03400967",
            "FOODON:03400966",
            "FOODON:03400965",
            "FOODON:03400975",
            "FOODON:03401012",
            "FOODON:03304022",
            "FOODON:03530140",
            "FOODON:03530136",
            "obo:AfPO_0000269",
            "FOODON:03309292",
            "FOODON:03308034",
            "FOODON:03311568",
            "FOODON:03317581",
            "FOODON:03304172",
            "FOODON:03530122",
            "FOODON:03315176",
            "FOODON:03310211",
            "FOODON:03310092",
            "FOODON:03530142",
            "FOODON:03530135",
            "FOODON:03530137",
            "FOODON:03309342"
        ]
    },
    {
        "query": "CHOPPED",
        "chosen_curie": "FOODON:00002777",
        "true_curies": [
            "NCBITaxon:4039",
            "FOODON:03430125"
        ],
        "explanation": "While many terms include 'chopped' in their label, FOODON:00002777, 'food (chopped)', is the most appropriate because it's a general term encompassing various food materials, making it a broader and more suitable match for the unspecific entity 'CHOPPED' compared to the other more specific options like 'meat (chopped)' or 'liver (chopped)'.",
        "candidates_provided": [
            "FOODON:00004279",
            "FOODON:00002777",
            "FOODON:00004119",
            "FOODON:03301881",
            "FOODON:03430125",
            "FOODON:03317335",
            "FOODON:03316399",
            "FOODON:03301880",
            "FOODON:03316397",
            "FOODON:03306437",
            "FOODON:03307082",
            "FOODON:03311056",
            "FOODON:00005592",
            "FOODON:00004696",
            "FOODON:03307353",
            "FOODON:03311272",
            "FOODON:03306490",
            "FOODON:03305812",
            "FOODON:03311688",
            "FOODON:03311083",
            "FOODON:03430145",
            "FOODON:03430137",
            "FOODON:03430115",
            "FOODON:03430124",
            "FOODON:03430111",
            "FOODON:03430141",
            "FOODON:03430107",
            "FOODON:03530106",
            "FOODON:03530040",
            "FOODON:03530104",
            "FOODON:03530105",
            "FOODON:03530252",
            "FOODON:03530047",
            "FOODON:03530048",
            "FOODON:03430122",
            "FOODON:03304169",
            "FOODON:03430136",
            "FOODON:03530139",
            "FOODON:03413958"
        ]
    }
]
--- END File: evaluation_results_gemini_1.5-flash.json ---

--- File: .pytest_cache/CACHEDIR.TAG ---
Signature: 8a477f597d28d172789f06886806bc55
# This file is a cache directory tag created by pytest.
# For information about cache directory tags, see:
#	https://bford.info/cachedir/spec.html

--- END File: .pytest_cache/CACHEDIR.TAG ---

--- File: .pytest_cache/README.md ---
# pytest cache directory #

This directory contains data from the pytest's cache plugin,
which provides the `--lf` and `--ff` options, as well as the `cache` fixture.

**Do not** commit this to version control.

See [the docs](https://docs.pytest.org/en/stable/how-to/cache.html) for more information.

--- END File: .pytest_cache/README.md ---

--- File: .pytest_cache/.gitignore ---
# Created by pytest automatically.
*

--- END File: .pytest_cache/.gitignore ---

--- File: .pytest_cache/v/cache/nodeids ---
[
  "src/tests/test_lexical_index.py::test_index_exists",
  "src/tests/test_lexical_index.py::test_query_by_definition_keyword",
  "src/tests/test_lexical_index.py::test_query_by_label_exact",
  "src/tests/test_lexical_index.py::test_query_by_label_fuzzy",
  "src/tests/test_lexical_index.py::test_query_by_relations_keyword",
  "src/tests/test_lexical_index.py::test_query_by_synonym",
  "src/tests/test_parse_ontology.py::test_extract_definitions",
  "src/tests/test_parse_ontology.py::test_extract_hierarchy",
  "src/tests/test_parse_ontology.py::test_extract_labels_and_synonyms",
  "src/tests/test_parse_ontology.py::test_extract_relations",
  "src/tests/test_parse_ontology.py::test_load_ontology"
]
--- END File: .pytest_cache/v/cache/nodeids ---

--- File: .pytest_cache/v/cache/lastfailed ---
{
  "src/tests/test_lexical_index.py::test_index_exists": true,
  "src/tests/test_lexical_index.py::test_query_by_label_exact": true,
  "src/tests/test_lexical_index.py::test_query_by_label_fuzzy": true,
  "src/tests/test_lexical_index.py::test_query_by_synonym": true,
  "src/tests/test_lexical_index.py::test_query_by_definition_keyword": true,
  "src/tests/test_lexical_index.py::test_query_by_relations_keyword": true,
  "src/tests/test_parse_ontology.py::test_extract_labels_and_synonyms": true,
  "src/tests/test_parse_ontology.py::test_extract_definitions": true,
  "src/tests/test_parse_ontology.py::test_extract_hierarchy": true,
  "src/tests/test_parse_ontology.py::test_extract_relations": true
}
--- END File: .pytest_cache/v/cache/lastfailed ---

--- File: .pytest_cache/v/cache/stepwise ---
[]
--- END File: .pytest_cache/v/cache/stepwise ---

--- File: scripts/find_namespaces.py ---
# scripts/find_namespaces.py
import rdflib
from rdflib import URIRef
from collections import Counter
import re
import os
import sys

# Add project root to allow importing src.config
PROJECT_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
sys.path.append(PROJECT_ROOT)
from src.config import FOODON_PATH # Or any other OWL file you want to inspect

def get_base_uri(uri_str):
    """
    Tries to extract a base URI from a full URI.
    e.g., http://purl.obolibrary.org/obo/FOODON_0000123 -> http://purl.obolibrary.org/obo/FOODON_
    e.g., http://www.w3.org/2000/01/rdf-schema#label -> http://www.w3.org/2000/01/rdf-schema#
    """
    if '#' in uri_str:
        return uri_str.rsplit('#', 1)[0] + '#'
    # Common OBO pattern: ends with an underscore followed by digits
    match_obo = re.match(r'(.+[_A-Z]+_)(\d+)$', uri_str)
    if match_obo:
        return match_obo.group(1)
    # General pattern: up to the last slash
    if '/' in uri_str:
        return uri_str.rsplit('/', 1)[0] + '/'
    return None

def main(ontology_path):
    print(f"Loading ontology from: {ontology_path}...")
    g = rdflib.Graph()
    try:
        g.parse(ontology_path) # format will be auto-detected
        print(f"Successfully parsed. Found {len(g)} triples.")
    except Exception as e:
        print(f"Error parsing ontology: {e}")
        return

    uris = set()
    for s, p, o in g:
        if isinstance(s, URIRef):
            uris.add(str(s))
        if isinstance(p, URIRef):
            uris.add(str(p))
        if isinstance(o, URIRef):
            uris.add(str(o))

    print(f"\nFound {len(uris)} unique URIs.")

    base_uri_counts = Counter()
    for uri in uris:
        base = get_base_uri(uri)
        if base:
            base_uri_counts[base] += 1

    print("\nPotential Base URIs (with counts of distinct full URIs using them):")
    # Sort by count descending
    for base, count in base_uri_counts.most_common():
        print(f"- \"{base}\": (used in {count} URIs)")

    print("\n--- rdflib's known namespaces (Prefix: Namespace) ---")
    for prefix, namespace in g.namespaces():
        print(f"  {prefix}: {namespace}")


if __name__ == "__main__":
    # You can make the ontology path an argument if you like
    # For now, using FOODON_PATH from config
    if not os.path.exists(FOODON_PATH):
        print(f"ERROR: FoodON ontology file not found at {FOODON_PATH}")
    else:
        main(FOODON_PATH)
--- END File: scripts/find_namespaces.py ---

--- File: scripts/rebuild_base.bash ---
#!/usr/bin/env bash
#
# Rebuild the whole Onto-RAG pipeline from raw ontology → evaluation
# Usage: ./scripts/rebuild_all.sh            # runs with defaults
#        ./scripts/rebuild_all.sh --skip-eval   # skip final recall test
#
set -euo pipefail

ROOT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"
cd "${ROOT_DIR}"

DATA_DIR="data"

echo "🧹  Cleaning old artefacts …"
rm -f "${DATA_DIR}"/faiss_index.bin  "${DATA_DIR}"/faiss_metadata.json
rm -rf "${DATA_DIR}/whoosh_index"

echo "①  Parsing ontology …"
python -m src.ingestion.parse_ontology

echo "②  Creating enriched documents …"
python -m src.ingestion.enrich_documents

echo "③  Embedding documents …"
python -m src.embeddings.embed_docs

echo "④  Building FAISS index …"
python -m src.vector_store.faiss_store

echo "⑤  Building Whoosh index …"
python -m src.ingestion.build_lexical_index

if [[ "${1-}" != "--skip-eval" ]]; then
  echo "⑥  Running evaluator …"
  python -m src.evaluation.evaluate_retriever_recall
fi

echo "✅  Pipeline finished."

--- END File: scripts/rebuild_base.bash ---

--- File: scripts/reduce_evaluation_set.py ---
# scripts/reduce_evaluation_set.py

import xml.etree.ElementTree as ET
import os
import sys
from collections import defaultdict

# Add project root to Python path to allow direct imports if needed in the future
PROJECT_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
sys.path.append(PROJECT_ROOT)

# --- Configuration ---
# Assumes the data folder is at the project root
INPUT_XML_PATH = os.path.join(PROJECT_ROOT, "data", "CafeteriaFCD_foodon.xml")
OUTPUT_XML_PATH = os.path.join(PROJECT_ROOT, "data", "CafeteriaFCD_foodon_unique.xml")

def create_unique_dataset(input_file: str, output_file: str):
    """
    Parses an XML annotation file and creates a new, smaller XML file
    containing only one instance of each unique (text, semantic_tags) pair.
    """
    if not os.path.exists(input_file):
        print(f"Error: Input file not found at {input_file}")
        return

    try:
        tree = ET.parse(input_file)
        root = tree.getroot()
    except ET.ParseError as e:
        print(f"Error parsing XML file {input_file}: {e}")
        return

    # A set to store the unique identifiers of annotations we've already added.
    # The identifier will be a tuple: (UPPERCASE_TEXT, sorted_tuple_of_tags)
    seen_annotations = set()
    
    # These will be the root and single document of our new XML file
    new_root = ET.Element("collection")
    new_doc = ET.SubElement(new_root, "document")
    new_doc.set("id", "unique_annotations_document")

    total_annotations_processed = 0
    unique_annotations_found = 0

    # Find all annotation tags anywhere in the document
    for annotation_node in root.findall('.//annotation'):
        total_annotations_processed += 1
        
        text_node = annotation_node.find('text')
        tags_node = annotation_node.find('infon[@key="semantic_tags"]')

        # Ensure both text and tags exist to form a valid entry
        if (text_node is not None and text_node.text and
                tags_node is not None and tags_node.text):
            
            # 1. Normalize the text to be case-insensitive
            text = text_node.text.strip().upper()

            # 2. Normalize the tags to be order-insensitive
            raw_tags = tags_node.text.strip()
            # Split by ';', strip whitespace, filter out any empty strings, and sort
            sorted_tags = sorted([tag.strip() for tag in raw_tags.split(';') if tag.strip()])

            # Create a unique, hashable key for this annotation
            # We convert the list of tags to a tuple to make it hashable for the set
            annotation_key = (text, tuple(sorted_tags))

            # 3. If we haven't seen this unique combination before, add it
            if annotation_key not in seen_annotations:
                seen_annotations.add(annotation_key)
                # Append the original annotation_node to our new document
                new_doc.append(annotation_node)
                unique_annotations_found += 1

    print(f"Processed {total_annotations_processed} total annotations.")
    print(f"Found {unique_annotations_found} unique (text, tags) pairs.")

    # Write the new, smaller XML tree to the output file
    new_tree = ET.ElementTree(new_root)
    # The indent function (Python 3.9+) makes the XML output readable
    if sys.version_info >= (3, 9):
        ET.indent(new_tree)
        
    new_tree.write(output_file, encoding='utf-8', xml_declaration=True)
    print(f"Successfully saved unique dataset to: {output_file}")


if __name__ == "__main__":
    create_unique_dataset(INPUT_XML_PATH, OUTPUT_XML_PATH)
--- END File: scripts/reduce_evaluation_set.py ---

--- File: prompts/reranker.tpl ---

--- END File: prompts/reranker.tpl ---

--- File: prompts/hybrid_retriever.tpl ---

--- END File: prompts/hybrid_retriever.tpl ---

--- File: prompts/final_selection.tpl ---
You are an expert ontologist specializing in food science. Your task is to analyze a list of candidate ontology terms and select the single most appropriate term that matches the user's provided entity.

**User Entity:**
[USER_ENTITY]

**Candidate Ontology Terms:**
[CANDIDATE_LIST]

**Instructions:**
1.  Carefully review the user's entity and each candidate's details (ID, Label, Definition, Synonyms).
2.  Select the single best match. Consider exact matches of labels or synonyms as strong signals. If there are multiple good matches, prefer the more specific term over a general one.
3.  Provide your response in a valid JSON format only. Do not add any text before or after the JSON block.
4.  The JSON object must contain two keys:
    - "chosen_id": The CURIE (ID) of the single best matching term (e.g., "FOODON:00001290").
    - "explanation": A brief, clear explanation for your choice, justifying why it is the best fit compared to other options.

**Example Response Format:**
{
  "chosen_id": "FOODON:00001290",
  "explanation": "I chose 'garlic' because its label is an exact match for the user entity. Candidate 'allium sativum' is the scientific name but 'garlic' is the common term and therefore a better fit."
}
--- END File: prompts/final_selection.tpl ---

--- File: prompts/parse_ontology.tpl ---

--- END File: prompts/parse_ontology.tpl ---

--- File: src/config.py ---
# src/config.py
import os
from dotenv import load_dotenv
from rdflib import Namespace # This is fine, though rdflib.Namespace is not directly used for string constants below.

# Project Root Directory
PROJECT_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "."))
# print(f"Project root directory: {PROJECT_ROOT}") # Keep for debugging if you like

# Load environment variables from .env file
load_dotenv(os.path.join(PROJECT_ROOT, ".env"))

# Data Directory (for ontology dump, indexes, etc.)
DATA_DIR = os.path.join(PROJECT_ROOT, "data")
os.makedirs(DATA_DIR, exist_ok=True)

# Ontologies Directory
ONTOLOGIES_DIR = os.path.join(PROJECT_ROOT, "ontologies")
FOODON_PATH = os.path.join(ONTOLOGIES_DIR, "foodon.owl")
TEST_FOODON_SNIPPET_PATH = os.path.join(ONTOLOGIES_DIR, "test_foodon_snippet.owl")


# Output file from parse_ontology.py
ONTOLOGY_DUMP_JSON = os.path.join(DATA_DIR, "ontology_dump.json")

# Output file for enriched documents
ENRICHED_DOCUMENTS_FILE = os.path.join(DATA_DIR, "enriched_documents.json")

# Output file for embeddings (used for building FAISS index)
EMBEDDINGS_FILE = os.path.join(DATA_DIR, "embeddings.json")

# Whoosh Index Directory
WHOOSH_INDEX_DIR = os.path.join(DATA_DIR, "whoosh_index")
os.makedirs(WHOOSH_INDEX_DIR, exist_ok=True)

# FAISS Index Paths
FAISS_INDEX_PATH = os.path.join(DATA_DIR, "faiss_index.bin")
FAISS_METADATA_PATH = os.path.join(DATA_DIR, "faiss_metadata.json")

# Embedding Model Configuration
# EMBEDDING_MODEL_NAME = "all-MiniLM-L6-v2"
EMBEDDING_MODEL_NAME = "Lajavaness/bilingual-embedding-large" 
# RERANKER_MODEL_NAME = "intfloat/e5-mistral-7b-instruct"
RERANKER_MODEL_NAME = "cross-encoder/ms-marco-MiniLM-L-6-v2"
EMBEDDING_BATCH_SIZE = 32 # For batch embedding script
EMBEDDING_DEVICE = 'cpu'  # or 'cuda' if available, for embedding script

# Default K values for retrieval
DEFAULT_K_LEXICAL = 20
DEFAULT_K_VECTOR = 20
DEFAULT_RERANK_K = DEFAULT_K_LEXICAL + DEFAULT_K_VECTOR

# Namespaces (using string constants for broader compatibility if rdflib not always imported)
RDFS_NS_STR = "http://www.w3.org/2000/01/rdf-schema#"
RDF_NS_STR = "http://www.w3.org/1999/02/22-rdf-syntax-ns#"
OWL_NS_STR = "http://www.w3.org/2002/07/owl#"
SKOS_NS_STR = "http://www.w3.org/2004/02/skos/core#"
OBO_NS_STR = "http://purl.obolibrary.org/obo/"
OBOINOWL_NS_STR = "http://www.geneontology.org/formats/oboInOwl#"
IAO_NS_STR = "http://purl.obolibrary.org/obo/IAO_"

# For rdflib usage where Namespace objects are preferred:
RDFS_NS = Namespace(RDFS_NS_STR)
RDF_NS = Namespace(RDF_NS_STR)
OWL_NS = Namespace(OWL_NS_STR)
SKOS_NS = Namespace(SKOS_NS_STR)
OBO_NS = Namespace(OBO_NS_STR)
OBOINOWL_NS = Namespace(OBOINOWL_NS_STR)
IAO_NS = Namespace(IAO_NS_STR)


# Mapping of common relation URIs/CURIEs to human-readable names and default prefixes
# Used by parse_ontology.py and potentially enrich_documents.py
RELATION_CONFIG = {
    "obo:BFO_0000050": {"label": "part of", "prefix": "obo"},
    "obo:RO_0001000": {"label": "derives from", "prefix": "obo"},
    "obo:RO_0002200": {"label": "has phenotype", "prefix": "obo"},
    "obo:RO_0002451": {"label": "has part", "prefix": "obo"},
    "obo:FOODON_0000246": {"label": "has ingredient", "prefix": "obo"},
    "obo:RO_0000056": {"label": "participates in", "prefix": "obo"},
    "obo:RO_0000057": {"label": "has participant", "prefix": "obo"},
    "obo:RO_0000085": {"label": "functionally related to", "prefix": "obo"},
    "obo:RO_0002090": {"label": "adjacent to", "prefix": "obo"},
    "obo:RO_0002131": {"label": "overlaps", "prefix": "obo"},
    "obo:RO_0002150": {"label": "connected to", "prefix": "obo"},
    "obo:RO_0002202": {"label": "develops from", "prefix": "obo"},
    "obo:RO_0002350": {"label": "member of", "prefix": "obo"},
    "obo:RO_0002351": {"label": "has member", "prefix": "obo"},
    "obo:RO_0002353": {"label": "output of", "prefix": "obo"},
    "obo:RO_0002440": {"label": "causally related to", "prefix": "obo"},
    "obo:RO_0002450": {"label": "contains", "prefix": "obo"},
    "obo:RO_0002500": {"label": "surrounds", "prefix": "obo"},
    "obo:RO_0002573": {"label": "has quality", "prefix": "obo"},
    "obo:RO_0002606": {"label": "is transformation of", "prefix": "obo"},
    "obo:RO_0002607": {"label": "has input", "prefix": "obo"},
    "obo:RO_0003000": {"label": "used in", "prefix": "obo"},
    "obo:FOODON_0000380": {"label": "has preparation method", "prefix": "obo"},
    "obo:FOODON_0000226": {"label": "has food source", "prefix": "obo"},
    "obo:FOODON_0000388": {"label": "has maturity state", "prefix": "obo"},
    "obo:FOODON_0000286": {"label": "has packaging", "prefix": "obo"},
    "obo:FOODON_0000240": {"label": "has preservation method", "prefix": "obo"},
    "obo:FOODON_0000440": {"label": "has physical state", "prefix": "obo"},
    # "obo:FOODON_": {"label": "FoodON specific relation", "prefix": "obo"}, # This generic one might be too broad
    "obo:ERO_0000039": {"label": "has nutrient", "prefix": "obo"},
    "obo:ERO_0000589": {"label": "dietary context of", "prefix": "obo"},
    "obo:NCIT_C25277": {"label": "is allergen of", "prefix": "obo"},
    "obo:NCIT_C48670": {"label": "has active ingredient", "prefix": "obo"},
    "obo:NCIT_C64548": {"label": "part of human diet", "prefix": "obo"},
    "obo:PATO_0000001": {"label": "has quality PATO", "prefix": "obo"},
}

TARGET_RELATIONS_CURIES = list(RELATION_CONFIG.keys())

# CURIE Prefix Map for uri_to_curie and curie_to_uri conversions
# Ensure the keys are the *base URIs* that prefixes are expected for.
CURIE_PREFIX_MAP = {
    "http://purl.obolibrary.org/obo/FOODON_": "FOODON",
    "http://purl.obolibrary.org/obo/BFO_": "BFO",
    "http://purl.obolibrary.org/obo/RO_": "RO",
    "http://purl.obolibrary.org/obo/ERO_": "ERO",
    "http://purl.obolibrary.org/obo/NCIT_": "NCIT",
    "http://purl.obolibrary.org/obo/PATO_": "PATO",
    "http://purl.obolibrary.org/obo/IAO_": "IAO",
    "http://www.w3.org/2000/01/rdf-schema#": "rdfs",
    "http://www.w3.org/1999/02/22-rdf-syntax-ns#": "rdf",
    "http://www.w3.org/2002/07/owl#": "owl",
    "http://www.w3.org/2004/02/skos/core#": "skos",
    "http://www.geneontology.org/formats/oboInOwl#": "oboInOwl",
    "http://purl.obolibrary.org/obo/HANCESTRO_": "HANCESTRO",  
    "http://purl.obolibrary.org/obo/GAZ_": "GAZ",
    "http://purl.obolibrary.org/obo/CHEBI_": "CHEBI",
    "http://purl.obolibrary.org/obo/NCBITaxon_": "NCBITaxon",
    "http://purl.obolibrary.org/obo/UBERON_": "UBERON",
    "http://purl.obolibrary.org/obo/ENVO_": "ENVO",
    "http://purl.obolibrary.org/obo/HP_": "HP",
    "http://purl.obolibrary.org/obo/GO_": "GO",
    # General OBO prefix - should be last or handled carefully to avoid overly broad matches
    # if specific OBO sub-ontologies are listed above.
    "http://purl.obolibrary.org/obo/": "obo",
}

# LLM API Key (placeholders)
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
LLM_SELECTOR_MODEL_NAME = "gemini-1.5-flash-latest"
OLLAMA_SELECTOR_MODEL_NAME = 'llama3.1:8b'
# OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# Logging configuration
LOG_LEVEL = "INFO"
LOG_FILE = os.path.join(PROJECT_ROOT, "app.log") # Example log file in project root
--- END File: src/config.py ---

--- File: src/__init__.py ---

--- END File: src/__init__.py ---

--- File: src/main.py ---
# src/main.py
import argparse
import json
import os
import sys

# --- Add project root to sys.path ---
PROJECT_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
if PROJECT_ROOT not in sys.path:
    sys.path.insert(0, PROJECT_ROOT)

from src.pipeline.ollama_pipeline import RAGPipeline
from src.config import DEFAULT_K_LEXICAL, DEFAULT_K_VECTOR

def main():
    parser = argparse.ArgumentParser(description="Run the Onto-RAG pipeline with LLM selection.")
    parser.add_argument("query", type=str, help="The entity or text to search for (e.g., 'raw milk').")
    parser.add_argument("--lexical_k", type=int, default=DEFAULT_K_LEXICAL, help=f"Initial candidates from lexical search (default: {DEFAULT_K_LEXICAL}).")
    parser.add_argument("--vector_k", type=int, default=DEFAULT_K_VECTOR, help=f"Initial candidates from vector search (default: {DEFAULT_K_VECTOR}).")
    parser.add_argument("--top_n_rerank", type=int, default=10, help="Number of candidates to rerank and pass to the LLM (default: 10).")
    args = parser.parse_args()

    pipeline = None
    try:
        pipeline = RAGPipeline()
        final_result = pipeline.run(
            query=args.query,
            lexical_k=args.lexical_k,
            vector_k=args.vector_k,
            rerank_top_n=args.top_n_rerank
        )

        print("\n--- Final LLM Selection ---")
        if not final_result:
            print("Could not determine a matching ontology term.")
        else:
            print(f"Query: '{args.query}'")
            print("---------------------------")
            print(f"Chosen Term ID: {final_result.get('id', 'N/A')}")
            print(f"Label:          {final_result.get('label', 'N/A')}")
            print(f"Definition:     {final_result.get('definition', 'N/A')}")
            print(f"Synonyms:       {'; '.join(final_result.get('synonyms', [])) or 'None'}")
            print("\nLLM Explanation:")
            print(f"  > {final_result.get('explanation', 'No explanation provided.')}")
        print("---------------------------\n")

    except Exception as e:
        print(f"\nAn error occurred during the pipeline execution: {e}", file=sys.stderr)
    finally:
        if pipeline:
            pipeline.close()

if __name__ == "__main__":
    main()
--- END File: src/main.py ---

--- File: src/reranker/__init__.py ---
# src/reranker/__init__.py
# This file makes Python treat the directory 'reranker' as a package.

from .llm_reranker import LLMReranker

__all__ = ["LLMReranker"]
--- END File: src/reranker/__init__.py ---

--- File: src/reranker/llm_reranker.py ---
# src/reranker/llm_reranker.py

import json
import logging
from typing import List, Dict, Optional, Tuple, Any

from sentence_transformers import CrossEncoder
import torch

# Configure logging for the module
logger = logging.getLogger(__name__)
# Basic configuration for the logger if no handlers are configured by the calling application
if not logger.hasHandlers():
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')


class LLMReranker:
    """
    Reranks documents using a CrossEncoder model.
    It takes a query and a list of candidate documents, computes a relevance score
    for each query-document pair, and returns the documents sorted by these scores.
    """

    def __init__(self,
                 model_name: str,
                 enriched_docs_path: str,
                 device: Optional[str] = None):
        """
        Initializes the LLMReranker.

        Args:
            model_name (str): The name of the CrossEncoder model to use
                              (e.g., "cross-encoder/ms-marco-MiniLM-L-6-v2").
            enriched_docs_path (str): Path to the JSON file containing enriched documents,
                                      expected to be a list of dicts with "id" and "text" keys.
            device (Optional[str]): The device to run the model on ("cuda", "cpu").
                                    If None, tries to use CUDA, otherwise CPU.
        """
        self.model_name = model_name
        self.enriched_docs_path = enriched_docs_path

        if device:
            self.device = device
        elif torch.cuda.is_available():
            self.device = "cuda"
            logger.info("CUDA available. Using CUDA for reranker.")
        else:
            self.device = "cpu"
            logger.info("CUDA not available. Using CPU for reranker.")
        
        try:
            self.model = CrossEncoder(self.model_name, device=self.device, trust_remote_code=True) # Added trust_remote_code for models like e5
            logger.info(f"Successfully loaded CrossEncoder model: {self.model_name} on {self.device}")
            model_max_length = self.model.tokenizer.model_max_length
            if model_max_length > 10000: # often indicates not properly set, e.g. 1e30
                model_max_length = 512 # Fallback to a common default
                logger.warning(f"Model tokenizer returned a very large max_length. Using fallback: {model_max_length}")
            self.model.max_length = model_max_length
            logger.info(f"Set CrossEncoder max_length to: {self.model.max_length}")

        except Exception as e:
            logger.error(f"Failed to load CrossEncoder model {self.model_name}: {e}")
            if "intfloat/e5-mistral-7b-instruct" in self.model_name:
                 logger.warning(
                    f"Note: '{self.model_name}' is primarily an encoder model. "
                    "Using it directly with `CrossEncoder` might not yield optimal "
                    "results unless it's a variant fine-tuned for sequence-pair classification "
                    "or requires `trust_remote_code=True`. "
                    "Consider a bi-encoder approach (separate embeddings + cosine similarity) "
                    "or a prompt-based LLM reranking for this model type if standard CrossEncoder fails."
                )
            raise

        self.doc_texts = self._load_enriched_documents()
        if not self.doc_texts:
            logger.error(f"Enriched documents could not be loaded from {self.enriched_docs_path}. Reranker might not function correctly.")


    def _load_enriched_documents(self) -> Dict[str, str]:
        """
        Loads enriched documents and creates a mapping from document ID to text.

        Returns:
            Dict[str, str]: A dictionary mapping document CURIEs to their enriched text.
        """
        try:
            with open(self.enriched_docs_path, 'r', encoding='utf-8') as f:
                enriched_data = json.load(f)
            
            doc_map = {}
            for item in enriched_data:
                if "id" in item and "text" in item:
                    doc_map[item["id"]] = item["text"]
                else:
                    logger.warning(f"Skipping item due to missing 'id' or 'text' in {self.enriched_docs_path}: {item}")
            logger.info(f"Loaded {len(doc_map)} enriched documents for reranking from {self.enriched_docs_path}.")
            return doc_map
        except FileNotFoundError:
            logger.error(f"Enriched documents file not found: {self.enriched_docs_path}")
            return {}
        except json.JSONDecodeError:
            logger.error(f"Error decoding JSON from {self.enriched_docs_path}")
            return {}
        except Exception as e:
            logger.error(f"An unexpected error occurred while loading enriched documents: {e}")
            return {}

    def _get_document_text_for_reranking(self, doc_id: str) -> Optional[str]:
        """
        Retrieves the pre-loaded enriched text for a given document ID.

        Args:
            doc_id (str): The CURIE of the document.

        Returns:
            Optional[str]: The enriched text of the document, or None if not found.
        """
        return self.doc_texts.get(doc_id)

    def rerank(self, query: str, documents: List[Dict[str, Any]], top_n: Optional[int] = None) -> List[Dict[str, Any]]:
        """
        Reranks a list of documents based on their relevance to a query.

        Args:
            query (str): The search query.
            documents (List[Dict[str, Any]]): A list of document dictionaries retrieved
                                              from a previous stage (e.g., HybridRetriever).
                                              Each dict must contain an 'id' key.
            top_n (Optional[int]): The maximum number of documents to return after reranking.
                                   If None, all reranked documents are returned.

        Returns:
            List[Dict[str, Any]]: The list of documents, sorted by reranked scores,
                                  with a new 'rerank_score' key added to each document.
                                  Documents for which text could not be found are excluded.
        """
        if not query:
            logger.warning("Rerank called with an empty query. Returning original documents.")
            return documents[:top_n] if top_n is not None else documents
        
        if not documents:
            logger.info("Rerank called with no documents. Returning empty list.")
            return []

        if not self.doc_texts:
            logger.error("No enriched document texts loaded. Cannot perform reranking. Returning original documents.")
            return documents[:top_n] if top_n is not None else documents

        sentence_pairs: List[Tuple[str, str]] = []
        valid_documents_for_reranking: List[Dict[str, Any]] = []

        for doc in documents:
            doc_id = doc.get("id")
            if not doc_id:
                logger.warning(f"Document missing 'id' field, cannot rerank: {doc}")
                continue

            doc_text = self._get_document_text_for_reranking(doc_id)
            if doc_text:
                sentence_pairs.append((query, doc_text))
                valid_documents_for_reranking.append(doc)
            else:
                logger.warning(f"Could not find enriched text for document ID '{doc_id}'. Skipping for reranking.")
        
        if not sentence_pairs:
            logger.warning("No valid documents found to create sentence pairs for reranking. Returning original documents that were passed in.")
            return documents[:top_n] if top_n is not None else documents

        logger.info(f"Reranking {len(sentence_pairs)} document(s) for query: '{query}'")
        
        try:
            scores = self.model.predict(sentence_pairs, 
                                        show_progress_bar=False, # Set to True for verbose progress
                                        batch_size=32) # Adjust batch_size based on VRAM
        except Exception as e:
            logger.error(f"Error during CrossEncoder prediction: {e}")
            # Fallback: return original documents without reranking scores
            return documents[:top_n] if top_n is not None else documents

        # Add scores to documents and sort
        for i, doc in enumerate(valid_documents_for_reranking):
            doc["rerank_score"] = float(scores[i]) # Ensure score is float

        # Sort documents by rerank_score in descending order
        reranked_documents = sorted(valid_documents_for_reranking, key=lambda x: x.get("rerank_score", -float('inf')), reverse=True)

        if top_n is not None:
            reranked_documents = reranked_documents[:top_n]
            logger.info(f"Returning top {len(reranked_documents)} reranked documents.")
        else:
            logger.info(f"Returning all {len(reranked_documents)} reranked documents.")
            
        return reranked_documents


if __name__ == '__main__':
    import sys
    from pathlib import Path
    import random # For dummy retriever scores

    # --- Path Setup & Config Import ---
    # Add project root to sys.path to allow imports like src.config
    # Assumes this script is in onto_rag/src/reranker/
    PROJECT_ROOT_FOR_MAIN = Path(__file__).resolve().parent.parent.parent
    if str(PROJECT_ROOT_FOR_MAIN) not in sys.path:
        sys.path.append(str(PROJECT_ROOT_FOR_MAIN))

    try:
        from src.config import (
            ENRICHED_DOCUMENTS_FILE,
            RERANKER_MODEL_NAME,
            EMBEDDING_DEVICE,
            DEFAULT_RERANK_K,
            LOG_LEVEL, # Optional: if you want to use config's log level
            LOG_FILE   # Optional: if you want to use config's log file
        )
    except ImportError as e:
        print(f"Error importing from src.config: {e}")
        print("Please ensure that src/config.py exists and the script is run from the project root,")
        print("or that the PROJECT_ROOT_FOR_MAIN path is correctly set for your structure.")
        sys.exit(1)

    # --- Basic Logging Setup for the Example ---
    # Uses the main logger configured at the top of the file.
    # You can customize this further if needed, e.g., by setting level from config.LOG_LEVEL
    logger.setLevel(LOG_LEVEL if 'LOG_LEVEL' in locals() else "INFO")
    # Example of adding a file handler if LOG_FILE is configured:
    # if 'LOG_FILE' in locals() and LOG_FILE:
    #     fh = logging.FileHandler(LOG_FILE)
    #     fh.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
    #     logger.addHandler(fh)
    #     logging.getLogger().addHandler(fh) # also add to root logger if basicConfig was called

    logger.info("--- Running LLMReranker Example with Real Data ---")
    logger.info(f"Using ENRICHED_DOCUMENTS_FILE: {ENRICHED_DOCUMENTS_FILE}")
    logger.info(f"Using RERANKER_MODEL_NAME: {RERANKER_MODEL_NAME}")
    logger.info(f"Using EMBEDDING_DEVICE: {EMBEDDING_DEVICE}")
    logger.info(f"Using DEFAULT_RERANK_K: {DEFAULT_RERANK_K}")


    # --- Load Sample Documents from Real Enriched Data ---
    sample_documents_from_retriever: List[Dict[str, Any]] = []
    try:
        with open(ENRICHED_DOCUMENTS_FILE, 'r', encoding='utf-8') as f:
            all_enriched_docs = json.load(f)
        
        if not all_enriched_docs:
            logger.error(f"No documents found in {ENRICHED_DOCUMENTS_FILE}. Cannot proceed with the example.")
            sys.exit(1)

        # Select a few documents to simulate retriever output
        # Take up to 5, or fewer if the file has less
        num_docs_to_sample = min(len(all_enriched_docs), 5)
        if num_docs_to_sample == 0 :
             logger.error(f"The file {ENRICHED_DOCUMENTS_FILE} is empty. Cannot create sample documents.")
             sys.exit(1)
             
        for i in range(num_docs_to_sample):
            doc = all_enriched_docs[i]
            sample_documents_from_retriever.append({
                "id": doc.get("id"),
                "label": doc.get("label", "N/A"), # Get label if available
                "retriever_score": random.uniform(0.5, 1.0) # Dummy score
            })
        logger.info(f"Loaded {len(sample_documents_from_retriever)} sample documents for reranking.")

    except FileNotFoundError:
        logger.error(f"ERROR: The enriched documents file was not found: {ENRICHED_DOCUMENTS_FILE}")
        logger.error("Please ensure you have run the data ingestion and enrichment scripts first (e.g., `src.ingestion.enrich_documents.py`).")
        sys.exit(1)
    except json.JSONDecodeError:
        logger.error(f"ERROR: Could not decode JSON from {ENRICHED_DOCUMENTS_FILE}. The file might be corrupted.")
        sys.exit(1)
    except Exception as e:
        logger.error(f"An unexpected error occurred while loading sample documents: {e}", exc_info=True)
        sys.exit(1)

    if not sample_documents_from_retriever:
        logger.error("No sample documents could be prepared. Exiting example.")
        sys.exit(1)
        
    # --- Reranker Initialization and Usage ---
    try:
        reranker = LLMReranker(
            model_name=RERANKER_MODEL_NAME,
            enriched_docs_path=str(ENRICHED_DOCUMENTS_FILE), # Ensure path is a string
            device=EMBEDDING_DEVICE
        )

        query = "Garlic" # Generic example, adjust to your data

        logger.info(f"\nOriginal sample documents (simulated retriever output) for query '{query}':")
        for doc in sample_documents_from_retriever:
            logger.info(f"  ID: {doc.get('id')}, Label: {doc.get('label')}, Retriever Score: {doc.get('retriever_score', 0.0):.4f}")

        reranked_results = reranker.rerank(query, sample_documents_from_retriever, top_n=DEFAULT_RERANK_K)

        logger.info(f"\nReranked documents (top {DEFAULT_RERANK_K} for query '{query}'):")
        if reranked_results:
            for doc in reranked_results:
                logger.info(f"  ID: {doc.get('id')}, Label: {doc.get('label')}, Rerank Score: {doc.get('rerank_score', 'N/A'):.4f}, Original Retriever Score: {doc.get('retriever_score', 'N/A')}")
        else:
            logger.info("  No results after reranking.")
        
        # Example of how you might switch to "intfloat/e5-mistral-7b-instruct"
        # Ensure it's set in your .env or config.py as RERANKER_MODEL_NAME
        # and that you have the resources for it.
        if RERANKER_MODEL_NAME != "intfloat/e5-mistral-7b-instruct" and False: # Set to True to test e5
            logger.info("\n--- Conceptual Test: Switching to intfloat/e5-mistral-7b-instruct ---")
            logger.warning("This is a large model and may require significant resources and download time.")
            logger.warning("Ensure 'intfloat/e5-mistral-7b-instruct' is configured as RERANKER_MODEL_NAME and 'trust_remote_code=True' might be needed.")
            
            try:
                e5_model_name = "intfloat/e5-mistral-7b-instruct"
                e5_reranker = LLMReranker(
                    model_name=e5_model_name,
                    enriched_docs_path=str(ENRICHED_DOCUMENTS_FILE),
                    device=EMBEDDING_DEVICE # "cuda" recommended for this model
                )
                e5_reranked_results = e5_reranker.rerank(query, sample_documents_from_retriever, top_n=DEFAULT_RERANK_K)
                logger.info(f"\nReranked documents with {e5_model_name} (top {DEFAULT_RERANK_K} for query '{query}'):")
                if e5_reranked_results:
                    for doc in e5_reranked_results:
                        logger.info(f"  ID: {doc.get('id')}, Label: {doc.get('label')}, Rerank Score: {doc.get('rerank_score', 'N/A'):.4f}")
                else:
                    logger.info("  No results after reranking with E5.")
            except Exception as e_e5:
                logger.error(f"Could not initialize or use {e5_model_name} reranker: {e_e5}", exc_info=True)
                logger.warning(f"Skipping {e5_model_name} reranking part of the example.")


    except Exception as e:
        logger.error(f"An error occurred in the main example: {e}", exc_info=True)

    logger.info("--- LLMReranker Example Finished ---")
--- END File: src/reranker/llm_reranker.py ---

--- File: src/pipeline/ollama_pipeline.py ---
# src/pipeline/pipeline.py
import os
import sys
import logging
from typing import List, Dict, Any, Optional

# --- Add project root to sys.path ---
PROJECT_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
if PROJECT_ROOT not in sys.path:
    sys.path.insert(0, PROJECT_ROOT)

from src.retriever.hybrid_retriever import HybridRetriever
from src.reranker.llm_reranker import LLMReranker
from src.rag_selectors.ollama_selector import OllamaSelector
from src import config

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(name)s - %(message)s')
logger = logging.getLogger(__name__)

class RAGPipeline:
    def __init__(self):
        logger.info("Initializing RAG Pipeline...")
        try:
            self.retriever = HybridRetriever()
            self.reranker = LLMReranker(
                model_name=config.RERANKER_MODEL_NAME,
                enriched_docs_path=config.ENRICHED_DOCUMENTS_FILE,
                device=config.EMBEDDING_DEVICE
            )
            self.selector = OllamaSelector(retriever=self.retriever) # <--- UPDATED INSTANTIATION
            logger.info("RAG Pipeline initialized successfully.")
        except (FileNotFoundError, ValueError) as e:
            logger.error(f"Failed to initialize pipeline: {e}")
            logger.error("Please run 'scripts/rebuild_base.bash' and ensure GEMINI_API_KEY is set in your .env file.")
            raise
        except Exception as e:
            logger.error(f"An unexpected error occurred during pipeline initialization: {e}", exc_info=True)
            raise

    def run(self, 
            query: str, 
            lexical_k: int = config.DEFAULT_K_LEXICAL, 
            vector_k: int = config.DEFAULT_K_VECTOR, 
            rerank_top_n: int = 10
            ) -> Optional[Dict[str, Any]]:
        """
        Executes the full pipeline for a given query.

        Returns:
            A dictionary of the selected term with its details and the LLM's explanation, or None.
        """
        logger.info(f"Running pipeline for query: '{query}'")

        # 1. Retrieve
        retriever_output = self.retriever.search(query, lexical_limit=lexical_k, vector_k=vector_k)
        lexical_results = retriever_output.get("lexical_results", [])
        vector_results = retriever_output.get("vector_results", [])
        
        # 2. Merge
        combined_candidates = []
        seen_ids = set()
        for doc in lexical_results + vector_results:
            doc_id = doc.get('id')
            if doc_id and doc_id not in seen_ids:
                combined_candidates.append(doc)
                seen_ids.add(doc_id)
        
        if not combined_candidates:
            logger.warning("No candidates found.")
            return None

        # 3. Rerank
        reranked_candidates = self.reranker.rerank(query, combined_candidates, top_n=rerank_top_n)

        if not reranked_candidates:
            logger.warning("No candidates left after reranking.")
            return None
        
        logger.info(f"Top {len(reranked_candidates)} candidates after reranking passed to LLM selector.")

        # 4. Select with LLM
        selection = self.selector.select_best_term(query, reranked_candidates)

        if not selection:
            logger.error("LLM selection failed. Returning the top reranked result as a fallback.")
            top_fallback = reranked_candidates[0]
            chosen_term_details = self.retriever.get_term_details(top_fallback['id'])
            chosen_term_details['explanation'] = "FALLBACK: LLM selection failed. This is the top result from the reranker."
            return chosen_term_details

        # 5. Get final details and return
        chosen_id = selection['chosen_id']
        chosen_term_details = self.retriever.get_term_details(chosen_id)
        if not chosen_term_details:
            logger.error(f"LLM chose ID '{chosen_id}', but its details could not be retrieved.")
            return None
        
        chosen_term_details['explanation'] = selection['explanation']
        return chosen_term_details

    def close(self):
        if hasattr(self.retriever, 'close'):
            self.retriever.close()
        logger.info("Pipeline resources closed.")
--- END File: src/pipeline/ollama_pipeline.py ---

--- File: src/pipeline/gemini_pipeline.py ---
# src/pipeline/pipeline.py
import os
import sys
import logging
from typing import List, Dict, Any, Optional

# --- Add project root to sys.path ---
PROJECT_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
if PROJECT_ROOT not in sys.path:
    sys.path.insert(0, PROJECT_ROOT)

from src.retriever.hybrid_retriever import HybridRetriever
from src.reranker.llm_reranker import LLMReranker
from src.rag_selectors.gemini_selector import GeminiSelector
from src import config

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(name)s - %(message)s')
logger = logging.getLogger(__name__)

class RAGPipeline:
    def __init__(self):
        logger.info("Initializing RAG Pipeline...")
        try:
            self.retriever = HybridRetriever()
            self.reranker = LLMReranker(
                model_name=config.RERANKER_MODEL_NAME,
                enriched_docs_path=config.ENRICHED_DOCUMENTS_FILE,
                device=config.EMBEDDING_DEVICE
            )
            self.selector = GeminiSelector(retriever=self.retriever) # <--- UPDATED INSTANTIATION
            logger.info("RAG Pipeline initialized successfully.")
        except (FileNotFoundError, ValueError) as e:
            logger.error(f"Failed to initialize pipeline: {e}")
            logger.error("Please run 'scripts/rebuild_base.bash' and ensure GEMINI_API_KEY is set in your .env file.")
            raise
        except Exception as e:
            logger.error(f"An unexpected error occurred during pipeline initialization: {e}", exc_info=True)
            raise

    def run(self, 
            query: str, 
            lexical_k: int = config.DEFAULT_K_LEXICAL, 
            vector_k: int = config.DEFAULT_K_VECTOR, 
            rerank_top_n: int = 10
            ) -> Optional[Dict[str, Any]]:
        """
        Executes the full pipeline for a given query.

        Returns:
            A dictionary of the selected term with its details and the LLM's explanation, or None.
        """
        logger.info(f"Running pipeline for query: '{query}'")

        # 1. Retrieve
        retriever_output = self.retriever.search(query, lexical_limit=lexical_k, vector_k=vector_k)
        lexical_results = retriever_output.get("lexical_results", [])
        vector_results = retriever_output.get("vector_results", [])
        
        # 2. Merge
        combined_candidates = []
        seen_ids = set()
        for doc in lexical_results + vector_results:
            doc_id = doc.get('id')
            if doc_id and doc_id not in seen_ids:
                combined_candidates.append(doc)
                seen_ids.add(doc_id)
        
        if not combined_candidates:
            logger.warning("No candidates found.")
            return None

        # 3. Rerank
        reranked_candidates = self.reranker.rerank(query, combined_candidates, top_n=rerank_top_n)

        if not reranked_candidates:
            logger.warning("No candidates left after reranking.")
            return None
        
        logger.info(f"Top {len(reranked_candidates)} candidates after reranking passed to LLM selector.")

        # 4. Select with LLM
        selection = self.selector.select_best_term(query, reranked_candidates)

        if not selection:
            logger.error("LLM selection failed. Returning the top reranked result as a fallback.")
            top_fallback = reranked_candidates[0]
            chosen_term_details = self.retriever.get_term_details(top_fallback['id'])
            chosen_term_details['explanation'] = "FALLBACK: LLM selection failed. This is the top result from the reranker."
            return chosen_term_details

        # 5. Get final details and return
        chosen_id = selection['chosen_id']
        chosen_term_details = self.retriever.get_term_details(chosen_id)
        logger.debug(f"Chosen term details: {chosen_term_details}")
        if not chosen_term_details:
            logger.error(f"LLM chose ID '{chosen_id}', but its details could not be retrieved.")
            return None
        
        chosen_term_details['explanation'] = selection['explanation']
        return chosen_term_details

    def close(self):
        if hasattr(self.retriever, 'close'):
            self.retriever.close()
        logger.info("Pipeline resources closed.")
--- END File: src/pipeline/gemini_pipeline.py ---

--- File: src/ingestion/build_lexical_index.py ---
# src/ingestion/build_lexical_index.py
import sys
import os

# --- Add project root to sys.path ---
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
if project_root not in sys.path:
    sys.path.insert(0, project_root)
# --- End sys.path modification ---

import json
from whoosh.index import create_in, open_dir
from whoosh.fields import Schema, ID, TEXT
from whoosh.qparser import QueryParser
import traceback

# Now import using the 'src' package prefix
from src.config import ONTOLOGY_DUMP_JSON, WHOOSH_INDEX_DIR

# ... (rest of the build_lexical_index.py code, ensuring imports like `from src.config` are used)
def build_index(json_path: str, index_dir: str):
    print(f"Building lexical index from {json_path} into {index_dir}")

    schema = Schema(
        curie=ID(stored=True, unique=True),
        label=TEXT(stored=True, analyzer=None), # Keep None analyzer for exact matches if needed, or use default
        synonyms=TEXT(stored=True),
        definition=TEXT(stored=True),
        relations_text=TEXT(stored=False)
    )

    os.makedirs(index_dir, exist_ok=True)
    
    try:
        # create_in will overwrite if index exists. If you want to open, use open_dir.
        ix = create_in(index_dir, schema)
        print(f"Whoosh index schema created in {index_dir}")
    except Exception as e:
         print(f"Error creating Whoosh index directory or schema: {e}")
         traceback.print_exc()
         return

    writer = ix.writer()
    try:
        with open(json_path, 'r', encoding='utf-8') as f:
            ontology_data = json.load(f)

        print(f"Indexing {len(ontology_data)} entities...")
        indexed_count = 0
        for curie, data in ontology_data.items():
            label = data.get('label', '') or '' # Ensure string
            synonyms_list = data.get('synonyms', [])
            synonyms = " ".join(s for s in synonyms_list if s) # Join non-empty synonyms

            definition = data.get('definition', '') or ''

            relations_text = ""
            relations_dict = data.get('relations', {})
            if relations_dict:
                 relations_text = " ".join([
                     f"{prop.replace('_', ' ')} {' '.join(targets)}" for prop, targets in relations_dict.items()
                 ])
            
            # Skip adding document if all text fields are empty (optional)
            # if not label and not synonyms and not definition and not relations_text:
            #     print(f"Skipping empty document for CURIE: {curie}")
            #     continue

            writer.add_document(
                curie=curie,
                label=label,
                synonyms=synonyms,
                definition=definition,
                relations_text=relations_text
            )
            indexed_count += 1
            if indexed_count % 1000 == 0:
                 print(f"Indexed {indexed_count} entities...")
        
        print(f"Committing index with {indexed_count} documents.")
        writer.commit()
        print("Lexical index built successfully.")

    except FileNotFoundError:
        print(f"Error: Ontology dump file not found at {json_path}")
        traceback.print_exc()
        writer.cancel() 
    except Exception as e:
        print(f"An error occurred during index building: {e}")
        traceback.print_exc()
        writer.cancel()

if __name__ == "__main__":
    if not os.path.exists(ONTOLOGY_DUMP_JSON):
        print(f"Error: Ontology dump file {ONTOLOGY_DUMP_JSON} not found.")
        print("Please run src/ingestion/parse_ontology.py first.")
    else:
        build_index(ONTOLOGY_DUMP_JSON, WHOOSH_INDEX_DIR)
--- END File: src/ingestion/build_lexical_index.py ---

--- File: src/ingestion/__init__.py ---

--- END File: src/ingestion/__init__.py ---

--- File: src/ingestion/parse_ontology.py ---
# src/ingestion/parse_ontology.py
import sys
import os
import logging # Import logging

# --- Add project root to sys.path ---
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
if project_root not in sys.path:
    sys.path.insert(0, project_root)
# --- End sys.path modification ---

import rdflib
from rdflib import Graph, Namespace, URIRef, RDFS, OWL, RDF
from typing import Dict, List, Any
import json
import traceback

# Now import using the 'src' package prefix
from src.config import (
    FOODON_PATH,                # Adjusted: Was ONTOLOGY_FILE
    ONTOLOGY_DUMP_JSON,         # Adjusted: Was ONTOLOGY_DUMP_PATH
    CURIE_PREFIX_MAP,           # Adjusted: Was NAMESPACE_MAP
    RELATION_CONFIG,            # New: For relation names
    TARGET_RELATIONS_CURIES,    # New: For relation URIs
    IAO_NS_STR,                 # Using string constants for Namespace definitions
    OBOINOWL_NS_STR,
    # Add other NS_STR if needed for local Namespace objects
)
# Assuming src.utils.ontology_utils is already correct and uses CURIE_PREFIX_MAP
from src.utils.ontology_utils import uri_to_curie, curie_to_uri

# --- Logging Setup ---
# Using basicConfig as src.utils.logging.get_logger is "to be developed"
# You can customize this further if needed.
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(module)s - %(message)s')
logger = logging.getLogger(__name__)


# Define commonly used namespaces (can still use these locally for convenience)
# It's safer to use the full URI string from config if available, or construct it.
IAO = Namespace(IAO_NS_STR)
OBOINOWL = Namespace(OBOINOWL_NS_STR)
# FOODON_BASE_URI = None # Find FOODON base URI from CURIE_PREFIX_MAP
# for base, prefix in CURIE_PREFIX_MAP.items():
#     if prefix == "FOODON":
#         FOODON_BASE_URI = base
#         break
# FOODON = Namespace(FOODON_BASE_URI) if FOODON_BASE_URI else None
# If FOODON Namespace object is not strictly needed for queries, direct URI construction is fine.

def load_ontology(path: str) -> rdflib.Graph:
    g = Graph()
    try:
        logger.info(f"Loading ontology from: {path}")
        try:
            g.parse(path, format="application/rdf+xml")
        except Exception as e_xml:
            logger.warning(f"Failed to parse as RDF/XML: {e_xml}. Trying Turtle...")
            try:
                g.parse(path, format="turtle")
            except Exception as e_ttl:
                logger.warning(f"Failed to parse as Turtle: {e_ttl}. Trying auto-detection...")
                g.parse(path)

        logger.info(f"Ontology loaded successfully. Contains {len(g)} triples.")
        return g
    except FileNotFoundError:
        logger.error(f"Error: Ontology file not found at {path}")
        raise
    except Exception as e:
        logger.error(f"Error parsing ontology file {path}: {e}")
        traceback.print_exc()
        raise

def get_ancestors(g: Graph, term_uri: URIRef, prefix_map: Dict[str, str], visited_uris: set = None) -> List[str]:
    if visited_uris is None:
        visited_uris = set()

    ancestor_curies = set()
    for parent_uri in g.objects(subject=term_uri, predicate=RDFS.subClassOf):
        if isinstance(parent_uri, URIRef) and parent_uri != OWL.Thing:
            if parent_uri not in visited_uris:
                visited_uris.add(parent_uri)
                # Pass the prefix_map explicitly
                parent_curie = uri_to_curie(parent_uri, prefix_map)
                if parent_curie and parent_curie != str(parent_uri):
                    ancestor_curies.add(parent_curie)
                    ancestor_curies.update(get_ancestors(g, parent_uri, prefix_map, visited_uris))
    return list(ancestor_curies)


def extract_labels_and_synonyms(g: Graph, prefix_map: Dict[str, str]) -> Dict[str, Dict[str, Any]]:
    data = {}
    relevant_predicates = [
        RDFS.label,
        OBOINOWL.hasExactSynonym, OBOINOWL.hasRelatedSynonym,
        OBOINOWL.hasNarrowSynonym, OBOINOWL.hasBroadSynonym
    ]
    
    processed_subjects = set()

    for pred in relevant_predicates:
        for s_uri in g.subjects(predicate=pred):
            if not isinstance(s_uri, URIRef) or s_uri in processed_subjects:
                continue
            
            # Pass the prefix_map explicitly
            curie = uri_to_curie(s_uri, prefix_map)
            # Optional: Filter for specific prefixes if desired, e.g., only FOODON, IAO, OBO terms.
            # This was present in your original script; keeping it commented for now for broader extraction.
            # if not any(curie.startswith(p) for p in ["FOODON:", "IAO:", "RO:", "BFO:", "obo:", "CHEBI:"]): # Example
            #     # logger.debug(f"Skipping non-ontology CURIE for labels/syns: {curie} from {s_uri}")
            #     continue
            if not curie or curie == str(s_uri): # Skip if not converted to a CURIE effectively
                continue

            if curie not in data:
                data[curie] = {"label": None, "synonyms": []}

            # Label
            label_val = g.value(subject=s_uri, predicate=RDFS.label)
            if label_val and isinstance(label_val, rdflib.Literal):
                data[curie]["label"] = str(label_val)

            # Synonyms
            current_synonyms = []
            for syn_prop in [OBOINOWL.hasExactSynonym, OBOINOWL.hasRelatedSynonym,
                             OBOINOWL.hasNarrowSynonym, OBOINOWL.hasBroadSynonym]:
                for syn_obj in g.objects(subject=s_uri, predicate=syn_prop):
                    if isinstance(syn_obj, rdflib.Literal):
                        current_synonyms.append(str(syn_obj))
            
            # Ensure synonyms list exists and extend uniquely
            if "synonyms" not in data[curie] or data[curie]["synonyms"] is None: # Handle if somehow becomes None
                data[curie]["synonyms"] = []
            for s in current_synonyms:
                if s not in data[curie]["synonyms"]:
                    data[curie]["synonyms"].append(s)

            processed_subjects.add(s_uri)
            
    final_data = {k: v for k, v in data.items() if v.get("label") or v.get("synonyms")}
    logger.info(f"Extracted labels and synonyms for {len(final_data)} terms.")
    return final_data


def extract_definitions(g: Graph, prefix_map: Dict[str, str]) -> Dict[str, str]:
    definitions = {}
    definition_prop_uri = IAO['0000115'] # IAO:0000115 is 'definition'
    for s_uri in g.subjects(predicate=definition_prop_uri):
        if not isinstance(s_uri, URIRef):
            continue
        
        # Pass the prefix_map explicitly
        curie = uri_to_curie(s_uri, prefix_map)
        # Optional: Filter for specific prefixes
        # if not any(curie.startswith(p) for p in ["FOODON:", "IAO:", "RO:", "BFO:", "obo:", "CHEBI:"]):
        #     # logger.debug(f"Skipping non-ontology CURIE for definitions: {curie} from {s_uri}")
        #     continue
        if not curie or curie == str(s_uri):
            continue
        
        def_obj = g.value(subject=s_uri, predicate=definition_prop_uri)
        if def_obj and isinstance(def_obj, rdflib.Literal):
            definitions[curie] = str(def_obj)
            
    logger.info(f"Extracted definitions for {len(definitions)} terms.")
    return definitions

def extract_hierarchy(g: Graph, prefix_map: Dict[str, str]) -> Dict[str, Dict[str, List[str]]]:
    hierarchy_data = {}
    all_terms_in_hierarchy = set()
    for s, p, o in g.triples((None, RDFS.subClassOf, None)):
        if isinstance(s, URIRef): all_terms_in_hierarchy.add(s)
        if isinstance(o, URIRef): all_terms_in_hierarchy.add(o)
    
    for term_uri in all_terms_in_hierarchy:
        if term_uri == OWL.Thing:
            continue

        # Pass the prefix_map explicitly
        curie = uri_to_curie(term_uri, prefix_map)
        # Optional: Filter
        # if not any(curie.startswith(p) for p in ["FOODON:", "IAO:", "RO:", "BFO:", "obo:", "CHEBI:"]):
        #     # logger.debug(f"Skipping non-ontology CURIE for hierarchy: {curie} from {term_uri}")
        #     continue
        if not curie or curie == str(term_uri):
            continue

        direct_parent_curies = []
        for parent_uri in g.objects(subject=term_uri, predicate=RDFS.subClassOf):
            if isinstance(parent_uri, URIRef) and parent_uri != OWL.Thing:
                # Pass the prefix_map explicitly
                parent_curie = uri_to_curie(parent_uri, prefix_map)
                if parent_curie and parent_curie != str(parent_uri):
                    direct_parent_curies.append(parent_curie)
        
        ancestor_curies = get_ancestors(g, term_uri, prefix_map, visited_uris=set())
        
        if direct_parent_curies or ancestor_curies:
            hierarchy_data[curie] = {
                "parents": list(set(direct_parent_curies)),
                "ancestors": list(set(ancestor_curies))
            }
            
    logger.info(f"Extracted hierarchy data for {len(hierarchy_data)} terms.")
    return hierarchy_data


# Adjusted to match outline: props_to_extract: Dict[str, str] (readable_name -> URI_string)
def extract_relations(g: Graph, props_to_extract: Dict[str, str], prefix_map: Dict[str, str]) -> Dict[str, Dict[str, List[str]]]:
    relations_data = {}
    
    for term_uri in g.subjects(unique=True):
        if not isinstance(term_uri, URIRef):
            continue

        # Pass the prefix_map explicitly
        curie = uri_to_curie(term_uri, prefix_map)
        # Optional: Filter
        # if not any(curie.startswith(p) for p in ["FOODON:", "IAO:", "RO:", "BFO:", "obo:", "CHEBI:"]):
        #     # logger.debug(f"Skipping non-ontology CURIE for relations: {curie} from {term_uri}")
        #     continue
        if not curie or curie == str(term_uri):
            continue

        term_specific_relations = {}
        for rel_readable_name, rel_uri_str in props_to_extract.items(): # rel_name is readable_name
            rel_uri = URIRef(rel_uri_str)
            target_curies = []
            for target_obj in g.objects(subject=term_uri, predicate=rel_uri):
                if isinstance(target_obj, URIRef):
                    # Pass the prefix_map explicitly
                    target_curie = uri_to_curie(target_obj, prefix_map)
                    if target_curie and target_curie != str(target_obj):
                        target_curies.append(target_curie)
            
            if target_curies:
                term_specific_relations[rel_readable_name] = list(set(target_curies))

        if term_specific_relations:
            relations_data[curie] = term_specific_relations
            
    logger.info(f"Extracted relations for {len(relations_data)} terms based on {len(props_to_extract)} specified properties.")
    return relations_data


def main():
    logger.info("Starting ontology parsing...")
    # Adjusted: Use ONTOLOGY_DUMP_JSON for output path
    data_dir = os.path.dirname(ONTOLOGY_DUMP_JSON)
    os.makedirs(data_dir, exist_ok=True)

    try:
        # Adjusted: Use FOODON_PATH as input ontology file
        g = load_ontology(FOODON_PATH)

        # Prepare relation properties for extract_relations
        # extract_relations expects: Dict[readable_name, full_uri_string]
        # RELATION_CONFIG has: {curie_str: {"label": readable_name, "prefix": prefix_str}}
        # TARGET_RELATIONS_CURIES is List[curie_str]
        
        relation_properties_for_extraction = {}
        for rel_curie_str in TARGET_RELATIONS_CURIES:
            if rel_curie_str in RELATION_CONFIG:
                config_entry = RELATION_CONFIG[rel_curie_str]
                readable_name = config_entry.get("label", rel_curie_str) # Fallback to CURIE if no label
                
                # Convert relation CURIE to full URI using curie_to_uri and CURIE_PREFIX_MAP
                full_rel_uri = curie_to_uri(rel_curie_str, CURIE_PREFIX_MAP)
                if full_rel_uri:
                    relation_properties_for_extraction[readable_name] = str(full_rel_uri)
                else:
                    logger.warning(f"Could not convert relation CURIE {rel_curie_str} to URI. Skipping this relation.")
            else:
                logger.warning(f"Relation CURIE {rel_curie_str} from TARGET_RELATIONS_CURIES not found in RELATION_CONFIG.")
        
        logger.info(f"Prepared {len(relation_properties_for_extraction)} relation properties for extraction.")


        logger.info("\nExtracting data...")
        # Pass CURIE_PREFIX_MAP to all extraction functions
        labels_synonyms = extract_labels_and_synonyms(g, CURIE_PREFIX_MAP)
        definitions = extract_definitions(g, CURIE_PREFIX_MAP)
        hierarchy = extract_hierarchy(g, CURIE_PREFIX_MAP)
        relations = extract_relations(g, relation_properties_for_extraction, CURIE_PREFIX_MAP)

        logger.info("\nMerging extracted data...")
        merged_data = {}
        all_curies = set(labels_synonyms.keys()) | \
                     set(definitions.keys()) | \
                     set(hierarchy.keys()) | \
                     set(relations.keys())

        for curie_key in all_curies:
            # No need to filter again here if extraction functions already did or if we want all extracted CURIEs
            merged_data[curie_key] = {
                "label": labels_synonyms.get(curie_key, {}).get("label"),
                "synonyms": labels_synonyms.get(curie_key, {}).get("synonyms", []),
                "definition": definitions.get(curie_key),
                "parents": hierarchy.get(curie_key, {}).get("parents", []),
                "ancestors": hierarchy.get(curie_key, {}).get("ancestors", []),
                "relations": relations.get(curie_key, {})
            }
        
        final_merged_data = {}
        for curie_key, data_dict in merged_data.items():
            if any(data_dict.values()): # Check if any value in the dict is non-empty/non-None
                final_merged_data[curie_key] = data_dict

        logger.info(f"\nTotal merged entities with some data: {len(final_merged_data)}")

        # Adjusted: Use ONTOLOGY_DUMP_JSON for output
        logger.info(f"Writing merged data to {ONTOLOGY_DUMP_JSON}")
        with open(ONTOLOGY_DUMP_JSON, 'w', encoding='utf-8') as f:
            json.dump(final_merged_data, f, indent=4, ensure_ascii=False)

        logger.info("Ontology parsing and data dump complete.")

    except FileNotFoundError:
        # Adjusted: Use FOODON_PATH in error message
        logger.error(f"Parsing aborted: Ontology file not found at {FOODON_PATH}")
        # traceback.print_exc() # Already handled by load_ontology
    except Exception as e:
        logger.error(f"An error occurred during parsing: {e}")
        traceback.print_exc()

if __name__ == "__main__":
    main()
--- END File: src/ingestion/parse_ontology.py ---

--- File: src/ingestion/enrich_documents.py ---
import json
import os
import logging
from typing import Dict, Any, List, Optional

# --- Start of corrected import block ---
import sys
# Calculate the project root directory based on the script's location
# For .../onto_rag/src/ingestion/enrich_documents.py, _PROJECT_ROOT becomes .../onto_rag
_PROJECT_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))

# Add the project root to sys.path if it's not already there
if _PROJECT_ROOT not in sys.path:
    sys.path.insert(0, _PROJECT_ROOT) # Insert at the beginning

try:
    from src import config
    # from src.utils.ontology_utils import curie_to_uri # This specific utility is not used in this script,
                                                      # but this is how you'd import it if needed.
except ModuleNotFoundError as e:
    print(f"CRITICAL ERROR: Could not import project modules. Exception: {e}")
    print(f"This script expects to be run in a way that the 'src' package is discoverable.")
    print(f"Attempted to add project root '{_PROJECT_ROOT}' to sys.path.")
    print(f"Current sys.path: {sys.path}")
    print("Please ensure you are running this script from the project's root directory ('onto_rag/'), for example:")
    print("  python src/ingestion/enrich_documents.py")
    print("Also ensure that 'src/__init__.py' and 'src/utils/__init__.py' (if using utils) exist.")
    sys.exit(1)

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def get_label_for_curie(curie: str, ontology_data: Dict[str, Dict[str, Any]], default_value: Optional[str] = None) -> Optional[str]:
    """
    Retrieves the label for a given CURIE from the ontology data.
    Args:
        curie: The CURIE string (e.g., "FOODON:00001234").
        ontology_data: The loaded ontology data dictionary.
        default_value: Value to return if CURIE not found or has no label. Defaults to the CURIE itself.
    Returns:
        The label string, or the default_value.
    """
    if default_value is None:
        default_value = curie # Fallback to CURIE if no specific default

    term_info = ontology_data.get(curie)
    if term_info and term_info.get("label"):
        return term_info["label"]
    return default_value

def get_relation_name(relation_curie: str) -> str:
    """
    Gets a human-readable name for a relation CURIE using RELATION_CONFIG.
    """
    # Exact match
    if relation_curie in config.RELATION_CONFIG:
        return config.RELATION_CONFIG[relation_curie]["label"]
    
    # Check for generic FoodON prefix if specific one not found
    generic_foodon_prefix = "obo:FOODON_"
    if relation_curie.startswith(generic_foodon_prefix) and generic_foodon_prefix in config.RELATION_CONFIG:
         # Attempt to make it slightly more readable if it's like "obo:FOODON_0000XXXX"
        relation_suffix = relation_curie.split('_')[-1]
        return f"FoodON relation {relation_suffix}" # or config.RELATION_CONFIG[generic_foodon_prefix]["label"]

    # Fallback for other OBO relations
    if relation_curie.startswith("obo:"):
        name_part = relation_curie.split(':')[-1].replace("_", " ")
        return name_part

    return relation_curie # Fallback to the CURIE itself

def create_enriched_documents(ontology_data_path: str, output_path: str) -> List[Dict[str, Any]]:
    """
    Creates enriched text documents for each ontology entry.
    Args:
        ontology_data_path: Path to the ontology_dump.json file.
        output_path: Path to save the enriched_documents.json file.
    Returns:
        A list of enriched document dictionaries.
    """
    logging.info(f"Loading ontology data from {ontology_data_path}...")
    try:
        with open(ontology_data_path, 'r', encoding='utf-8') as f:
            ontology_data = json.load(f)
    except FileNotFoundError:
        logging.error(f"Error: Ontology data file not found at {ontology_data_path}")
        return []
    except json.JSONDecodeError:
        logging.error(f"Error: Could not decode JSON from {ontology_data_path}")
        return []

    logging.info(f"Successfully loaded {len(ontology_data)} terms.")

    enriched_docs = []

    for term_curie, term_data in ontology_data.items():
        doc_parts = []

        # 1. Label
        label = term_data.get("label")
        if not label:
            logging.warning(f"Term {term_curie} has no label. Skipping for enriched document (or using CURIE as label).")
            # Consider if we want to enrich docs for terms without labels. For now, let's use CURIE if no label.
            label = term_curie 
        
        doc_parts.append(f"{label}.")

        # 2. Definition
        definition = term_data.get("definition")
        if definition:
            doc_parts.append(f"{definition}.")

        # 3. Synonyms
        synonyms = term_data.get("synonyms")
        if synonyms:
            synonyms_text = "; ".join(synonyms)
            doc_parts.append(f"Also known as: {synonyms_text}.")

        # 4. Parents (direct subclasses)
        parent_curies = term_data.get("parents", [])
        if parent_curies:
            parent_labels = [get_label_for_curie(p_curie, ontology_data) for p_curie in parent_curies]
            parent_labels_filtered = [l for l in parent_labels if l] # Filter out None if get_label_for_curie returns None
            if parent_labels_filtered:
                if len(parent_labels_filtered) == 1:
                    doc_parts.append(f"Is a type of: {parent_labels_filtered[0]}.")
                else:
                    doc_parts.append(f"Is a type of: {'; '.join(parent_labels_filtered)}.")
        
        # 5. Relations (including facets expressed as object properties)
        relations = term_data.get("relations", {})
        relation_texts = []
        for rel_curie, target_curies_list in relations.items():
            rel_name = get_relation_name(rel_curie)
            target_labels = [get_label_for_curie(t_curie, ontology_data) for t_curie in target_curies_list]
            target_labels_filtered = [l for l in target_labels if l]
            if target_labels_filtered:
                relation_texts.append(f"{rel_name}: {', '.join(target_labels_filtered)}")
        
        if relation_texts:
            doc_parts.append("Key characteristics include: " + "; ".join(relation_texts) + ".")

        # Combine all parts into a single text
        enriched_text = " ".join(doc_parts).replace("..", ".").strip() # Clean up potential double periods

        enriched_docs.append({
            "id": term_curie,
            "label": label if label != term_curie else term_data.get("label", term_curie), # Store original label if available
            "text": enriched_text
        })

    logging.info(f"Created {len(enriched_docs)} enriched documents.")

    logging.info(f"Saving enriched documents to {output_path}...")
    try:
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(enriched_docs, f, indent=2)
        logging.info("Successfully saved enriched documents.")
    except IOError:
        logging.error(f"Error: Could not write enriched documents to {output_path}")

    return enriched_docs

def main():
    """Main function to create enriched documents."""
    # Ensure data directory exists (though config.py should handle it)
    os.makedirs(config.DATA_DIR, exist_ok=True)

    enriched_documents = create_enriched_documents(
        ontology_data_path=config.ONTOLOGY_DUMP_JSON,
        output_path=config.ENRICHED_DOCUMENTS_FILE
    )

    if enriched_documents:
        logging.info(f"Processed {len(enriched_documents)} documents.")
        # Optionally print a sample
        if len(enriched_documents) > 0:
            logging.info("Sample enriched document:")
            logging.info(json.dumps(enriched_documents[0], indent=2))
    else:
        logging.warning("No enriched documents were created.")

if __name__ == "__main__":
    main()
--- END File: src/ingestion/enrich_documents.py ---

--- File: src/embeddings/embed_docs.py ---
import json
import os
import logging
import time
from typing import List, Dict, Any

# Ensure src is in path for imports if run directly
import sys
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))) # To import from src

try:
    from sentence_transformers import SentenceTransformer
    import torch 
except ModuleNotFoundError:
    logging.error("Modules sentence_transformers or torch not found. Please install them: pip install sentence-transformers torch")
    sys.exit(1)

try:
    from src import config # Use 'from src import config'
except ModuleNotFoundError:
    # Fallback for running script directly from src/embeddings where src might not be seen as a package root
    # This is less ideal but can help during direct script execution
    sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
    try:
        import config
    except ModuleNotFoundError:
        logging.error("Error: Could not import 'config'. "
                    "Ensure the script is run from the project root or 'src' is in PYTHONPATH.")
        sys.exit(1)


logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def load_enriched_documents(file_path: str) -> List[Dict[str, Any]]:
    """Loads enriched documents from a JSON file."""
    logging.info(f"Loading enriched documents from {file_path}...")
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            documents = json.load(f)
        logging.info(f"Successfully loaded {len(documents)} documents.")
        return documents
    except FileNotFoundError:
        logging.error(f"Error: Enriched documents file not found at {file_path}")
        return []
    except json.JSONDecodeError:
        logging.error(f"Error: Could not decode JSON from {file_path}")
        return []

def batch_embed_documents(
    documents: List[Dict[str, Any]], 
    model_name: str, 
    batch_size: int = 32,
    device: str = None
) -> List[Dict[str, Any]]:
    """
    Generates embeddings for a list of documents using a SentenceTransformer model.

    Args:
        documents: A list of dictionaries, each with at least "id", "label", and "text" keys.
        model_name: The name of the SentenceTransformer model to use.
        batch_size: The number of documents to process in each batch.
        device: The device to use for computation (e.g., "cuda", "cpu"). Auto-detects if None.

    Returns:
        A list of dictionaries, each containing "id", "label", and "embedding" (list of floats).
    """
    if not documents:
        logging.warning("No documents provided for embedding.")
        return []

    if device is None:
        device = "cuda" if torch.cuda.is_available() else "cpu"
    logging.info(f"Using device: {device}")

    logging.info(f"Loading SentenceTransformer model: {model_name}")
    try:
        model = SentenceTransformer(model_name, device=device, trust_remote_code=True)
    except Exception as e:
        logging.error(f"Failed to load model {model_name}: {e}")
        # Fallback to CPU if CUDA error during model loading (e.g. out of memory)
        if "cuda" in str(e).lower() and device == "cuda":
            logging.warning("CUDA error during model load. Attempting to load on CPU.")
            device = "cpu"
            model = SentenceTransformer(model_name, device=device, trust_remote_code=True)
        else:
            raise

    logging.info("Model loaded. Starting embedding process...")

    texts_to_embed = [doc.get("text", "") for doc in documents] # Get text, default to empty string if missing
    ids = [doc.get("id") for doc in documents]
    labels = [doc.get("label") for doc in documents]

    all_embeddings_data = []
    start_time = time.time()

    for i in range(0, len(texts_to_embed), batch_size):
        batch_texts = texts_to_embed[i:i+batch_size]
        batch_ids = ids[i:i+batch_size]
        batch_labels = labels[i:i+batch_size]

        logging.info(f"Processing batch {i//batch_size + 1}/{(len(texts_to_embed) -1)//batch_size + 1} (size: {len(batch_texts)})")
        
        try:
            embeddings = model.encode(batch_texts, convert_to_tensor=False, show_progress_bar=False) # Returns numpy array
            
            for idx, embedding in enumerate(embeddings):
                all_embeddings_data.append({
                    "id": batch_ids[idx],
                    "label": batch_labels[idx],
                    "embedding": embedding.tolist() # Convert numpy array to list for JSON serialization
                })
        except Exception as e:
            logging.error(f"Error embedding batch starting at index {i}: {e}")
            # Optionally, decide how to handle batch errors (e.g., skip batch, add placeholders)
            # For now, we'll just log and continue, resulting in missing embeddings for that batch.
            # To add placeholders:
            # for j in range(len(batch_texts)):
            #     all_embeddings_data.append({
            #         "id": batch_ids[j],
            #         "label": batch_labels[j],
            #         "embedding": None # Or a zero vector of correct dimensionality
            #     })


    end_time = time.time()
    logging.info(f"Embedding process completed for {len(all_embeddings_data)} documents in {end_time - start_time:.2f} seconds.")
    
    if hasattr(model, 'tokenizer') and hasattr(model.tokenizer, 'model_max_length'):
        logging.info(f"Model max sequence length: {model.tokenizer.model_max_length}")
    elif hasattr(model, 'max_seq_length'):
         logging.info(f"Model max sequence length: {model.max_seq_length}")


    return all_embeddings_data

def save_embeddings(embeddings_data: List[Dict[str, Any]], output_path: str):
    """Saves the embeddings data to a JSON file."""
    if not embeddings_data:
        logging.warning("No embeddings data to save.")
        return

    logging.info(f"Saving {len(embeddings_data)} embeddings to {output_path}...")
    try:
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(embeddings_data, f, indent=2) # Use indent for readability, can remove for smaller file size
        logging.info("Successfully saved embeddings.")
    except IOError:
        logging.error(f"Error: Could not write embeddings to {output_path}")
    except TypeError as e:
        logging.error(f"TypeError during JSON serialization: {e}. Check embedding data format.")


def main():
    """Main function to generate and save document embeddings."""
    # Ensure data directory exists
    os.makedirs(config.DATA_DIR, exist_ok=True)

    enriched_docs = load_enriched_documents(config.ENRICHED_DOCUMENTS_FILE)
    if not enriched_docs:
        logging.error("Failed to load enriched documents. Exiting.")
        return

    embeddings_data = batch_embed_documents(
        documents=enriched_docs,
        model_name=config.EMBEDDING_MODEL_NAME,
        batch_size=64 # Adjust batch size based on available VRAM/RAM
    )

    if embeddings_data:
        save_embeddings(embeddings_data, config.EMBEDDINGS_FILE)
        logging.info(f"Generated and saved {len(embeddings_data)} embeddings.")
        if embeddings_data:
            sample_embedding = embeddings_data[0]['embedding']
            logging.info(f"Sample embedding vector dimension: {len(sample_embedding) if sample_embedding else 'N/A'}")
            logging.info(f"Sample embedding data point: {json.dumps(embeddings_data[0], indent=2, default=lambda x: str(x)[:100])}") # Truncate long embedding
    else:
        logging.warning("No embeddings were generated.")

if __name__ == "__main__":
    main()
--- END File: src/embeddings/embed_docs.py ---

--- File: src/tests/test_lexical_index.py ---
import pytest
import os
import json
import tempfile
import shutil
from whoosh.index import open_dir
from whoosh.qparser import QueryParser

# Adjust path to import modules from src
import sys
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from ingestion.parse_ontology import main as parse_ontology_main # Need to run parsing first
from ingestion.build_lexical_index import build_index
import config # Need config to override paths

# Define a known CURIE and search terms from the test snippet
TEST_CURIE = "FOODON:00001100" # apple
TEST_LABEL = "apple"
TEST_SYNONYM = "eating apple"
TEST_DEFINITION_KEYWORD = "fruit" # Keyword from definition "The fruit of a Malus domestica tree."
TEST_RELATION_KEYWORD = "apple tree" # Keyword from relations_text (target label)


# Fixture to create a temporary directory for the test index
@pytest.fixture(scope="module")
def temp_index_dir():
    """Creates a temporary directory for the Whoosh index."""
    path = tempfile.mkdtemp(prefix="whoosh_test_index_")
    print(f"Created temp index dir: {path}")
    yield path
    print(f"Cleaning up temp index dir: {path}")
    shutil.rmtree(path)

# Fixture to run the full ingestion pipeline on the test snippet and build index
@pytest.fixture(scope="module")
def built_test_index(temp_index_dir):
    """Runs parse_ontology and build_index on the test snippet."""
    # Use temp files/dirs for test data and index
    with tempfile.NamedTemporaryFile(suffix=".json", delete=False) as tmp_json:
        test_json_path = tmp_json.name

    # Temporarily override config paths for the test
    original_ontology_file = config.ONTOLOGY_FILE
    original_dump_path = config.ONTOLOGY_DUMP_PATH
    original_index_dir = config.WHOOSH_INDEX_DIR

    config.ONTOLOGY_FILE = config.TEST_ONTOLOGY_FILE # Use the small test snippet
    config.ONTOLOGY_DUMP_PATH = test_json_path
    config.WHOOSH_INDEX_DIR = temp_index_dir

    try:
        # 1. Run parsing
        print("\nRunning parse_ontology_main for test index build...")
        parse_ontology_main()
        assert os.path.exists(test_json_path), "Ontology dump JSON not created!"

        # 2. Run index building
        print("\nRunning build_index for test index build...")
        build_index(test_json_path, temp_index_dir)
        assert os.path.exists(os.path.join(temp_index_dir, 'SCHEMA')), "Whoosh index not created!"

        # Yield the index directory path
        yield temp_index_dir

    finally:
        # Restore original paths
        config.ONTOLOGY_FILE = original_ontology_file
        config.ONTOLOGY_DUMP_PATH = original_dump_path
        config.WHOOSH_INDEX_DIR = original_index_dir
        # Clean up temporary JSON file
        if os.path.exists(test_json_path):
            os.unlink(test_json_path)


def test_index_exists(built_test_index):
    """Tests if the index directory was created and contains index files."""
    assert os.path.exists(built_test_index)
    assert os.path.exists(os.path.join(built_test_index, 'SCHEMA'))
    assert os.path.exists(os.path.join(built_test_index, 'MAIN')) # Or other index files

def test_query_by_label_exact(built_test_index):
    """Tests exact search on the label field."""
    ix = open_dir(built_test_index)
    searcher = ix.searcher()
    # Query the 'label' field
    parser = QueryParser("label", ix.schema)
    query = parser.parse(TEST_LABEL) # "apple"
    results = searcher.search(query)

    print(f"\nSearch results for '{TEST_LABEL}': {results}")

    assert len(results) > 0, f"No results found for '{TEST_LABEL}'"
    # Check if the expected CURIE is among the results, preferably the top one
    assert results[0]['curie'] == TEST_CURIE
    assert results[0]['label'] == TEST_LABEL # Verify stored label

    searcher.close()
    ix.close() # Close index readers/writers

def test_query_by_label_fuzzy(built_test_index):
    """Tests fuzzy search on the label field."""
    ix = open_dir(built_test_index)
    searcher = ix.searcher()
    parser = QueryParser("label", ix.schema)
    # Fuzzy search for "appl" (e.g. "appl~")
    query = parser.parse("appl~") # Whoosh fuzzy syntax
    results = searcher.search(query)

    print(f"\nFuzzy search results for 'appl~': {results}")

    assert len(results) > 0, "No results found for 'appl~'"
    assert results[0]['curie'] == TEST_CURIE
    assert results[0]['label'] == TEST_LABEL

    searcher.close()
    ix.close()

def test_query_by_synonym(built_test_index):
    """Tests search on the synonyms field."""
    ix = open_dir(built_test_index)
    searcher = ix.searcher()
    # Query the 'synonyms' field
    parser = QueryParser("synonyms", ix.schema)
    query = parser.parse(TEST_SYNONYM) # "eating apple"
    results = searcher.search(query)

    print(f"\nSearch results for synonym '{TEST_SYNONYM}': {results}")

    assert len(results) > 0, f"No results found for synonym '{TEST_SYNONYM}'"
    assert results[0]['curie'] == TEST_CURIE

    searcher.close()
    ix.close()

def test_query_by_definition_keyword(built_test_index):
    """Tests search on the definition field."""
    ix = open_dir(built_test_index)
    searcher = ix.searcher()
    # Query the 'definition' field
    parser = QueryParser("definition", ix.schema)
    query = parser.parse(TEST_DEFINITION_KEYWORD) # "fruit"
    results = searcher.search(query)

    print(f"\nSearch results for definition keyword '{TEST_DEFINITION_KEYWORD}': {results}")

    assert len(results) > 0, f"No results found for definition keyword '{TEST_DEFINITION_KEYWORD}'"
    assert results[0]['curie'] == TEST_CURIE

    searcher.close()
    ix.close()

def test_query_by_relations_keyword(built_test_index):
    """Tests search on the flattened relations_text field."""
    ix = open_dir(built_test_index)
    searcher = ix.searcher()
    # Query the 'relations_text' field
    parser = QueryParser("relations_text", ix.schema)
    # Search for a keyword expected in the relations_text (e.g., target's label or part of target's CURIE)
    # Note: Indexing targets as just CURIEs requires searching for 'FOODON:00001101'
    # Indexing target labels requires adding that logic in build_lexical_index
    # Let's assume for now we search for the CURIE or part of it if indexed as text
    # Or if we enhance build_index to add target labels to relations_text:
    # relations_text = " ".join([f"{prop}: {' '.join(targets)} {' '.join(target_labels)}" for ...])
    # For simplicity with current build_index, let's search the target CURIE part
    query = parser.parse("00001101") # Search part of the target CURIE FOODON:00001101
    results = searcher.search(query)

    print(f"\nSearch results for relations keyword '00001101': {results}")

    assert len(results) > 0, f"No results found for relations keyword '00001101'"
    assert results[0]['curie'] == TEST_CURIE

    searcher.close()
    ix.close()
--- END File: src/tests/test_lexical_index.py ---

--- File: src/tests/test_parse_ontology.py ---
import pytest
import os
import json
import rdflib
from rdflib import Graph

# Adjust path to import modules from src
import sys
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from ingestion.parse_ontology import (
    load_ontology,
    extract_labels_and_synonyms,
    extract_definitions,
    extract_hierarchy,
    extract_relations,
)
from config import TEST_ONTOLOGY_FILE, NAMESPACE_MAP, RELATION_PROPERTIES
from utils.ontology_utils import uri_to_curie # Import if needed for assertions

# Define a fixture to load the test graph once for all tests
@pytest.fixture(scope="module")
def test_graph():
    """Loads the test ontology snippet into a graph."""
    if not os.path.exists(TEST_ONTOLOGY_FILE):
        pytest.skip(f"Test ontology snippet not found at {TEST_ONTOLOGY_FILE}")
    try:
        return load_ontology(TEST_ONTOLOGY_FILE)
    except Exception as e:
        pytest.fail(f"Failed to load test ontology: {e}")

# Define a known CURIE from the test snippet
TEST_CURIE = "FOODON:00001100" # apple
TEST_CURIE_PARENT1 = "FOODON:00001000" # plant-based food
TEST_CURIE_PARENT2 = "FOODON:00002000" # Pome fruit
TEST_CURIE_RELATION_TARGET = "FOODON:00001101" # apple tree (example target)
TEST_RELATION_NAME = "part_of" # example relation name

def test_load_ontology(test_graph):
    """Tests if the ontology loads and is an RDFLib Graph."""
    assert isinstance(test_graph, Graph)
    assert len(test_graph) > 0, "Test graph is empty!"
    print(f"Loaded test graph with {len(test_graph)} triples.")


def test_extract_labels_and_synonyms(test_graph):
    """Tests extraction of labels and synonyms."""
    labels_synonyms = extract_labels_and_synonyms(test_graph)
    print(f"Extracted labels/synonyms: {labels_synonyms}")

    assert TEST_CURIE in labels_synonyms
    apple_data = labels_synonyms[TEST_CURIE]
    assert apple_data['label'] == "apple"
    assert "eating apple" in apple_data['synonyms']
    assert "apple fruit" in apple_data['synonyms']
    assert TEST_CURIE_PARENT1 in labels_synonyms # Should also extract its label/synonyms
    assert labels_synonyms[TEST_CURIE_PARENT1]['label'] == "plant-based food"


def test_extract_definitions(test_graph):
    """Tests extraction of definitions."""
    definitions = extract_definitions(test_graph)
    print(f"Extracted definitions: {definitions}")

    assert TEST_CURIE in definitions
    assert "The fruit of a Malus domestica tree." in definitions[TEST_CURIE] # Use 'in' for substring check or exact match


def test_extract_hierarchy(test_graph):
    """Tests extraction of hierarchy (parents and ancestors)."""
    hierarchy = extract_hierarchy(test_graph)
    print(f"Extracted hierarchy: {hierarchy}")

    assert TEST_CURIE in hierarchy
    apple_hierarchy = hierarchy[TEST_CURIE]

    # Check direct parents
    assert TEST_CURIE_PARENT1 in apple_hierarchy['parents']
    assert TEST_CURIE_PARENT2 in apple_hierarchy['parents']
    assert len(apple_hierarchy['parents']) >= 2 # At least 2 parents from the snippet

    # Check ancestors (should include parents and parents' ancestors)
    assert TEST_CURIE_PARENT1 in apple_hierarchy['ancestors']
    assert TEST_CURIE_PARENT2 in apple_hierarchy['ancestors']
    # Assuming plant-based food has no ancestors in this snippet, ancestors == parents here
    # If plant-based food had parents, they should appear in apple's ancestors.
    # For this snippet, ancestors should be the same as parents.
    assert set(apple_hierarchy['ancestors']) == set(apple_hierarchy['parents'])


def test_extract_relations(test_graph):
    """Tests extraction of specific relations."""
    relations = extract_relations(test_graph, RELATION_PROPERTIES)
    print(f"Extracted relations: {relations}")

    assert TEST_CURIE in relations
    apple_relations = relations[TEST_CURIE]

    # Check if the specific relation from the snippet was found
    assert TEST_RELATION_NAME in apple_relations
    assert TEST_CURIE_RELATION_TARGET in apple_relations[TEST_RELATION_NAME]
    assert len(apple_relations[TEST_RELATION_NAME]) >= 1


# You could add a test that runs the full main parsing flow using the test snippet
# and checks the structure/content of the resulting JSON file.
# Example (requires a temporary file):
# import tempfile
# @pytest.fixture
# def temp_json_path():
#     with tempfile.NamedTemporaryFile(suffix=".json", delete=False) as tmp:
#         yield tmp.name
#     os.unlink(tmp.name)
#
# def test_main_parsing_flow(temp_json_path):
#      # Temporarily override config paths for the test
#      original_ontology_file = config.ONTOLOGY_FILE
#      original_dump_path = config.ONTOLOGY_DUMP_PATH
#      config.ONTOLOGY_FILE = TEST_ONTOLOGY_FILE
#      config.ONTOLOGY_DUMP_PATH = temp_json_path
#
#      try:
#          parse_ontology.main()
#          assert os.path.exists(temp_json_path)
#          with open(temp_json_path, 'r', encoding='utf-8') as f:
#              data = json.load(f)
#
#          assert TEST_CURIE in data
#          apple_data = data[TEST_CURIE]
#          assert apple_data['label'] == 'apple'
#          assert 'synonyms' in apple_data and len(apple_data['synonyms']) > 0
#          assert 'definition' in apple_data and apple_data['definition'] is not None
#          assert 'parents' in apple_data and len(apple_data['parents']) > 0
#          assert 'ancestors' in apple_data and len(apple_data['ancestors']) > 0
#          assert 'relations' in apple_data and len(apple_data['relations']) > 0
#
#      finally:
#          # Restore original paths
#          config.ONTOLOGY_FILE = original_ontology_file
#          config.ONTOLOGY_DUMP_PATH = original_dump_path
--- END File: src/tests/test_parse_ontology.py ---

--- File: src/tests/__init__.py ---

--- END File: src/tests/__init__.py ---

--- File: src/utils/__init__.py ---

--- END File: src/utils/__init__.py ---

--- File: src/utils/ontology_utils.py ---
# src/utils/ontology_utils.py
import rdflib
from rdflib import URIRef, Namespace
from typing import Optional, Dict, Union

# Adjusted: Import CURIE_PREFIX_MAP and use it as the default.
# This assumes that the script/module *importing* ontology_utils
# has already ensured that the project root (e.g., 'onto_rag') is on sys.path,
# so that 'src' is resolvable as a top-level package.
from src.config import CURIE_PREFIX_MAP # Corrected import

def uri_to_curie(uri: Union[str, URIRef], namespace_map: Dict[str, str] = CURIE_PREFIX_MAP) -> str:
    """
    Converts a full URI to a CURIE (e.g., http://...#term -> PREFIX:term).
    Assumes namespace_map is structured as {base_uri_str: prefix_str}.
    """
    uri_str = str(uri) # Ensure it's a string

    # Iterate through the provided namespace_map (base_uri: prefix)
    # Sort by length of base_uri descending to match longest first (more specific)
    # This helps avoid issues where one base_uri is a prefix of another.
    # e.g., "http://purl.obolibrary.org/obo/" and "http://purl.obolibrary.org/obo/FOODON_"
    sorted_namespace_map_items = sorted(namespace_map.items(), key=lambda item: len(item[0]), reverse=True)

    for base_uri, prefix in sorted_namespace_map_items:
        if uri_str.startswith(base_uri):
            return f"{prefix}:{uri_str[len(base_uri):]}"

    # Fallback for common RDF/RDFS/OWL/XSD prefixes if not found in the main map
    # This local map is prefix: base_uri_str
    common_rdf_prefixes = {
        "rdf": str(rdflib.RDF),
        "rdfs": str(rdflib.RDFS),
        "owl": str(rdflib.OWL),
        "xsd": str(rdflib.XSD),
    }
    for prefix, base_uri in common_rdf_prefixes.items():
        if uri_str.startswith(base_uri):
            return f"{prefix}:{uri_str[len(base_uri):]}"
            
    # If rdflib can make a qname (usually for registered namespaces)
    try:
        g = rdflib.Graph()
        # Bind known namespaces to help compute_qname
        # For namespace_map (base_uri: prefix), we need to iterate as base_uri, prefix
        for ns_uri_str_from_map, prefix_from_map in namespace_map.items():
             g.bind(prefix_from_map, Namespace(ns_uri_str_from_map))

        # Bind common RDF ones too, in case they weren't in namespace_map or to ensure standard prefixes
        g.bind("owl", rdflib.OWL)
        g.bind("rdf", rdflib.RDF)
        g.bind("rdfs", rdflib.RDFS)
        g.bind("xsd", rdflib.XSD)

        # compute_qname might fail if the URI doesn't match any bound namespace's base
        # It returns (prefix, namespace_uri, local_name)
        qname_tuple = g.compute_qname(URIRef(uri_str))
        return f"{qname_tuple[0]}:{qname_tuple[2]}"
    except Exception: # Broad except as compute_qname can raise various things or return unexpected tuples
        pass # If rdflib fails, just return the original URI string

    return uri_str # If no CURIE conversion possible, return original URI string

def curie_to_uri(curie: str, namespace_map: Dict[str, str] = CURIE_PREFIX_MAP) -> Optional[URIRef]:
    """
    Converts a CURIE (e.g., PREFIX:term) to a full rdflib.URIRef.
    Assumes namespace_map is structured as {base_uri_str: prefix_str}.
    """
    if ':' not in curie:
        # Try to see if it's a default rdflib qname like "rdf:type" that rdflib can expand
        # This part might be less common if CURIEs are always expected with user-defined prefixes
        try:
            g = rdflib.Graph()
            # Bind namespaces from the map (base_uri: prefix)
            for ns_uri_str_from_map, prefix_from_map in namespace_map.items():
                g.bind(prefix_from_map, Namespace(ns_uri_str_from_map))
            # Bind common RDF ones
            g.bind("owl", rdflib.OWL)
            g.bind("rdf", rdflib.RDF)
            g.bind("rdfs", rdflib.RDFS)
            g.bind("xsd", rdflib.XSD)
            
            # If it's something like "owl:Class", g.namespace_manager.expand_curie will work
            expanded_uri = g.namespace_manager.expand_curie(curie)
            if str(expanded_uri) != curie: # Check if expansion actually happened
                 return URIRef(expanded_uri)
        except Exception:
            pass # If expansion fails, proceed to manual lookup
        return None # Not a valid CURIE format for our map, and rdflib couldn't expand

    prefix_part, local_name = curie.split(':', 1)

    # Iterate through namespace_map (base_uri: prefix) to find the matching prefix
    found_base_uri = None
    for base_uri_key, prefix_val in namespace_map.items():
        if prefix_val == prefix_part:
            found_base_uri = base_uri_key
            break
    
    if found_base_uri:
        return URIRef(found_base_uri + local_name)
    else:
        # Fallback: Try common RDF prefixes if not in the custom map
        # This local map is prefix: rdflib.Namespace object
        common_rdf_namespaces = {
            "rdf": rdflib.RDF,
            "rdfs": rdflib.RDFS,
            "owl": rdflib.OWL,
            "xsd": rdflib.XSD,
        }
        if prefix_part in common_rdf_namespaces:
            # Access items in the namespace like attributes: common_rdf_namespaces[prefix_part].type
            # or by string concatenation: URIRef(str(common_rdf_namespaces[prefix_part]) + local_name)
            return URIRef(str(common_rdf_namespaces[prefix_part]) + local_name)
        return None # Prefix not found in custom map or common RDF prefixes
--- END File: src/utils/ontology_utils.py ---

--- File: src/retriever/__init__.py ---

--- END File: src/retriever/__init__.py ---

--- File: src/retriever/hybrid_retriever.py ---
# src/retriever/hybrid_retriever.py
import json
import os
# import numpy as np # numpy is used by sentence_transformers and faiss internally
from whoosh.index import open_dir as open_whoosh_index
from whoosh.qparser import MultifieldParser, OrGroup
from sentence_transformers import SentenceTransformer

# --- Add project root to sys.path if running script directly ---
# This block is useful if you ever run this script directly (e.g., for debugging)
# and not as a module (python -m src.retriever.hybrid_retriever)
if __name__ == '__main__':
    import sys
    PROJECT_ROOT_FOR_DIRECT_RUN = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
    if PROJECT_ROOT_FOR_DIRECT_RUN not in sys.path:
        sys.path.insert(0, PROJECT_ROOT_FOR_DIRECT_RUN)
# --- End sys.path modification ---


from src.vector_store.faiss_store import FAISSVectorStore
from src.config import (
    ONTOLOGY_DUMP_JSON,
    WHOOSH_INDEX_DIR,
    FAISS_INDEX_PATH,
    FAISS_METADATA_PATH,
    EMBEDDING_MODEL_NAME,
    DEFAULT_K_LEXICAL,
    DEFAULT_K_VECTOR,
)
# from src.utils.logger import get_logger # Placeholder for future logging
# logger = get_logger(__name__) # Placeholder

class HybridRetriever:
    def __init__(self,
                 ontology_data_path=ONTOLOGY_DUMP_JSON,
                 whoosh_index_dir=WHOOSH_INDEX_DIR,
                 faiss_index_path=FAISS_INDEX_PATH,
                 faiss_metadata_path=FAISS_METADATA_PATH,
                 embedding_model_name=EMBEDDING_MODEL_NAME):
        """
        Initializes the HybridRetriever.
        """
        print(f"Initializing HybridRetriever...")
        # logger.info("Initializing HybridRetriever...")

        print(f"Loading ontology data from: {ontology_data_path}")
        if not os.path.exists(ontology_data_path):
            raise FileNotFoundError(f"Ontology data file not found: {ontology_data_path}")
        with open(ontology_data_path, 'r', encoding='utf-8') as f:
            self.ontology_data = json.load(f)
        print(f"Loaded {len(self.ontology_data)} ontology entries.")

        print(f"Loading Whoosh index from: {whoosh_index_dir}")
        if not os.path.exists(whoosh_index_dir) or not os.listdir(whoosh_index_dir):
            raise FileNotFoundError(f"Whoosh index directory not found or empty: {whoosh_index_dir}. Run ingestion scripts.")
        self.whoosh_ix = open_whoosh_index(whoosh_index_dir)
        self.whoosh_searcher = self.whoosh_ix.searcher()
        
        # Fields to search in Whoosh, must match the schema in build_lexical_index.py
        # 'relations_text' is indexed (stored=False) so it can be searched.
        # 'curie' is an ID field, typically not directly searched with MultifieldParser unless intended.
        self.whoosh_fields_to_search = ["label", "synonyms", "definition", "relations_text"]
        self.whoosh_parser = MultifieldParser(self.whoosh_fields_to_search, schema=self.whoosh_ix.schema, group=OrGroup)
        print("Whoosh index loaded.")

        print(f"Loading embedding model: {embedding_model_name}")
        self.embedding_model = SentenceTransformer(embedding_model_name, trust_remote_code=True)
        print("Embedding model loaded.")

        print(f"Initializing FAISS vector store (index: {faiss_index_path}, metadata: {faiss_metadata_path})...")
        self.faiss_store = FAISSVectorStore(
            index_path=faiss_index_path,
            metadata_path=faiss_metadata_path,
            embeddings_file_path=None 
        )
        if not self.faiss_store.index or not self.faiss_store.metadata:
            raise FileNotFoundError(f"FAISS index file '{faiss_index_path}' or metadata file '{faiss_metadata_path}' not found or empty. Please build it first.")
        print("FAISS vector store initialized.")
        
        print("HybridRetriever initialized successfully.")

    def _lexical_search(self, query_string, limit=DEFAULT_K_LEXICAL):
        """
        Performs lexical search using Whoosh.
        Returns a list of dicts: {'id': str, 'label': str, 'score': float, 'source': 'lexical', 'details': dict}
        """
        results = []
        if not query_string:
            return results

        try:
            query = self.whoosh_parser.parse(query_string)
            search_results = self.whoosh_searcher.search(query, limit=limit)
            
            for hit in search_results:
                hit_fields = hit.fields()  # Get all stored fields as a dictionary
                term_curie = hit_fields.get('curie') # *** CHANGED: 'id' to 'curie' ***

                if term_curie is None:
                    print(f"Warning: Lexical search hit found without a 'curie'. Hit details: {hit}")
                    # logger.warning(f"Lexical search hit found without a 'curie'. Hit details: {hit}")
                    continue

                # 'relations_text' is not stored, so it won't be in hit_fields.
                # We retrieve label, synonyms, definition if they were stored.
                retrieved_label = hit_fields.get('label')
                retrieved_synonyms_str = hit_fields.get('synonyms') # This will be a space-separated string
                retrieved_definition = hit_fields.get('definition')

                results.append({
                    "id": term_curie, # Keep 'id' as the key in the result for consistency with vector search
                    "label": retrieved_label if retrieved_label is not None else self.ontology_data.get(term_curie, {}).get('label', 'N/A'),
                    "score": hit.score, 
                    "source": "lexical",
                    "details": {
                        # Convert synonyms string back to list if needed, or keep as string
                        "retrieved_synonyms": retrieved_synonyms_str.split() if retrieved_synonyms_str else [], 
                        "retrieved_definition": retrieved_definition
                    }
                })
        except Exception as e:
            print(f"Error during lexical search for '{query_string}': {e}")
            # logger.error(f"Error during lexical search for '{query_string}': {e}", exc_info=True)
            import traceback
            traceback.print_exc() # Print full traceback for debugging
        return results

    def _vector_search(self, query_string, k=DEFAULT_K_VECTOR):
        """
        Performs vector search using FAISS.
        Returns a list of dicts: {'id': str, 'label': str, 'score': float, 'source': 'vector', 'details': dict}
        """
        results = []
        if not query_string:
            return results

        try:
            query_vector = self.embedding_model.encode([query_string], convert_to_numpy=True)
            distances, _, metadata_items = self.faiss_store.search(query_vector, k=k)
            
            for i in range(len(metadata_items)):
                term_id = metadata_items[i]['id'] # FAISS metadata stores 'id'
                results.append({
                    "id": term_id,
                    "label": metadata_items[i]['label'],
                    "score": float(distances[i]), 
                    "source": "vector",
                    "details": {}
                })
        except Exception as e:
            print(f"Error during vector search for '{query_string}': {e}")
            # logger.error(f"Error during vector search for '{query_string}': {e}", exc_info=True)
            import traceback
            traceback.print_exc() # Print full traceback for debugging
        return results

    def search(self, query_string, lexical_limit=DEFAULT_K_LEXICAL, vector_k=DEFAULT_K_VECTOR):
        """
        Performs hybrid search.
        """
        lexical_results = self._lexical_search(query_string, limit=lexical_limit)
        vector_results = self._vector_search(query_string, k=vector_k)
        
        return {
            "query": query_string,
            "lexical_results": lexical_results,
            "vector_results": vector_results,
        }

    def get_term_details(self, term_id):
        """
        Retrieves full details for a given term ID (CURIE) from the loaded ontology data.
        Returns a dictionary with all term details including the ID, or None if not found.
        """
        term_data = self.ontology_data.get(term_id)
        if term_data is not None:
            # Make a copy to avoid modifying the original data
            term_data = dict(term_data)
            # Add the ID to the returned data
            term_data['id'] = term_id
        return term_data

    def close(self):
        """
        Closes any open resources, like the Whoosh searcher.
        """
        if self.whoosh_searcher:
            self.whoosh_searcher.close()
        print("HybridRetriever resources closed.")

# Example Usage (for testing purposes)
if __name__ == '__main__':
    # This sys.path modification is now at the top of the file for when __name__ == '__main__'
    
    from src.config import PROJECT_ROOT # Import after sys.path is potentially modified
    print(f"Configured project root: {PROJECT_ROOT}")
    if not os.getcwd().startswith(PROJECT_ROOT) and os.getcwd() != PROJECT_ROOT:
         print(f"Warning: Current working directory ({os.getcwd()}) might not be the project root.")
         print("Consider running with 'python -m src.retriever.hybrid_retriever' from the project root directory.")

    print("Running HybridRetriever example...")
    retriever = None
    try:
        retriever = HybridRetriever()
        
        queries = ["GARLIC", "SALT", "GARBANZO", "TAHINI", "LEMON JUICE", "HONEY" ,"WATER", "OLIVE OIL", "ROSMARY", "HUMMUS"]
        
        for query in queries:
            print(f"\nSearching for: '{query}'")
            results = retriever.search(query, lexical_limit=3, vector_k=3)
            
            print("\n--- Lexical Results ---")
            if results["lexical_results"]:
                for res in results["lexical_results"]:
                    print(f"  ID: {res['id']}, Label: {res['label']}, Score (Whoosh): {res['score']:.4f}")
                    # print(f"    Details: {res['details']}") # Uncomment to see retrieved synonyms/def
            else:
                print("  No lexical results.")

            print("\n--- Vector Results ---")
            if results["vector_results"]:
                for res in results["vector_results"]:
                    print(f"  ID: {res['id']}, Label: {res['label']}, Score (L2 Distance): {res['score']:.4f}")
            else:
                print("  No vector results.")
            print("-" * 40)
            
    except FileNotFoundError as e:
        print(f"\nERROR: A required file was not found: {e}")
        print("Please ensure all data files (ontology_dump.json) and indices (Whoosh, FAISS) are correctly built and paths are set in src/config.py.")
        print("You might need to run the ingestion and embedding scripts first.")
    except Exception as e:
        print(f"\nAn unexpected error occurred during example run: {e}")
        import traceback
        traceback.print_exc()
    finally:
        if retriever:
            retriever.close()
--- END File: src/retriever/hybrid_retriever.py ---

--- File: src/vector_store/__init__.py ---

--- END File: src/vector_store/__init__.py ---

--- File: src/vector_store/faiss_store.py ---
# src/vector_store/faiss_store.py
import faiss
import json
import numpy as np
import os
from src.config import EMBEDDINGS_FILE # Default embeddings file to build from

# from src.utils.logger import get_logger # Placeholder for future logging
# logger = get_logger(__name__)

class FAISSVectorStore:
    def __init__(self, index_path, metadata_path, embeddings_file_path=None, dimension=None):
        """
        Initializes the FAISSVectorStore.
        Tries to load an existing index and metadata. If not found, and an
        embeddings_file_path is provided, it will attempt to build them.

        Args:
            index_path (str): Path to save/load the FAISS index file (.bin).
            metadata_path (str): Path to save/load the metadata JSON file (.json).
            embeddings_file_path (str, optional): Path to the 'embeddings.json' file.
                                                  Used only if the index/metadata needs to be built.
                                                  Defaults to config.EMBEDDINGS_FILE.
            dimension (int, optional): The dimension of the vectors.
                                       Required if building the index and it cannot be inferred.
                                       Usually inferred from the first embedding.
        """
        self.index_path = index_path
        self.metadata_path = metadata_path
        self.embeddings_file_path = embeddings_file_path if embeddings_file_path else EMBEDDINGS_FILE
        self.dimension = dimension

        self.index = None
        self.metadata = []  # List of dicts, e.g., [{'id': 'FOODON_123', 'label': 'Apple'}, ...]

        if os.path.exists(self.index_path) and os.path.exists(self.metadata_path):
            print(f"Loading existing FAISS index from {self.index_path} and metadata from {self.metadata_path}")
            # logger.info(f"Loading existing FAISS index from {self.index_path} and metadata from {self.metadata_path}")
            try:
                self.load_store()
            except Exception as e:
                print(f"Error loading existing FAISS store: {e}. Will attempt to build if embeddings file provided.")
                # logger.error(f"Error loading existing FAISS store: {e}. Will attempt to build if embeddings file provided.", exc_info=True)
                self._try_build_store()
        elif self.embeddings_file_path and os.path.exists(self.embeddings_file_path):
            print(f"FAISS index/metadata not found. Attempting to build from {self.embeddings_file_path}")
            # logger.info(f"FAISS index/metadata not found. Attempting to build from {self.embeddings_file_path}")
            self._try_build_store()
        else:
            message = "FAISS index/metadata not found. "
            if self.embeddings_file_path:
                message += f"Embeddings file {self.embeddings_file_path} also not found or not specified for building."
            else:
                message += "No embeddings file path provided to build a new store."
            print(f"Warning: {message}")
            # logger.warning(message)

    def _try_build_store(self):
        """Helper method to attempt building the store."""
        embeddings_data = self._load_embeddings_data()
        if embeddings_data:
            self.build_index_from_embeddings(embeddings_data)
            if self.index and self.metadata: # Check if build was successful
                 self.save_store()
            else:
                print("Warning: FAISS index or metadata not built successfully from embeddings data.")
                # logger.warning("FAISS index or metadata not built successfully from embeddings data.")
        else:
            print(f"Warning: No embeddings data loaded from {self.embeddings_file_path}, FAISS index not built.")
            # logger.warning(f"No embeddings data loaded from {self.embeddings_file_path}, FAISS index not built.")


    def _load_embeddings_data(self):
        """
        Loads embeddings data from the specified JSON file.
        Expected format: list of {'id': str, 'label': str, 'embedding': list[float]}
        """
        if not self.embeddings_file_path or not os.path.exists(self.embeddings_file_path):
            print(f"Error: Embeddings file not found: {self.embeddings_file_path}")
            # logger.error(f"Embeddings file not found: {self.embeddings_file_path}")
            return None
        try:
            with open(self.embeddings_file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
            # Sanity check the data structure
            if not isinstance(data, list) or not data:
                print(f"Error: Embeddings file {self.embeddings_file_path} is empty or not a list.")
                # logger.error(f"Embeddings file {self.embeddings_file_path} is empty or not a list.")
                return None
            if not all('id' in item and 'label' in item and 'embedding' in item for item in data):
                print(f"Error: Embeddings data in {self.embeddings_file_path} has incorrect format.")
                # logger.error(f"Embeddings data in {self.embeddings_file_path} has incorrect format.")
                return None

            print(f"Loaded {len(data)} embeddings from {self.embeddings_file_path}")
            # logger.info(f"Loaded {len(data)} embeddings from {self.embeddings_file_path}")
            return data
        except json.JSONDecodeError as e:
            print(f"Error decoding JSON from embeddings file {self.embeddings_file_path}: {e}")
            # logger.error(f"Error decoding JSON from embeddings file {self.embeddings_file_path}: {e}", exc_info=True)
            return None
        except Exception as e:
            print(f"An unexpected error occurred while loading embeddings file {self.embeddings_file_path}: {e}")
            # logger.error(f"An unexpected error occurred while loading embeddings file {self.embeddings_file_path}: {e}", exc_info=True)
            return None

    def build_index_from_embeddings(self, embeddings_data):
        """
        Builds the FAISS index and prepares metadata from loaded embeddings data.

        Args:
            embeddings_data (list): List of dictionaries, where each dict has
                                    'id', 'label', and 'embedding' keys.
        """
        if not embeddings_data:
            print("Warning: No embeddings data provided to build_index_from_embeddings.")
            # logger.warning("No embeddings data provided to build_index_from_embeddings.")
            return

        vectors = []
        current_metadata = [] # Use a temporary list to build metadata
        for item in embeddings_data:
            vectors.append(item['embedding'])
            current_metadata.append({'id': item['id'], 'label': item['label']})

        if not vectors:
            print("Warning: No vectors extracted from embeddings_data.")
            # logger.warning("No vectors extracted from embeddings_data.")
            return

        vectors_np = np.array(vectors).astype('float32')

        if self.dimension is None:
            self.dimension = vectors_np.shape[1]
        elif self.dimension != vectors_np.shape[1]:
            err_msg = f"Provided dimension {self.dimension} does not match embeddings dimension {vectors_np.shape[1]}"
            print(f"Error: {err_msg}")
            # logger.error(err_msg)
            raise ValueError(err_msg)

        # Using IndexFlatL2, a simple L2 distance index.
        # For larger datasets, more advanced indexes like IndexIVFFlat might be better.
        try:
            self.index = faiss.IndexFlatL2(self.dimension)
            self.index.add(vectors_np)
            self.metadata = current_metadata # Assign once build is successful
            print(f"FAISS index built successfully with {self.index.ntotal} vectors of dimension {self.dimension}.")
            # logger.info(f"FAISS index built successfully with {self.index.ntotal} vectors of dimension {self.dimension}.")
        except Exception as e:
            print(f"Error building FAISS index: {e}")
            # logger.error(f"Error building FAISS index: {e}", exc_info=True)
            self.index = None # Ensure index is None if build fails
            self.metadata = []


    def save_store(self):
        """Saves the FAISS index and metadata to their respective files."""
        if self.index is None:
            print("Warning: No FAISS index to save.")
            # logger.warning("No FAISS index to save.")
            return # Do not save metadata if index is not there or failed to build

        os.makedirs(os.path.dirname(self.index_path), exist_ok=True)
        faiss.write_index(self.index, self.index_path)
        print(f"FAISS index saved to {self.index_path}")
        # logger.info(f"FAISS index saved to {self.index_path}")

        if not self.metadata:
            print("Warning: No FAISS metadata to save (metadata list is empty).")
            # logger.warning("No FAISS metadata to save (metadata list is empty).")
            # If index exists but metadata is empty, this is an inconsistent state.
            # Depending on strictness, one might choose to not save the index either,
            # or clear the index file if it exists. For now, we save index if it exists.
            return

        os.makedirs(os.path.dirname(self.metadata_path), exist_ok=True)
        with open(self.metadata_path, 'w', encoding='utf-8') as f:
            json.dump(self.metadata, f, indent=4)
        print(f"FAISS metadata saved to {self.metadata_path}")
        # logger.info(f"FAISS metadata saved to {self.metadata_path}")

    def load_store(self):
        """Loads the FAISS index and metadata from files."""
        if not os.path.exists(self.index_path):
            # logger.error(f"FAISS index file not found: {self.index_path}")
            raise FileNotFoundError(f"FAISS index file not found: {self.index_path}")
        self.index = faiss.read_index(self.index_path)
        if self.dimension is None: # Infer dimension if not set
            self.dimension = self.index.d
        elif self.dimension != self.index.d: # Check consistency
            # logger.warning(f"Stored index dimension {self.index.d} differs from configured {self.dimension}. Using stored.")
            print(f"Warning: Stored index dimension {self.index.d} differs from configured {self.dimension}. Using stored.")
            self.dimension = self.index.d

        print(f"FAISS index loaded from {self.index_path}. Index has {self.index.ntotal} vectors of dim {self.index.d}.")
        # logger.info(f"FAISS index loaded from {self.index_path}. Index has {self.index.ntotal} vectors of dim {self.index.d}.")

        if not os.path.exists(self.metadata_path):
            # logger.error(f"FAISS metadata file not found: {self.metadata_path}")
            raise FileNotFoundError(f"FAISS metadata file not found: {self.metadata_path}")
        with open(self.metadata_path, 'r', encoding='utf-8') as f:
            self.metadata = json.load(f)
        print(f"FAISS metadata loaded from {self.metadata_path}. {len(self.metadata)} items.")
        # logger.info(f"FAISS metadata loaded from {self.metadata_path}. {len(self.metadata)} items.")

        if self.index and self.metadata and self.index.ntotal != len(self.metadata):
            mismatch_msg = (f"Mismatch between FAISS index size ({self.index.ntotal}) "
                            f"and metadata size ({len(self.metadata)}). This may lead to errors.")
            print(f"Warning: {mismatch_msg}")
            # logger.warning(mismatch_msg)
            # Potentially raise an error or try to reconcile, for now, just warn.

    def search(self, query_vector, k=5):
        """
        Performs a K-Nearest Neighbors search on the FAISS index.

        Args:
            query_vector (np.ndarray): A 2D numpy array of shape (num_queries, dimension)
                                       or a 1D numpy array (single query).
            k (int): The number of nearest neighbors to retrieve.

        Returns:
            tuple: (distances, indices, metadata_items)
                   distances (np.ndarray): Distances to the k nearest neighbors.
                   indices (np.ndarray): FAISS internal indices of the k nearest neighbors.
                   metadata_items (list of lists or list of dicts): Corresponding metadata for the results.
                                     If single query, returns list of dicts. If multiple, list of lists of dicts.
        """
        if self.index is None:
            print("Error: FAISS index not initialized. Cannot perform search.")
            # logger.error("FAISS index not initialized. Cannot perform search.")
            return np.array([]), np.array([]), []

        if not isinstance(query_vector, np.ndarray):
            query_vector = np.array(query_vector)

        if query_vector.ndim == 1: # Single query vector
            query_vector = np.expand_dims(query_vector, axis=0)
        
        if query_vector.shape[1] != self.index.d:
            err_msg = f"Query vector dimension ({query_vector.shape[1]}) does not match index dimension ({self.index.d})."
            print(f"Error: {err_msg}")
            # logger.error(err_msg)
            raise ValueError(err_msg)

        distances, faiss_indices = self.index.search(query_vector.astype('float32'), k)
        
        # faiss_indices will be shape (num_queries, k)
        # distances will be shape (num_queries, k)
        
        all_results_metadata = []
        for i in range(faiss_indices.shape[0]): # Iterate over queries
            query_results_metadata = []
            for j in range(faiss_indices.shape[1]): # Iterate over k results for that query
                idx = faiss_indices[i][j]
                if idx != -1 and idx < len(self.metadata): # faiss_index can be -1 if k > ntotal
                    query_results_metadata.append(self.metadata[idx])
                # else: could append a placeholder, or log. For now, items are just shorter if fewer than k found.
            all_results_metadata.append(query_results_metadata)
        
        # For a single query_vector (most common use case here), return the inner list directly.
        if query_vector.shape[0] == 1:
            return distances[0], faiss_indices[0], all_results_metadata[0]
        else: # If multiple query vectors were passed
            return distances, faiss_indices, all_results_metadata

# Example usage / test function
if __name__ == '__main__':
    from src.vector_store.faiss_store import FAISSVectorStore
    from src.config import FAISS_INDEX_PATH, FAISS_METADATA_PATH

    # remove old files so the class knows it has to build
    import os, pathlib, json
    for p in (FAISS_INDEX_PATH, FAISS_METADATA_PATH):
        pathlib.Path(p).unlink(missing_ok=True)

    store = FAISSVectorStore(
        index_path     = FAISS_INDEX_PATH,
        metadata_path  = FAISS_METADATA_PATH,
        # embeddings_file_path=None  → default picks data/embeddings.json
        # dimension=None            → it will infer 384 automatically
    )
    print(f"Built FAISS index with {store.index.ntotal} vectors of dim {store.index.d}")
--- END File: src/vector_store/faiss_store.py ---

--- File: src/evaluation/evaluate_retriever_recall.py ---
# src/evaluation/evaluate_retriever_recall.py

import xml.etree.ElementTree as ET
import os
import sys
import logging
from collections import defaultdict

# Add project root to Python path to allow direct imports from src
PROJECT_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
sys.path.append(PROJECT_ROOT)

from src.retriever.hybrid_retriever import HybridRetriever
from src.config import (
    ONTOLOGY_DUMP_JSON,
    WHOOSH_INDEX_DIR,
    FAISS_INDEX_PATH,
    FAISS_METADATA_PATH,
    EMBEDDING_MODEL_NAME,
    CURIE_PREFIX_MAP,
    DEFAULT_K_LEXICAL,
    DEFAULT_K_VECTOR,
    DEFAULT_RERANK_K
)
from src.utils.ontology_utils import uri_to_curie

# --- Configuration for this specific evaluation script ---
# Path to your evaluation XML file
EVALUATION_XML_FILE = os.path.join(PROJECT_ROOT, "data", "CafeteriaFCD_foodon.xml")
# Top K results from the combined retriever output to consider for a match
RECALL_AT_K = DEFAULT_RERANK_K # How many retrieved items to check for a match

# --- Logging Setup ---
# Stays with basicConfig as src.utils.logging.get_logger is "to be developed"
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def parse_evaluation_xml(xml_file_path: str) -> list:
    """
    Parses the evaluation XML file to extract entities and their ground truth semantic tags.

    Args:
        xml_file_path (str): Path to the XML file.

    Returns:
        list: A list of dictionaries, each containing:
              {'text': str, 'true_curies': set_of_str, 'doc_id': str, 'ann_id': str}
              Returns an empty list if parsing fails.
    """
    if not os.path.exists(xml_file_path):
        logger.error(f"Evaluation XML file not found: {xml_file_path}")
        return []

    gold_standard_data = []
    try:
        tree = ET.parse(xml_file_path)
        root = tree.getroot()
        for doc_idx, document_node in enumerate(root.findall('.//document')):
            doc_id_node = document_node.find('id')
            doc_id = doc_id_node.text if doc_id_node is not None else f"doc_{doc_idx}"
            
            annotations = document_node.findall('annotation')
            for ann_idx, annotation_node in enumerate(annotations):
                entity_text_node = annotation_node.find('text')
                semantic_tags_node = annotation_node.find('infon[@key="semantic_tags"]')
                ann_id_val = annotation_node.get('id', f"ann_{doc_idx}_{ann_idx}")


                if entity_text_node is not None and semantic_tags_node is not None and entity_text_node.text is not None and semantic_tags_node.text is not None:
                    entity_text = entity_text_node.text.strip()
                    
                    raw_tags = semantic_tags_node.text.strip()
                    true_uris = {tag.strip() for tag in raw_tags.split(';') if tag.strip()}
                    
                    true_curies = set()
                    for uri in true_uris:
                        try:
                            # Adjusted: Use CURIE_PREFIX_MAP
                            curie = uri_to_curie(uri, CURIE_PREFIX_MAP)
                            if curie: 
                                true_curies.add(curie)
                            else:
                                logger.warning(f"Could not convert URI to CURIE: {uri} for entity '{entity_text}' in {doc_id} (ann: {ann_id_val})")
                        except Exception as e:
                            logger.error(f"Error converting URI {uri} to CURIE: {e}")
                    
                    if entity_text and true_curies:
                        gold_standard_data.append({
                            'text': entity_text,
                            'true_curies': true_curies,
                            'doc_id': doc_id,
                            'ann_id': ann_id_val
                        })
                    elif entity_text: # Has text but no convertible true CURIEs
                        logger.warning(f"Entity '{entity_text}' in {doc_id} (ann: {ann_id_val}) had no convertible true CURIEs from URIs: {true_uris}")

                # else: # This can be too verbose if many annotations don't have these specific fields
                #     logger.debug(f"Annotation missing text or semantic_tags in {doc_id}, ann_id={ann_id_val}")


    except ET.ParseError as e:
        logger.error(f"Error parsing XML file {xml_file_path}: {e}")
        return []
    except Exception as e:
        logger.error(f"An unexpected error occurred during XML parsing: {e}", exc_info=True)
        return []
        
    logger.info(f"Successfully parsed {len(gold_standard_data)} entities with text and true CURIEs from {xml_file_path}")
    return gold_standard_data

def evaluate_retriever(retriever: HybridRetriever, gold_standard_data: list, recall_at_k: int, lexical_k: int, vector_k: int) -> tuple[float, int, int]:
    """
    Evaluates the retriever against the gold standard data.

    Args:
        retriever (HybridRetriever): The initialized hybrid retriever.
        gold_standard_data (list): List of gold standard entities and their CURIEs.
        recall_at_k (int): The K value for Recall@K (slice of combined results).
        lexical_k (int): Number of results to fetch from lexical search.
        vector_k (int): Number of results to fetch from vector search.

    Returns:
        tuple: (recall_score, total_entities_processed, hits)
    """
    total_entities_processed = 0
    hits = 0
    
    if not gold_standard_data:
        logger.warning("No gold standard data provided for evaluation.")
        return 0.0, 0, 0

    for i, item in enumerate(gold_standard_data):
        query_text = item['text']
        true_curies = item['true_curies']
        
        if not query_text or not true_curies:
            # This should ideally be filtered by parse_evaluation_xml already
            logger.warning(f"Skipping item with empty query text or true_curies: {item}")
            continue
            
        total_entities_processed += 1
        
        logger.debug(f"({i+1}/{len(gold_standard_data)}) Querying for: '{query_text}', True CURIEs: {true_curies}")

        try:
            # Adjusted: HybridRetriever.search returns a dict: {"lexical_results": [], "vector_results": []}
            retriever_output_dict = retriever.search(
                query_string=query_text,
                lexical_limit=lexical_k,
                vector_k=vector_k
            )
            
            lexical_results = retriever_output_dict.get("lexical_results", [])
            vector_results = retriever_output_dict.get("vector_results", [])

            # Combine and deduplicate results, lexical first then vector.
            # Scores are not comparable, so this is a simple merge strategy.
            # The 'id' field from result dicts contains the CURIE.
            combined_ordered_results = []
            seen_ids = set()

            for doc in lexical_results:
                doc_id = doc.get('id') # 'id' is the CURIE
                if doc_id and doc_id not in seen_ids:
                    combined_ordered_results.append(doc) # doc contains 'id', 'label', 'score', etc.
                    seen_ids.add(doc_id)
            
            for doc in vector_results:
                doc_id = doc.get('id') # 'id' is the CURIE
                if doc_id and doc_id not in seen_ids:
                    combined_ordered_results.append(doc)
                    seen_ids.add(doc_id)
            
            # Extract the CURIEs from the top `recall_at_k` combined documents
            # Adjusted: use doc['id'] as it stores the CURIE
            retrieved_curies_set = {doc['id'] for doc in combined_ordered_results[:recall_at_k]}
            logger.debug(f"Retrieved CURIEs (top {recall_at_k} from combined): {retrieved_curies_set}")

            if not true_curies.isdisjoint(retrieved_curies_set):
                hits += 1
                logger.info(f"HIT! Query: '{query_text}'. True: {true_curies}. Found in top {recall_at_k}: {true_curies.intersection(retrieved_curies_set)}")
            else:
                logger.info(f"MISS. Query: '{query_text}'. True: {true_curies}. Top {recall_at_k} (combined) CURIEs: {retrieved_curies_set}")
                # For misses, log more details if needed, e.g. full combined_ordered_results
                # logger.debug(f"Full combined/ordered results for miss: {combined_ordered_results}")


        except Exception as e:
            logger.error(f"Error during retrieval or processing for query '{query_text}': {e}", exc_info=True)
            
    if total_entities_processed == 0:
        logger.warning("No valid entities were processed for evaluation.")
        return 0.0, 0, 0
        
    recall_score = hits / total_entities_processed
    return recall_score, total_entities_processed, hits

def main():
    logger.info("Starting Retriever Evaluation Script...")

    # 1. Parse the Gold Standard XML
    logger.info(f"Loading gold standard data from: {EVALUATION_XML_FILE}")
    gold_standard_data = parse_evaluation_xml(EVALUATION_XML_FILE)
    if not gold_standard_data:
        logger.error("Failed to load or parse gold standard data. Exiting.")
        return

    # 2. Initialize the HybridRetriever
    logger.info("Initializing HybridRetriever...")
    try:
        # Ensure all paths are valid and files exist where expected by HybridRetriever
        # Adjusted: Use ONTOLOGY_DUMP_JSON for ontology_data_path
        if not os.path.exists(ONTOLOGY_DUMP_JSON):
            logger.error(f"Ontology dump not found: {ONTOLOGY_DUMP_JSON}. Run ingestion pipeline.")
            return
        if not os.path.exists(WHOOSH_INDEX_DIR) or not os.listdir(WHOOSH_INDEX_DIR): # Check if dir exists and is not empty
             logger.error(f"Whoosh index directory is empty or not found: {WHOOSH_INDEX_DIR}. Run ingestion pipeline.")
             return
        if not os.path.exists(FAISS_INDEX_PATH):
            logger.error(f"FAISS index not found: {FAISS_INDEX_PATH}. Run ingestion pipeline.")
            return
        if not os.path.exists(FAISS_METADATA_PATH):
            logger.error(f"FAISS metadata not found: {FAISS_METADATA_PATH}. Run ingestion pipeline.")
            return

        retriever = HybridRetriever(
            ontology_data_path=ONTOLOGY_DUMP_JSON, # Adjusted
            whoosh_index_dir=WHOOSH_INDEX_DIR,
            faiss_index_path=FAISS_INDEX_PATH,
            faiss_metadata_path=FAISS_METADATA_PATH,
            embedding_model_name=EMBEDDING_MODEL_NAME
        )
        logger.info("HybridRetriever initialized successfully.")
    except Exception as e:
        logger.error(f"Failed to initialize HybridRetriever: {e}", exc_info=True)
        return

    # 3. Perform Evaluation
    logger.info(f"Starting evaluation with Recall@{RECALL_AT_K}...")
    # Adjusted: Use DEFAULT_K_LEXICAL and DEFAULT_K_VECTOR
    logger.info(f"HybridRetriever search params: Lexical K={DEFAULT_K_LEXICAL}, Vector K={DEFAULT_K_VECTOR}")
    
    recall_score, total_entities, hits = evaluate_retriever(
        retriever, 
        gold_standard_data, 
        recall_at_k=RECALL_AT_K,
        lexical_k=DEFAULT_K_LEXICAL, # Adjusted
        vector_k=DEFAULT_K_VECTOR    # Adjusted
    )

    # 4. Print Results
    logger.info("--- Evaluation Results ---")
    logger.info(f"Total entities processed: {total_entities}")
    logger.info(f"Number of hits (at least one true CURIE found in top {RECALL_AT_K} combined results): {hits}")
    if total_entities > 0:
        logger.info(f"Recall@{RECALL_AT_K}: {recall_score:.4f}")
    else:
        logger.info("Recall not calculated as no entities were processed.")

    # 5. Clean up
    try:
        if hasattr(retriever, 'close') and callable(retriever.close):
            retriever.close()
            logger.info("Retriever resources closed.")
    except Exception as e:
        logger.error(f"Error closing retriever resources: {e}")

if __name__ == "__main__":
    eval_dir = os.path.dirname(EVALUATION_XML_FILE)
    if not os.path.exists(eval_dir):
        try:
            os.makedirs(eval_dir)
            logger.info(f"Created directory: {eval_dir}")
            logger.info(f"Please place '{os.path.basename(EVALUATION_XML_FILE)}' in {eval_dir} to run the evaluation.")
        except OSError as e:
            logger.error(f"Failed to create directory {eval_dir}: {e}")
            sys.exit(1) # Exit if cannot create data directory for eval file
    
    if not os.path.exists(EVALUATION_XML_FILE):
        logger.error(f"Evaluation XML file '{EVALUATION_XML_FILE}' not found. Please place it in the correct directory.")
    else:
        main()
--- END File: src/evaluation/evaluate_retriever_recall.py ---

--- File: src/evaluation/evaluate_pipeline.py ---
# src/evaluation/evaluate_pipeline.py

import xml.etree.ElementTree as ET
import os
import sys
import logging
import json
from typing import Tuple, List, Dict

# Add project root to Python path to allow direct imports from src
PROJECT_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
sys.path.append(PROJECT_ROOT)

from src.retriever.hybrid_retriever import HybridRetriever
from src.rag_selectors.ollama_selector import OllamaSelector # Import the new selector
from src.rag_selectors.gemini_selector import GeminiSelector # Import the old selector for reference

from src.config import (
    ONTOLOGY_DUMP_JSON,
    WHOOSH_INDEX_DIR,
    FAISS_INDEX_PATH,
    FAISS_METADATA_PATH,
    EMBEDDING_MODEL_NAME,
    CURIE_PREFIX_MAP,
    DEFAULT_K_LEXICAL,
    DEFAULT_K_VECTOR,
    OLLAMA_SELECTOR_MODEL_NAME # Import the model name
)
from src.utils.ontology_utils import uri_to_curie

# --- Configuration for this specific evaluation script ---
EVALUATION_XML_FILE = os.path.join(PROJECT_ROOT, "data", "CafeteriaFCD_foodon_unique.xml")
# File to save detailed results of incorrect selections
EVALUATION_OUTPUT_FILE = os.path.join(PROJECT_ROOT, "evaluation_results.json")

# --- Logging Setup ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# --- Re-used from evaluate_retriever_recall.py (no changes needed) ---
def parse_evaluation_xml(xml_file_path: str) -> list:
    """
    Parses the evaluation XML file to extract entities and their ground truth semantic tags.
    (This function is identical to the one in evaluate_retriever_recall.py)
    """
    if not os.path.exists(xml_file_path):
        logger.error(f"Evaluation XML file not found: {xml_file_path}")
        return []

    gold_standard_data = []
    try:
        tree = ET.parse(xml_file_path)
        root = tree.getroot()
        for doc_idx, document_node in enumerate(root.findall('.//document')):
            doc_id_node = document_node.find('id')
            doc_id = doc_id_node.text if doc_id_node is not None else f"doc_{doc_idx}"
            
            for ann_idx, annotation_node in enumerate(document_node.findall('annotation')):
                entity_text_node = annotation_node.find('text')
                semantic_tags_node = annotation_node.find('infon[@key="semantic_tags"]')
                ann_id_val = annotation_node.get('id', f"ann_{doc_idx}_{ann_idx}")

                if entity_text_node is not None and semantic_tags_node is not None and entity_text_node.text is not None and semantic_tags_node.text is not None:
                    entity_text = entity_text_node.text.strip()
                    raw_tags = semantic_tags_node.text.strip()
                    true_uris = {tag.strip() for tag in raw_tags.split(';') if tag.strip()}
                    true_curies = {uri_to_curie(uri, CURIE_PREFIX_MAP) for uri in true_uris} - {None}
                    
                    if entity_text and true_curies:
                        gold_standard_data.append({
                            'text': entity_text,
                            'true_curies': true_curies,
                            'doc_id': doc_id,
                            'ann_id': ann_id_val
                        })
    except ET.ParseError as e:
        logger.error(f"Error parsing XML file {xml_file_path}: {e}")
        return []
    
    logger.info(f"Successfully parsed {len(gold_standard_data)} entities from {xml_file_path}")
    return gold_standard_data

# --- New Evaluation Logic for the Full Pipeline ---
def evaluate_full_pipeline(
    retriever: HybridRetriever, 
    selector: GeminiSelector,  #
    gold_standard_data: list, 
    lexical_k: int, 
    vector_k: int
) -> Tuple[float, int, int, int, int, List[Dict]]:
    """
    Evaluates the full retrieval and selection pipeline against the gold standard data.

    Returns:
        A tuple containing:
        - accuracy_score (float)
        - total_entities_processed (int)
        - correct_selections (int)
        - retrieval_failures (int): Count of queries that returned no candidates.
        - selection_failures (int): Count of queries where the selector failed.
        - incorrect_selections (list): A list of dictionaries detailing the misses.
    """
    total_entities_processed = 0
    correct_selections = 0
    retrieval_failures = 0
    selection_failures = 0
    incorrect_selections = []

    if not gold_standard_data:
        logger.warning("No gold standard data provided for evaluation.")
        return 0.0, 0, 0, 0, 0, []

    for i, item in enumerate(gold_standard_data):
        query_text = item['text']
        true_curies = item['true_curies']
        
        total_entities_processed += 1
        logger.info(f"--- Processing ({i+1}/{len(gold_standard_data)}): '{query_text}' (True: {true_curies}) ---")

        # 1. RETRIEVAL STEP: Get candidates
        try:
            # Note: The HybridRetriever's search method should return a combined, reranked list of candidates.
            # We adapt to the provided retriever's output format.
            retriever_output_dict = retriever.search(
                query_string=query_text, lexical_limit=lexical_k, vector_k=vector_k
            )
            lexical_results = retriever_output_dict.get("lexical_results", [])
            vector_results = retriever_output_dict.get("vector_results", [])

            # Combine and deduplicate
            candidates = []
            seen_ids = set()
            for doc in lexical_results + vector_results:
                doc_id = doc.get('id')
                if doc_id and doc_id not in seen_ids:
                    candidates.append(doc)
                    seen_ids.add(doc_id)
            
            if not candidates:
                logger.warning(f"Retrieval Failure: No candidates found for '{query_text}'.")
                retrieval_failures += 1
                continue

        except Exception as e:
            logger.error(f"Error during retrieval for query '{query_text}': {e}", exc_info=True)
            retrieval_failures += 1
            continue

        # 2. SELECTION STEP: Use OllamaSelector
        try:
            selection_result = selector.select_best_term(query=query_text, candidates=candidates)

            if not selection_result or "chosen_id" not in selection_result:
                logger.warning(f"Selection Failure: Selector did not return a valid choice for '{query_text}'.")
                selection_failures += 1
                continue
            
            chosen_curie = selection_result["chosen_id"]

        except Exception as e:
            logger.error(f"Error during selection for query '{query_text}': {e}", exc_info=True)
            selection_failures += 1
            continue
        
        # 3. COMPARISON STEP
        if chosen_curie in true_curies:
            correct_selections += 1
            logger.info(f"✅ HIT! Query: '{query_text}'. Chosen: '{chosen_curie}'. Correct.")
        else:
            logger.info(f"❌ MISS! Query: '{query_text}'. Chosen: '{chosen_curie}', Expected: {true_curies}.")
            incorrect_selections.append({
                "query": query_text,
                "chosen_curie": chosen_curie,
                "true_curies": list(true_curies),
                "explanation": selection_result.get("explanation", "N/A"),
                "candidates_provided": [cand['id'] for cand in candidates]
            })

    if (total_entities_processed - retrieval_failures - selection_failures) == 0:
        accuracy_score = 0.0
    else:
        # Accuracy is based on the number of times the selector could make a choice
        accuracy_score = correct_selections / (total_entities_processed - retrieval_failures - selection_failures)

    return accuracy_score, total_entities_processed, correct_selections, retrieval_failures, selection_failures, incorrect_selections

def main():
    logger.info("Starting Full Pipeline Evaluation Script...")
    
    # 1. Check for necessary model name in config
    if not OLLAMA_SELECTOR_MODEL_NAME:
        logger.error("OLLAMA_SELECTOR_MODEL_NAME is not set in config.py. Exiting.")
        return

    # 2. Parse Gold Standard XML
    logger.info(f"Loading gold standard data from: {EVALUATION_XML_FILE}")
    gold_standard_data = parse_evaluation_xml(EVALUATION_XML_FILE)
    if not gold_standard_data:
        logger.error("Failed to load or parse gold standard data. Exiting.")
        return

    # 3. Initialize Pipeline Components
    try:
        logger.info("Initializing HybridRetriever...")
        retriever = HybridRetriever(
            ontology_data_path=ONTOLOGY_DUMP_JSON,
            whoosh_index_dir=WHOOSH_INDEX_DIR,
            faiss_index_path=FAISS_INDEX_PATH,
            faiss_metadata_path=FAISS_METADATA_PATH,
            embedding_model_name=EMBEDDING_MODEL_NAME
        )
        logger.info("HybridRetriever initialized successfully.")

        logger.info(f"Initializing OllamaSelector with model '{OLLAMA_SELECTOR_MODEL_NAME}'...")
        selector = GeminiSelector(retriever=retriever)
        logger.info("OllamaSelector initialized successfully.")

    except Exception as e:
        logger.error(f"Failed to initialize pipeline components: {e}", exc_info=True)
        return

    # 4. Perform Evaluation
    logger.info(
        f"Starting evaluation with Retriever(lexical_k={DEFAULT_K_LEXICAL}, vector_k={DEFAULT_K_VECTOR}) "
        f"and Selector(model={OLLAMA_SELECTOR_MODEL_NAME})"
    )
    
    accuracy, total, correct, ret_fails, sel_fails, misses = evaluate_full_pipeline(
        retriever, 
        selector, 
        gold_standard_data, 
        lexical_k=DEFAULT_K_LEXICAL,
        vector_k=DEFAULT_K_VECTOR
    )

    # 5. Print and Save Results
    logger.info("--- Evaluation Complete ---")
    logger.info(f"Total entities evaluated: {total}")
    logger.info(f"Retrieval Failures (no candidates): {ret_fails}")
    logger.info(f"Selection Failures (LLM error): {sel_fails}")
    logger.info("-" * 27)
    valid_attempts = total - ret_fails - sel_fails
    logger.info(f"Valid attempts for selector: {valid_attempts}")
    logger.info(f"Correct selections (Hits): {correct}")
    if valid_attempts > 0:
        logger.info(f"Accuracy: {accuracy:.4f} ({correct}/{valid_attempts})")
    else:
        logger.info("Accuracy: N/A (no valid attempts were made)")
    
    logger.info(f"Saving {len(misses)} incorrect selections to {EVALUATION_OUTPUT_FILE}")
    with open(EVALUATION_OUTPUT_FILE, 'w', encoding='utf-8') as f:
        json.dump(misses, f, indent=4)
        
    logger.info("Evaluation finished.")

if __name__ == "__main__":
    if not os.path.exists(EVALUATION_XML_FILE):
        logger.error(f"Evaluation XML file '{EVALUATION_XML_FILE}' not found.")
    else:
        main()
--- END File: src/evaluation/evaluate_pipeline.py ---

--- File: src/rag_selectors/__init__.py ---

--- END File: src/rag_selectors/__init__.py ---

--- File: src/rag_selectors/gemini_selector.py ---
# src/selectors/gemini_selector.py
import os
import logging
import json
from typing import List, Dict, Any, Optional

from google import genai
from google.api_core import exceptions  # <-- Import for better error handling

from src.retriever.hybrid_retriever import HybridRetriever
from src import config

logger = logging.getLogger(__name__)

class GeminiSelector:
    """
    Uses the Google Gemini model to select the best ontology term
    from a list of candidates.
    """
    def __init__(self, retriever: HybridRetriever):
        """
        Initializes the GeminiSelector.

        Args:
            retriever (HybridRetriever): An initialized retriever instance,
                                         used to fetch full details of candidate terms.
        """
        self.retriever = retriever
        self.prompt_template = self._load_prompt_template()

        if not config.GEMINI_API_KEY:
            raise ValueError("GEMINI_API_KEY not found in environment variables.")
        
        # --- CORRECTED PART 1: Client Instantiation ---
        # Instead of genai.configure(), we instantiate a client.
        self.client = genai.Client(api_key=config.GEMINI_API_KEY)
        self.model_name = config.LLM_SELECTOR_MODEL_NAME
        
        logger.info(f"GeminiSelector initialized for model: {self.model_name}")

    def _load_prompt_template(self) -> str:
        """Loads the prompt template from the file."""
        template_path = os.path.join(config.PROJECT_ROOT, "prompts", "final_selection.tpl")
        try:
            with open(template_path, 'r', encoding='utf-8') as f:
                return f.read()
        except FileNotFoundError:
            logger.error(f"Prompt template not found at {template_path}")
            raise

    def _format_candidates_for_prompt(self, candidates: List[Dict[str, Any]]) -> str:
        """Formats the list of candidate documents into a string for the prompt."""
        formatted_list = []
        for i, candidate in enumerate(candidates):
            term_id = candidate.get("id")
            if not term_id:
                continue
            
            # Fetch full details using the retriever
            details = self.retriever.get_term_details(term_id)
            if not details:
                continue

            # Format the details for display
            label = details.get("label", "N/A")
            definition = details.get("definition", "No definition available.")
            synonyms = "; ".join(details.get("synonyms", [])) or "None"

            formatted_list.append(
                f"{i+1}. ID: {term_id}\n"
                f"   Label: {label}\n"
                f"   Definition: {definition}\n"
                f"   Synonyms: {synonyms}"
            )
        return "\n\n".join(formatted_list)

    def select_best_term(self, query: str, candidates: List[Dict[str, Any]]) -> Optional[Dict[str, str]]:
        """
        Prompts Gemini to select the best term and parses the JSON response.

        Args:
            query (str): The original user query.
            candidates (List[Dict[str, Any]]): The list of candidate documents.

        Returns:
            A dictionary with {"chosen_id": str, "explanation": str}, or None on failure.
        """
        if not candidates:
            return None

        candidate_str = self._format_candidates_for_prompt(candidates)
        prompt = self.prompt_template.replace("[USER_ENTITY]", query).replace("[CANDIDATE_LIST]", candidate_str)
        
        logger.info(f"Sending request to Gemini for query: '{query}'")
        try:
            # --- CORRECTED PART 2: The API Call ---
            # Call generate_content on the client.models service.
            # Pass the prompt string to the 'contents' parameter.
            response = self.client.models.generate_content(
                model=self.model_name,
                contents=prompt
            )

            # The rest of your logic is good.
            # Safety feedback check from your example code is a good practice to add here if needed.
            feedback = getattr(response, 'prompt_feedback', None)
            if feedback and any(r.blocked for r in feedback.safety_ratings or []):
                logger.warning(f"Request for query '{query}' was blocked by safety filters.")
                return None

            # Clean up the response text to extract the JSON part
            cleaned_response = response.text.strip().lstrip("```json").rstrip("```").strip()
            
            # Parse the JSON response
            result = json.loads(cleaned_response)
            if "chosen_id" in result and "explanation" in result:
                return result
            else:
                logger.error(f"LLM response is valid JSON but missing required keys: {result}")
                return None
                
        except json.JSONDecodeError:
            logger.error(f"Failed to decode JSON from LLM response: {response.text}")
            return None
        except exceptions.GoogleAPIError as e:  # <-- Specific API error handling
            logger.error(f"A Google API error occurred with the Gemini call: {e}", exc_info=True)
            return None
        except Exception as e:
            logger.error(f"An unexpected error occurred with the Gemini API call: {e}", exc_info=True)
            return None
--- END File: src/rag_selectors/gemini_selector.py ---

--- File: src/rag_selectors/ollama_selector.py ---
# src/selectors/ollama_selector.py
import os
import logging
import json
from typing import List, Dict, Any, Optional

import ollama # <-- New import

from src.retriever.hybrid_retriever import HybridRetriever
from src import config

logger = logging.getLogger(__name__)

class OllamaSelector:
    """
    Uses a local LLM via Ollama to select the best ontology term
    from a list of candidates.
    """
    def __init__(self, retriever: HybridRetriever):
        """
        Initializes the OllamaSelector.

        Args:
            retriever (HybridRetriever): An initialized retriever instance,
                                         used to fetch full details of candidate terms.
        """
        self.retriever = retriever
        self.prompt_template = self._load_prompt_template()
        
        # We get the model name from config, but no API key or client is needed for Ollama.
        self.model_name = config.OLLAMA_SELECTOR_MODEL_NAME # Assumes you have this in your config
        
        # You might want to add a check here to ensure the Ollama service is running.
        try:
            ollama.ps()
            logger.info(f"Ollama service is running. Selector initialized for model: {self.model_name}")
        except Exception:
            logger.error("Ollama service not detected. Please ensure Ollama is running.")
            raise ConnectionError("Ollama service not available.")


    def _load_prompt_template(self) -> str:
        """Loads the prompt template from the file."""
        # This method is unchanged
        template_path = os.path.join(config.PROJECT_ROOT, "prompts", "final_selection.tpl")
        try:
            with open(template_path, 'r', encoding='utf-8') as f:
                return f.read()
        except FileNotFoundError:
            logger.error(f"Prompt template not found at {template_path}")
            raise

    def _format_candidates_for_prompt(self, candidates: List[Dict[str, Any]]) -> str:
        """Formats the list of candidate documents into a string for the prompt."""
        # This method is unchanged
        formatted_list = []
        for i, candidate in enumerate(candidates):
            term_id = candidate.get("id")
            if not term_id:
                continue
            
            details = self.retriever.get_term_details(term_id)
            if not details:
                continue

            label = details.get("label", "N/A")
            definition = details.get("definition", "No definition available.")
            synonyms = "; ".join(details.get("synonyms", [])) or "None"

            formatted_list.append(
                f"{i+1}. ID: {term_id}\n"
                f"   Label: {label}\n"
                f"   Definition: {definition}\n"
                f"   Synonyms: {synonyms}"
            )
        return "\n\n".join(formatted_list)

    def select_best_term(self, query: str, candidates: List[Dict[str, Any]]) -> Optional[Dict[str, str]]:
        """
        Prompts Ollama to select the best term and parses the JSON response.

        Args:
            query (str): The original user query.
            candidates (List[Dict[str, Any]]): The list of candidate documents.

        Returns:
            A dictionary with {"chosen_id": str, "explanation": str}, or None on failure.
        """
        if not candidates:
            return None

        candidate_str = self._format_candidates_for_prompt(candidates)
        # The full prompt is created just like before.
        full_prompt = self.prompt_template.replace("[USER_ENTITY]", query).replace("[CANDIDATE_LIST]", candidate_str)
        
        logger.info(f"Sending request to Ollama for query: '{query}' with model '{self.model_name}'")
        try:
            # --- CORRECTED OLLAMA CALL ---
            # The entire prompt goes into a single 'user' message.
            # We use format='json' to ensure the output is valid JSON.
            response = ollama.chat(
                model=self.model_name,
                messages=[
                    {
                        'role': 'user',
                        'content': full_prompt,
                    },
                ],
                format='json' # This is a key feature to get structured output!
            )

            # The response content should be a JSON string.
            response_content = response['message']['content']
            
            # Parse the JSON response
            result = json.loads(response_content)
            
            if "chosen_id" in result and "explanation" in result:
                return result
            else:
                logger.error(f"LLM response is valid JSON but missing required keys: {result}")
                return None
                
        except json.JSONDecodeError:
            # This is less likely with format='json' but is good practice to keep.
            logger.error(f"Failed to decode JSON from Ollama response: {response_content}")
            return None
        except ollama.ResponseError as e:
            logger.error(f"An error occurred with the Ollama API call: {e.status_code} - {e.error}")
            return None
        except Exception as e:
            logger.error(f"An unexpected error occurred during the Ollama call: {e}", exc_info=True)
            return None
--- END File: src/rag_selectors/ollama_selector.py ---

